%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: problemstatement.dvi
%%CreationDate: Fri Oct 13 16:34:18 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMR12 CMBX12 CMR10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter problemstatement.dvi -o
%+ problemstatement.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.13:1634
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 755 2013-03-09 08:48:58Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 707 2012-09-21 14:17:30Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
 /startGlobal { true setglobal globaldict begin } bind def
 /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 65 /A put
dup 68 /D put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB701C77931FFB69EF404DA74179D9AB2E97762B4FF9AE6C2A0E8A2E7
669E43A0310316F782910C69197B2A8EDEDCF79AEA455E04C1AF2274EC40BF80
AA2DD8FE695002348B24F2ADEAEBAFB463B4144AC664688232E704923134BFF7
A33DCB00EC240AFED03153EB252CFF44FA7F7A67F9340301A7D5A8FDB98A45E2
15806AEE35CC62D71A2D92D418E1A410AC3C5D7DE1E7ACE4975E51C0F4EE1951
987E39CFE9A12E12AF027606FF4F95C6FDFCA61FBBDF803E03B502F2DA7F1908
F94927BFD0A82259C93AA032624478B32FAACA8384A57833088436EE4996B424
1C585377A4C2BCA700C1D3B6C656418CB1E40BD30E22F1F1BB7E28A7D189597C
DBCBFAB39E0BA23797703A0A2FDB9FED98182EA422CF8119DB6FB06B0CB457A4
A7BBD7A5EFB861F0D4D6A7407F245A4E7F57FD2160A2F7A7B4DBB64AF943F0E8
63616913AE85A8A4729AB8777045C8816C5F44E2D5AC43522808CB0D98FC87B8
2281E787BB22110677FE41790B6DC394769FD4288E6CC79AA1F1E9E88D21F77C
C7312523A95D5A247E752325D3905FAA8C6798BF19B83B03F156134C75B18FD4
828540C1015DD8D3047D42FD48E8DF7EF45E47584E23BB467286A85E43953CA0
1A8A0D7FE6F1F1D0E500288CAA0E38CDC501383793038C610DD5DF5069E17838
56D557CAFD479A4B5747DB43A088A793903227A296DEC62CA7BC36DB80323126
3A5732B1FBF60EB40929E2ACB6203A44DD4549E3C7DA8065A8E4836048521F93
7A458ADACECAB11C0451FE75968D44FF49AB619C1E8380282EB25940B5589655
A6D2DF8D7E2FF1AF05B8226D43891AB1048B366CBD0F3A064ED774E73D919E81
A8D049A78E7700B2778644C63094DCCB298EE24751666800428229A6C01EA387
93C8CC44738CE61676A7C70D3311FB243F041F94F31CED8242B7C1761373A2B6
CC584C89BA65493A6E9350521920E425AF88291DB2BE10AE79AA3A371A457EB3
23E49A489BD99A39C78438310800E64B5669CC5B18293A52D444BFA6F1501993
5AAC7AA48B651FAE96C1CB318048E1B7E903E5A491A4E8663AFD8E19A27565F9
6D906C4D144B8FCF81FF21827BF7EE4EAD7E1FC03EA0EE7E9D0442948D39EACB
0DDCF55D681CDB4AF5E16161793E7EAE60F673C7D7DC935C95AEDBDCACD0BA71
74F88910184C44AC6F3B02CDD544DFE351BDDDC14BC535BEC380FF0A02EC7460
A65E7E2AFF0DAE428BF4E1035E92E5E07D92444EE9C12541791C54681591484D
F174804366D28BB0B5BAE7D659BE10F84C68942780D7A98A24F2DA6DA7F7E674
2783FE167827C6419B51EFADF7A2FC61C3D1CCB2C60DA7401A2956031A5FA356
E2827F3AA9252D5DC7BEA56813881C493D8CB5555870C0CE3E63A2625DB5DAA2
7BEB87AAFE17B70AA89348723737522D839A331FD3AA3B68A72EC4ECC85A9A22
D7DE43F4055CB0F93780EF6A77BACB47BE28DE0B79274ADE42D123808D934D6C
48A3096ACDB8190E4B9F6F035DBDA3005B805FEA4C7B09A959FE1A20160CE6B7
6600E04C3E7728A1BDB7BB44E8A04A6E76CEC4CB48CA5602357947B9520A807F
A7F1F5D4F2779D648548D3BC8E5FEE55A55155CF7BEA7D4C9C889C96DC10AC3C
11EBB64BF14AF0887EE5EC491BD1616952126EDC4F5F40A0CACA9DDBD40FBC42
D245AEAE6A0A8E4D51DB7BBF2D21C2FDBF773FE7C684CE2C8CEAC19ACEDAC6D7
159F6858254FE5F614476823C3DD41F98C89E5F6E19DADB66F1AF9C4255256A2
08575C6043B14688E0F5446493368A4D9316782BCC1F678D21A0A86C028FAB0F
203062C8EC663A347CDA4B868D4CBA2699648FF7E50E2A77E56C3BC87D329C7B
04DB1542BE60C84D74B1481DA07FFEB895B707487A501D07F81A0FCB2F96C5ED
A30C038069ECD3DA5064739189DDB03F8E7B3F7F636D774659E623157E17352B
F4D04C766BAC5A941175E18351872C2E1BDB60FA8AD2B9143D16776686508C30
75C1BFD7DE53EE18BD0B347DA2E6F25022B9068B118956679C9768300CEBC61F
270EC863AE58AFFAAEE9E556D9D75C36AC7A887D510F896CEDDB47F59841BABA
4D124DC192139064F1B79385F1F03902F4FDE5CFE772C869C095F73ECB420C9C
7F5E4F634226B954252B41AA4BFC829B9EB1EA4B59408944F0B7E4EE2203D4F7
7207FC363CCEE65B2B4FB138D58636FF7272ABE5E35FF0215A923644EF3E9F73
B44243B9FD5631B253B8E27B6C90B49E911578C7866E1CEA9733DF8A4AD3CC34
A95D9A6C82A8D520953F20D80B44C222B63FA2E4016C3665886B7B16A82FD5D9
A4D21F8064F204E656F659C6948CBD03CDED5312317A30687340B88CDC96C793
7D74598E3F72ECC8C0D4DE39CEBEB78B73793593DC3657BC6EBA2F5F4B01789D
5FFE89722AD703D51FC34D93889176DFFD2C812520A22AA6568F90AE175A3CF0
34C4D30E9710CBDDAB78FE75FFFE0DEA7E66615B27745E443E5B27A66ADC840F
4D7DCFA410653A7CEE48D765F3CFD0E335265413B1CB62F5FE838894352D8BF1
1536E9D77E76AC98C5494B85F614C024E50AEEE876A80AF53673F155C468BB13
326949CC8FB9E9EA3E05E0C4C45E8CBAE6E663489C6FB36793B24F632D710209
2BC2C7637234B5A6A61518F408FE3B13D3E2700E50076B1C38C0E34405ED1E5D
4C49670A7277796C1B0FFD6D0351022398B04A8D73902A732B12BA10B7B6B09C
1D3A5AA7EF9F2D808F7B0C7531572EB30CF79EA23864F25EB2B873120EC5A2E1
AD2966EFE5D76738C7921FE9E938D75094F781448ADD342EFB88D7BFC25FCC83
25D0A0CEEAB71EA510139695D7C38C56CA1B50F49400BEF25EDE5E5F1E51EF90
383A1F543E662EA85CB9C945AB188EBD7EC5ED38F068A778F69F3F5BD61A346E
752877A6DA8897CBFADB12AA96D16B2007914347345CCBF496AF370D1AB45E2B
162BB39AF0E131C5123273C031B4A9E5C9EEF039800E91B2A7809B6D6A2EE2B4
DE73C2402DF80AE6DB9F37F56DD425133EB6AFDC4A77E34B2DC1707B7222AE1C
93D619D7006CB160613E51C6A4AFFD5D22BF26BCFE7786AB9ED4B756C2583A29
58E2CE2906B547534E115EBA83F379CF4EC4B9D41C4A6A03DFB922FF0E579FCD
369947BDEE3690EC15BA34E4C0709DAA033F27F965429C1A0736136DAFADA5B9
A833088DFC3C56373BDEF5823E057A55A91ABB53978373B51F238F07A5D627E2
1A253D2D25C668E2B8F1846F792222C45900B0B7829438CC33B014E86E138CA3
18462DF720C9A4AC9B32D0079F10DD525397053E9E4AD9FF03B54D831C1474D2
9B4474EB59B5DFD51DEA010644071F7F2EC06DB0E1781EDC78E93FD8DF1113F5
164A0A4069A890C59DD2D164ADD8F135812486B7562A213711025ACE49F92C7F
8F5314B3E8AF11DE64E5146716EEE5B61B0F801AF5AFE4AFF22E1C56F9A813C3
2382F75D21487656419E3841DF28F1B9AD6067DE2944D9D418750388E0A7E989
0DB485325C704848A37EBE4B386AF78B84AD36F59DF54C001D7D9DA2FDE6A9CE
BC7A7E54C1E6F134B08D34A429B7341DD3CF7E52C4AB929EC1308FE17876405B
980BC573AD8C4D94B01F9D28E7CCCC7FBE1FB0C8A9D162C3E2A83C39A98F5014
BDF3725A8FEA51F9F668C405EF920FF9F5BCAA7E30410BA4390C52FAF616F62B
A1AB27ACFD99EAD434BC7CC0BD2055A4D2414D747B13EF91C8A59FE8CB86DA65
65057A512839A484C9DBE7F855FCBF91126AEC931730A8DBB7DB8BF0028F7EC6
9154DE79DD35D6FC339389E02B82A9E7B8AC3AE17BD8CC50F6E4CA54350AFBEA
014C1D5F3C895E9588C42FB74F63A2E131F4FD6A71470A47ACAED9DB68776D34
D2BF6FF839113DCD08F2DC819C781624FA7A7357F6A33620E806862588C15AED
032CAE0E60E34A590CAD9E862E4ECBA31CF1F08DE416E0BC262F0AF582B00AAC
E7B41FF72051680B769823E692013910B83D8A32638A312409A790669CC2421F
3CD4714D4D595427C40D26C3C6AE125CD6276C09AB8120865EC887A5ADBDEC32
89BD88CD959C71DAFF7B8433BFD670D48BD1E4787272577E46537393EAC2A648
4F17687D2F390007CCD3371BA0DFD2C77B5C77C4B4771A9CBA0AD7815661F8A3
993E832B806D1B2507BB68A6ACBF961F13D479AF64930DB17E469D6AF9CE62B2
EBE3957008244F05C731CC1514141E400A8BFEB83751D2FD9E4758999B0CA0A9
7A83114DC237743FECC1B8D719390EAB8CB55EBD5C154BB73808CA3C586282DB
60A36E8C57203A3BE6A07BF5C85D8845FCA94678C4E25932804F0F55436B6C85
B0A64BD74978BFDEC6456821C1AA3D97AAC5DEBF8E983E07CAB08614EF35722F
3C38DF1B6C13EB000DAD73C64CB827EA46A7482EB21D614B78878FCCC165E575
36F04D937D2B8284BF24256A39E7FDBAAD9864D114D763FABB96EF90B4BC2541
C9902D331ABADB752A85ECFD2B95C811A8D131C628EC33AAD3196A6581F303B9
14BA18D70D47CF4F53693508C931468A24576D1A42E1E35DEE6A86BF7CD180DF
8A78969FF3C020E62DF8D0EA4934AB2ECD045EF392D170BBD23A24BCAE532856
B8A4E6DDE1AEEB7FE0446C7FDA647E282871362F96645859CAC3A54DE2E3E8E2
C65410C21AEDB33AD81752BDF8DF17E04927E3C20B7AD4CD6818EA662D713F24
7B8D99EF81706FCCAF4147AB6F5939E64198968E609FD53DDE9FD26F81E3B7F8
41B009CA77D7A15AE649EE81655D9D8D1510164A936910CB5E6CB5819A7F8F85
3BF096D0EAD60266EBF0B99D4873096FE508679B1165069735EB7AF55C617A2D
8E8B335AB749C018720667BE3284AE203049282D995AD60A36126C7A9A3839ED
4E66ACC1D397CC27FA183E1587F503F2586666974F53D88D043220B0665EAD0C
AD4C6261C316968A84D3C3E0294D713E56D44E99189B97EB37BCFF1F3E4D9001
DA2E5A94C4AF503690C6E0125FD91CF87ED480E8102E66A956C33CD1C7D3979B
27BB728CF7C844D35CA15C50CD05B57CE47FA04989A47B213A14D8008CE66510
6F2C3CC002DD714999DB1BB4002357A151A1D4717DF28B3E9F6132156BADD654
2AAEC5DA43D691F83644B749CF65AA468B2A1712393A9CFAFA4D2650F6217C54
FA243FCD9F3456D0ECC125F04A77C8D0B367E91AEF49C6057410FE3EC67229BA
05DD986D0C1EF61F82DD89A7ADA2A72DFD7BC7F844DF5FD52E9B10A5DE00EC92
8374661F80F93A0C25FD17654C1A7D2E18EB79D87B02CB1F08C75B73FC24CD59
6660401517DFC8B8AFB680F39C7E1FC1DCD12CDCD027A6499A0FF0AED3B124BA
13FF44508C619E8929C291D72AD3F7BDE9746035EDFC1643DA08833755B543A0
1084C7A214B3AC493EC7D4F1AF8BA6D92B8AD46F6BD31E60F9FB916B57993EEE
1C305644D2763570D1B9F11209CEED9D8A4EEABB7A1644586449F56B1071CC93
11E3603515D5183E87DFF8088606AF41CCC4ECECFB7722EB35E631D11EB9F8A6
896ADBA27ABAD3B8888B8BC6AF49768A150F1C404ED65D4245BB64137067F9B7
7843D9A7763AF16D5012A9DE2E7FD11139BEAC2AEA297C3756144DDAFB78DDD5
055D053680A3FCF9737529D52E167B16818AD651BB4B5754D94570D9BA6CC503
95FED9AE4865A1A6D7E7A15876A08EC49A764CE15ED024C0C0287AA901BD55EB
E26E65B80A1C25CB0C77DB762DDA1A62E6D7660059
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E2995196097015E0C4F622C4356B6B
F41DBAFD797A4B9D7AC22332C552043EF98913D0D9B50CA6B7CDAF903BC5C04F
D20A952BA5CC35B646ACD0A287C956B98C450051AF6AAF79DF37F8954473F8F6
652BF03AE2AE82B99D820CF93F5FC0BA17EBD7AF90313E70594EB5C354023BFA
07912408F1757319C7288E99872B907D5AB583B082EEED8AB079C63E38B07D11
6744856E689A479CB3A8BC081F33CB06755926204981DC0A45B3ACC18F6865BB
EE2C50DB43B62E3630FC1D9B1FFB3BFFAA6D0A20C0381ADF48E4D916BEE85BA2
BB40F538F55C11D50F882B73913840B45161262BC8B0012694C3EF26452F9B77
2CD7C7AD6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F1E10DDB693AFE84
246AB18279A2B24E5B50A2FF6337B7B10568EB0BD821F8B99500A30D1F959A11
7F176FD5B8CA4A70F9961A02B350A76F697E285BFA294491AC22E3BC4257933F
986FA58C106E98B256E2293298D5B7A1FADD93BD3CC207D8623EB59F6B3FDF30
24051AFCC00619CA95CD8F97EA85176570BCB441E9B74F7C1D6915938B3324E6
7788D11F468E8ADE12971FD6A5438D8DEDA14983FD315A540DA3F064922470D6
3F7871BC2B5CAB0B6342F1B42302947A3B490FFDD8EEE55FD2D57E52F756384A
83E2267C6484A6D4220E4B8D430846E137E6CA0BD4A5949A5DB38EEE74CF531A
5242EFB376496DB8E8EC7CEA9151BB3FF9C0746080099E8276173D4446330D2B
139A67B17DACEAC7A3B26336A1F5759B14E840F0C5FE027316068F4BB7DA76A9
736E80A8818F63AD429AF6971AB89FA8835379ACF115CFA8FEC7A20B5DB51023
3DE403D68D225B5BA91C814B18ABD2C55BD81130F5D1E2FB148F3A728A2C3E6C
D33E727B2933F1E2E240900C2AC7BDEF8FB9D4574698BC8D4E374956FC37A0CF
7D9AE0D0933CC49558A514BA3CB40E82D565CAD27B9EB2020C908E91E81B07A9
2AD544D2046696094E1E0FC28F18CFBF2656D0A5F8453F45B799BFE55CBA5E62
F16CA4AAD970585C6E338F5F95A83CA11AE479CD96B4F9C3CF1D39123EF1C1EC
A9B83CE4454C165785DC7B085956E2B31CBF164EF31284DC4AE61779BE5DCE90
183592A2C6E2FFB3AFF49BBE499B17CD87A1A38A0CCAB4AFFB3159A66A113E06
6238B6CF498C4B87E6795001F0A64B37B8EDAD4DDF40C38029D811ADF35B869B
B210E44A57178893AF229268DBAFCAA577FDD4A0C3CB556245C965074A8DD4E3
51567B3BD70F801D02ED63B52CA0B86222F2B90F91C1526F7B69537505EEF3F9
C30855C6332DDD58A2809F9A0AE3285F92DA15B29CA142C7BB2296CA5E6050D7
9BA23B8EEF135DF7C81A88BDF2BD0ACE10B99E19A2F941FFE14B1DABCDA48C53
17718908CE0FC16AB1CA18C2DC77AB4701F05066B32DF73B6BA4CDDB1E0B0082
A2EB484D0FF08E1910C070B35A81628FF4B5BDE89C4867E7EFF424DD8B76A510
7BB0C9BDF50E79B62C4F6DE157009A8767E78051A39B263D6AB6AC64F1C1291F
0B78C200B0B8BECA6430A9BDD541BB58FF5F7DF72EB99C5275ACD9518E4DFEAB
5DA339847235425AC5056E7AD9D6773FAAFBF6CC8A06C726F257E9972CEB41F0
D25097B44A9CB6EE412F54DE75B3EC897FAEB296D9F156186D15DBD7F7BC33B3
4BF3EB64D8B41E63A28E978DEF32DB8D3E5253808D085F082F84A35063986A42
B540188C168BE7576F4EE17E9A79D8C598B614B515D1C0389233D22CCD3DF8D1
5F751098B89A1E0415E272F0D67A10232543D468861A7E824E38F1763F25712E
BFEDD3D9CEF5B4636A0D608EF494D17A439067508590BA42C25D0D6F49D45910
9D005070FD4D481045801264AF54701AA1D5F9FB78E7BB6DE0D271F30024C048
023358F33D3C70D5FEB0FA4284C35F751E286E0EBBAF3DABC2D38864A629E0FE
CFBF56C09117A3E36FF1EB04BB78E7BBB2CD7C83A2FF66043784BAE6EB4310D4
D12B5B47F4A22DADE96FBAA509C6886BBBC3E73239CBF56979745A41552F95F7
C5DD1A1A9CA33807DA6FAA0DE76B145B161F8A19D2BFC45ADBA046300353F7D7
72CF9DD1B8DC9E235A4AE0A20A436164EDF47349C1EE789F8BFD837E4071C660
682B4DD10F74A5EE358129796FFC38A74797E2514C78446539070436A3B99E95
67D5DB52E0B8752B7DA94D3946673A179FEE2CCBFAE53B969F1DA17274496D5C
F27DC37AD40C502D3BF73D824413A72119D2484E792AE7DB4A99CC2F0BD0358E
F80AF034D66F9A029B6AFDD3364590EE5F9D3FBBA0D34125774CAC77BB8385DB
92E3E329CFC4E2B3E56E2D5C32E6765282FD31BAD37723E5FF71DBD2497BC6D5
1189F6C24E4B5ADC02B22AF2A316937ABCAA60604417E891FA7FB6D7AA51184E
E56CFB71B57C838A1EE984064892B4F6022CA7C9CD80CAB105B9683ACD6F56CF
E95DF69D6256EFFA7E84958393426D1B91093F9917C99B65DF6F504F14DD921D
9315DEF3CF51C11F2647B26E43243C928A94909C9C8D99F3BA14B9FE83B006FE
1A6D13C94D5DBE07158EB48AF7F083C775D402D98205FFA0BCDE42E7343067EF
E5EDB8AB97CD5ED5DCA774B841330A2A21704B86788F84093A75F784153B8557
6F2725BE78A34850CE178723BB80B90C044713645B2227B3B9F42CB40A63BBEC
D49828A6225298533EE3BF88DB268CD5BD8BC68D51BD2D7A9798B5E47CCC2378
77477FD26A9273C73FBCFE3A505B69A7A5276F826A1D4ACCA24EEB673CA1276B
FC8969DA9FDCF7337FED7547ED1DA6E352A3A16A94426EDEED3F8DB2309D9CFD
94FA265B0A8A68A18871E174D0355364FF7BA27DF0B4CC9D11866647ED5C741A
E4A6E6F049229EF1A1FAAE697FBB667719D9F90D4512413893BB642020846037
47B35F65F347D1D74982BDA338A6051EAB77F92A04E6DBAD7CF20CB97ED78708
375903F65176285D4EEBECF5991C24FF5A3B4D9B74ADCDB56EE266A81969255A
B05EB42ACEE5656DD9F88D7E5B1F9DED983C5D9DA77B3E40D19FFABE2B150510
2220A5E815F4965787C23D2B9D8D0304DBE7A8066254228F830926AE9BD3D694
BC4EBE504CF4C248948E397F8634D82B78EBBD07669E8156254C15D5E2DDBDC4
966782D3365AC335A4B27F40D43A2BAFA4423177A2697F287F9C9F485827AB10
33DB73A7CC3E1A5597685CA54F2C72174E98ABB34782C8D608698A04FB5C4ADC
B570F52E38E750F1175602978539E5074AFB1AD3026B0DD4271E0CCC95703393
F96AB10B59CE6A1CBDB605357F60A18B6DEE60E11CB7932B39673F5AD66F1BBD
F8BA54D931B5A817A57646E00D8A0355BA8777786CC8646834F544D623FD4421
AE1D6E1460DD7B5AA766C4DF58B5914967095B4D29114FDD32D56ACDEDA0874A
C93DF428DEA8855769FE1F61742673891D4495E604480B94D57A95A6394CA4B2
5BEBD1C79295705D6CE557783DB0AC7B39632F0D4F27C8E4F13752585854C18C
876185CF1E8DE6DEDEE32EDA6673FE0340A5C9A5623B0797330A428B020CF540
BB459E4C134BD256872CB34AF628BCF32A5D99F4A0C23830544D48FD3159DBEA
B698898B8C456B760EC883DC7C18994FF41C3513C18A2430674841E82261DF35
30D1DF0AD2970990BC1D48A25093063828F79E87BEE8DDA8C67C2F088FBEEF56
F1A6712CB294CE26DBB9179DC9D0FBF1910C2180824BAFBDE48BF1E5A4CF78E1
D4F699DAAAF8876FEB7EC8112C91FB630D1C0B2B6FBE8FB9EFAFDA468F792620
0D0CD10FD73E2357585958034D9F9D421084E70BF33AF3BECEDB9EB152569FF4
F19641940BA5B630AE02CE9E1646ED88A01A3FC2F7B1A856B22AE3B337EB43A6
0F35563163E30320629C72A0D1F9D5C35CE47069BF8D2DB574C19C9019819639
E9CD0B1F6CF0B4F55BD530F47194B0EDAC5189440A8860C4D3A3821DE0043367
B147CD31BDA5A14E5081B58F90FC3FD1FEC642DAB4E1C57797E896D13493977A
6EC64F901EFD06085978F8EAEEA9368BB109278BCECF4B659DBABB4AC20EB75E
7EF41A418BE7824C919BE1FA278AD38DE3817B4F6EFA7DAE276C8F22022895F8
087B0875BB36E1F7774D9D4BDBBC975BD7F8AD8F8A00E390D5F6F47CE1FB3E1E
056247E258A74C206BE178320D01B4DF145D6DC515C88CCA38660ED1F93D6CBE
E77CF13B4B29163DD96FDB9961941B348CB7710B992972759DDC5C6C5A4AC9E2
1CE0ACF1C02A9B72F3C264E40B44866176A49628C217C17F07B1701B3D733A8A
EBF3EEC6B93C7D8971EB4F2FF8B0A3E01BB0FBC4E6C637EE38D2D1594499E303
B6EBDFB6D4CD4A030A9BA719E4B896DB70543383BF6710200C6AB13DEC5A5D7D
DB88F67F9697C98DB277320CC3784C220D5CB7EEF3830A8797382A5AC3988E81
FD5FA1DAFDD474D53C54771DC9DE04AEB898AF04B9C5802136D29A0C1DDA030D
2C079E58A4C5268591316479D748E52F1E8C90572ADDC662C79788F118468D40
A958AAD852C4C302B6E24120CC038B3F0A51DADF24CB448AEE834E62D37AA01C
7638A5DE557A5A9ACAD33214C675C41FA10531154E5AE68A2C3B1A56EED96BB2
5270E9329C70A4956246F5475BB644FC6FCDF8C0AD112C8CBC554FE960EF4389
B521AB5A84DCAC1D8BC08EDC72B335E54657B3AF0383022A5EFA3BC269210480
02907B8F30DE3DEE74964AA5F6DAF5A783E0A008A1A7005973095E289A1DA38D
A5E8C63E0E81A296537A65795A19A71901A7400C0C33101B9C6714E5A6463855
73DCC3BFCB5DBA1AA605EFACD7B81DB8A019CFCCB2DC1088407EAB6457F01D11
6FB36E3E609D282666D7BCA843784F554720D78D2CF97B56C2AB12B1A7DF5ED3
6993ABBDBF6F3D225A616F52E2E603C633C9EA0B7F8036C41585C24DD69DF144
6F2A9A1B0F9790B8174BE2B6676530C6D42EEA4D8BE305D8EB4EA3CBFB9AFBDB
2C9CB4F73FCBEFB787C363A09C44DD125EA01E240B2D8173C478E0DD1BDACEDA
52DD7D63F0CCD7B0A7D150B1DAA5C06569F8BD6132193E6FDE672F3CAA801B19
3029B7C1EC8121DB839836604C77819E1763654F71BE471E26E078BB297C21F5
5A6E54C61413546F10BEE048EB40DD84CFB1715E6E83F8C5D4F826D732460903
59F90FB6B40E649E94D80230589514932286AC8B77D2C77A9E4B76689FC2709D
390CE732A4180D461D61D410BC948D3B6C33A4C5164071987B0B807F42AD31E8
A4AC60218774D993684CFE9C399F37E0026283ABCD84AAE054663DFC614971B1
A1AB0E20A342C0DC79B9B66881CA128FCAF4B1CA638F9E8E32C97D514727230C
D0F7D741849BDA7804384F4CAFB7AB1BFAE093F33C8A5E479B0C70C79293B12B
416C01979FDE0F5505743370FAE9EB2837369296201035EF7EDE160C97006750
F7864A002E0B01922D996F5EA062365CBF6877A9C10276EE8318F357178E4DBB
6A3205AC2EC474392C89C14F9D4626B14D0CF201E0AB38A7F88BC3D4517896B5
AE61018CA1D250A6BFC23659125B5D1F0FD6CBD59F075DB3EC5A76A0E90F3F3A
94F575E0E339906A26C37EDF4DC780A56E075996D33012873FE94B968DAB9D61
3356F31C16A983869880B25671B43341B2390DB30FFA6051C6F903551A046539
C06F375EACF60237A6EB8155FCA6BA4B45A3170A84ADCEF77B0B20F03781B498
D47D2DEE3B47D560FD9F143FD55EC5BFA8DDC659E7025641BC580D9A05F5FEF6
2743AC1EAC6D312C89F61CABC30EC28AC5129F3CDE023927710F135C7F44EC21
A5242D42016A84BA9CA36F8E544CEA9CE4B68EB613860391574B867F02FEFEDF
A7427236D8A9AC0A60FB71E3A7E8DC142CA26F69267D264BB03CAAE2F3DA7C82
EEBCC02A6112EAAD841D409688AECA041A9F79FB48F45C69E09E4BFBA89F1F34
E32377881D8AEBC0B6E1709483982D173F2C9F064DB62D5C9C037C02D08465BE
FD8ADC9D7C81C7D783ACF6BA2E8F9DE54FE6BB1E52CA1BCD9218C9E986F830AB
08DECEEFED29E0071B1FC1E48F56C98690B7A7121987017A0ADB3873E7CEF666
E2F2FDBCBC3AF0E5F676D97F4E79039C65803C320D0FDF4368614775BD255813
728854AF2956542290EBEFE458DCB9700CBBCC2E3D19C261D01EFDBFDDE9B389
B57B5A4408B16FF20E3A3FB3C9B31F59584455FCA7617FE8D49884012CF0C6B8
BB4963867F6A16199FA17920393166525274A2E2E4D262AB718BCD05A4DF0283
DE1D8AACEAF710F8E52BDB53A6BF5B655878965612B01DBF025D8E2522B2EF8E
5FAA5057955C11AD1207E54D19BE0F4CA72C527EA1B0144367E75D9D50B3A586
06D382AFA6A70435CCF759C9FF16A8E89328867E28E8AC58B0BD96DA6BB82782
63C4A56C156ACA4A8FB611041C503BAC555A94CE228F4C47B55E064DEA04428A
EBBB40A48E0261B5F74EB3D7D45D3EA7EED68EC2096ADB66047FFB7D038AB9B8
1DA32F6EF3F61843769AC6D727D3B511298A6A4B840F85203100546C2CD6CD2B
6F3A270A87541AFF41DA8F9CB1FAD1E78E9C6871F2D7235596F9B101E1CF2A59
EBC0E1CD2F7E62F088E8ADA7C9170DB127B4F629671C96961B05A312D9F7AF55
ACA85F07B94F7F078E3A92152B33627EA49ED7D3C4F74F9D8206478CDD1212C6
BF44829AFA7BDFDA508A9C59512A63896CDC0C662153D9CFDE91A4E99984E49B
A538DDD54BDEFCFEE43B4E48BD490A2141EEF848C9CB1103BB56C2DA7E6AB6D5
1A6A732F6FE57FC10783FBD8736B04ED54B906A5A41EA584CF2DF2272546E9C3
0D7BD4C435A26974A100DC33107C6C13349B0C2AA3F64C51A35EE103AE1AB74B
26F2B5B0AD56B53D0F4AC33536BAD1F2F92B73960E848C0D873FF5972182D961
C4EAE563615A795912F2CDC110DF6D27E0F9120F826A60D57FBC5CD35102F918
0EF45F7A6F399856BB3DD1F32A445FF2A41EF9452F0DDA0BE8F5DCC63F20F8A2
222594D963206BE34E7B1555DF432B940DC4A8C85C69AA9C6EC863E1FB08CADB
FFCDC5BD532B679310F0C5A398897AC65632586CDE14044DE805BEB8D0D4CD98
2B22C2EBBC006929D19196BA8FD6F33DC028A7611BA20EA3AB633854615E0A47
760C1145DB2C354D56C53371EF21E391E84EB07144B7748224D793A9070761B3
70D41156173E18352EB06D31579CAC1C8521457A15BD7D8B350C7EE6C969104D
24617C4B33A4B601C126FDF2F05B21AA479B5B48F87BCF07ADD8902A7CB29337
A7DBFE9CD35F2C489A6C1F710C337C1A2C5F0CD1E32438C2A68971EAA0794C6A
CD8BBB8C755A2FCD1BD5690E0CE3D4C4882A00E36E4CB446CD8B8E2C4A990069
AD45B0D5EB932C23A8C6B42538C16C6CDE820E6992E59F6AF90D4C2FC7BAD97D
8B0C69DFE93B4A64E55C64D9EF4463572B95E4852C57F1ED6A0EC47595BAABF3
6E5046359EC3DC2CAB97F476CCDCFE6C22D96CA291A726FDF673AEBA0D1E870C
45DFE0C43DA3E302D7EA2A4C30C70BD75D7780C6B05109FF12B4FABF76F07E8D
163BB4DA308F57FE7F8DBBD5FC52696C4569114DA4685315DA3B014C81D168E3
2F085916A0295A7DB036492E8C39F970655055BC2AF1F250E200D0B3DA8DAF15
1FC2A047102A3E3079F98F02E023A5749E0D815BA2456D2BF5FC83A4DA471FAD
10D077176417251D0F6FF81B113658D39D1A919521ECF508C1689F8A53089F64
34D784C010F1754681C2BDA7AF952AEF68CBCC87CEC1CAA1A0553240563FAB98
7EE5627F4B2FED0E63F90B8DF6F42196F996CC2FFD2EC256A64A626A695BEFE2
9E0CB211826F9DB98BF8C7BBB52176176E0571120967E1A6C30AD3A0B74B08DA
B11B3B8EC7E21D1EA33A12EFD83A00D40242ED6DBF054FF6BF9A95FC44B9011A
1C8876AB0F9AA85991694275AEB24D1110CC1D71876EE494C2A84F8EFD49F5C3
9E55AF59A516D91E4FD17EFE283BB8A9A50FB3D819F56FF5DD3AD6FC34164DAB
3E557EEDA07EF82F4B5500A4D3B0C27C64C90BCF87437F40ED934F016A4F5026
13F4EB56B0DA7D2925F123EA7E538D1254FA21A1E26F8A5119F474D4E449BE26
92FCC8B8F4A36E59D2511131955E91F407A0BE59D74741E78533DD2B51A8A9DF
AF002CEB76268EF3D249CA5F307C619C9369D667A1A98A3A8309CC5B64BB1C37
B6CC887F44A82B622327EA304B22E8F965F173F1700F50F7FED190CE75E18224
B3B30EB56CC717371114B0069BDE0844CFAD811987EF039247918350E7AD6C7E
383B79167692E1EF4ABFE976BFCA0AED0E072B543DA532AFC4AFA6E05BDCC1B0
07CC66230C9D45768532BA8AC0115A7F651813A14023F57D50F7FA5FECA79259
89E6297F2A69CCFD674A383852BB6FC538D94B5261D263309B1DF9F1C64AE985
0B36272DC67C3E494057614EA0410B0BA2A42954BA420147FA4AA56F073EA86A
B18F0EB958EF21EAC09C3AA99F6E2E647D700A62588D0ACF689FE7EB46B5EAF7
2DEAA7AE662C3D3587C6E020EE7D4B555D5AB81233BBDCE2F1D216A39FC789B5
E80FF94CDA098C8B7C59635CDA756B5A7D9AFE5C1A7B2A8AE5B9B405363834D2
C69166DF9DB075CA7BC67A8F255616539DB401882074D464BE92E63C2FAF9052
467034F31386C947BAB5BA258462B2FAEABF3C5601476537E902BB165948020E
6380403F94BA3F8EAC13E1EDC8AA01DC9F0CA21F38BAC60034F6830BCE71EF26
41CF9C48B68919700F42516BC8E836085387DB99AC3D2B63A9C6B3CB9273459A
6E46244050F025B7567FB5E6436AD637E77A597E00DAF46FC332751F0A3C9207
E9128AB0EC329EE72D7C4C36CCADFBD096496E9A156A5D77E5ED4A591C75E72B
2D105685CAD3F113ED38A30153A23E1B6313AA3CE340C214E6819F4CF649EC71
E8087E605F8EF2030FE14B790019D22E4FF334886E21F6F75CDB1EAC4170F36B
95C8BAD771E8AA1F15DC67FA1EE0C8E7562D2ABE00A059849BDD74F28C4048BF
A501CE4650112FE555B4CC6B5F898C304B27E46200176CB5EA2E39F291C9FBCA
AFF9453F972859AA7BAC9C1F843E1746DC12556407DDC75FDDD47A691CF91AEC
B0EFA04FBE09AA8BAA89D41141C599FB05C3CC857B9F61D1F466760C2D38181E
F8DBC969FF5C8E85F6C1C74AE68360A303F5F9ABD3B579E29AADD7BBCE0C12CA
37191B2F18F05247E6E50382FB68B964EE29C4463277993399198251A6E63A65
FD108F721383CB096247B08C304BAC52483644FAC92AAE52F74064565FCC1FEB
36BFB2F1C55EA27A96FF7B10CA2D15B2AC26F73145C21EB57D62FEF3C035A32F
EDAC5D3E46073548B0CCDC0D1EE78D8D44432680BFD3F7FD1D7C03A21C48F3A5
DD37FC63B93101F03D01B396A076823EB10862EABD311F0C505A551DACFE838A
344E1F1450754E2AB88C4FD4BB812098E45261CB8D152EAE921C707BF10D37C2
FF7E799B7175539C5F3299B83BE8E8C12D1402D7AA015A2B0A5A8D02BCF3A296
8368E30CE41F1B33B5A51422E32C05C84EFB1F818E98AC138334B03B17F73068
55854621C9B29539BDA71BBA7EC248D8FE1277506AD24A402A9D193B92CA84CB
FE5751559572C46E103B2C78A1F106884F36553BC77B8D148E83C1C88760CDE9
8D3C7990AD5F5C41B5FDFF3FB2B2AB94DACF999152453070620B7DD711B9E1F8
E7B8C5E77AA56736065F2C24F1D9495E763B711B041482EE3808989FF98F1AA1
6077C682F61DAA9E83C7964CA938052884B58126B679298D04508FE4BBE52D05
193AD048A21C91AA2B0274B5DF25C5FAF1221F51349FE602EBAD63ED93BE067D
9CCDE5350A0950BC3178A62ED53EC999448F187746C45752E328FD9C95DD367F
94B46347F0FC5EE82DF0841D4E3E82FC76AFFF975C282D4911749595A0D8720F
AEE62327CEF1B3F34ACB8B5B2A07A220769F1246C2B8FF31054F034A542E5054
709E0DD054F3A880E0AD823F42E822E2DA20F35E7C850E02C3B532971C561430
32228F40541A57CE42FFB593697B786E6A6E9295849C9F60F04DCE1A8B74A147
424ABCE046ACD42D7261D86542E49254EAC306489A89CE0E8EA870A69C85169C
C86C54E7F2BDBA28C90185E3BAFDF6F5C98E3D6E53F7DD48AD2FD14241A11E80
EF7219EC7861B0A27C261FEF566E9E8744B93A935DDE602C921834D942085943
E86E6F9175893CD8AFA5C62B9FB769D7C2D4A03AACC822B96DB7F606B3ADB502
595DEAD67FFFE9EA7462EE2ECCAED714C478BC1B886C070642AF29894F8F43AC
176F04EF1DEE9B1DC253AEF7B01D762707A60425B5F3657BAA656C57AD9E60FB
2DCB603FE9CE478BA56D4625307C9ACABB44EFF0EBC89DDE9D8EF03FE4FA37F2
A0FC96ED4F3AA08893F5E0B75F0E637E39EEA97D2E067BB021D8D5F64274A79F
978B7F120538DB84B574025136059A163EC96E08A0E8E1750564F7AA3FBFD442
DF9195D8494A299AC9703C7654513752585CF03FFA8C2786267265334C7B9B51
ECB72F69AABADEE493784396DA8DEF1A74D343B4BF9D30B32F787DFF14F571B4
2184FBE4E08CED552CAD4EF082A953D0D68C40DB009D01E7E809D7F6E20EFB05
22AB206FB3983B96E0AD2DE7FEE3AD4B3FB9FC5A78492D63BC9362DAAB85AC5E
1E6F65826B028DCCF43B53DBE6373155F141A3A2EF2CBC55D4BAACCD7CDDC2D2
1D71C4E64CFEE543BA308BDAF0E090A9667EEDF64196F9FC03D1A5AC9342979C
30CDE043BF073BCA5E1D970236FBB23247843096DEB2C3DBE0B74F42FBE482FE
A4074FD65A5C4208096000696EE68C67AAE3C12A28151255A137B1569CEE7FFB
A22924EBB50FE9F2F38E3D7A21114AFF4A620A17D5CAA23AD0224C45918B4CAB
40E7EB2788AD1E6FC562FD44F04136190CC80E75EA4F4683644CC4CBBD22B72F
5B55F3C694A206717FA0A1AC2F287580D9CA9F0D68D4F43A78B6BCB25E8730BB
6F4D212D61B4E79403AC8C1F2632BCE025B16C10A801AE341A6744D97C707743
76CFB3291B1EA436EE85F47B926FA6AA4DED2040549B0745BFC391E734236D59
1396C4315529E13C323DF2C39CD612F9EC13F5223C07E990EF19381DFB11300B
836E09226F58E28A9F5670A5A28F19571522E0722A070C1AA25FABE78AA266C4
768F8B49E787620D0C2BEC8537B736814E4FF0146FA99871FFE45919C80051B6
0EAD56AE3F3926A592161F513C16C16306E851AD7CD8D5E2F594745306DA4B7A
1989513EED22562DB2EFDF9CDAB0ECC7C70887047C24FF0278CAC214234171B6
01FDF6534556A084CC9D4D9E43C6E33E3DB2F1E9CE7F7D18BB06D7A929C635E4
3B040B63A7EF9797E32F5FF23722A8D755DE4DBCEA68E985A74D7395F42DB3ED
E43F38A2361C50764EC01D0FB2FA86F225DC1B37F90088B8DB12F261D3306D79
CDE3A0B7DD4BC02F35166E4969BAC6428B15D408CB8CB08BF1A8A6042ABDC007
BC093DAAE37F02C0C1BDD471DB36D4CD00D768C7AEA528E59D991AB1C04E620F
AF670EE657417DF4B69E07EBC033B1611A3C10CF013A138AD3818BABA5361D67
69ED5FC81E4F073BEDF70CCA9B74861092AC059EA2F0E42072AB5C7CB92E6664
DFD53F399721949C5196E9887DC18259B781C513339ADEE04702396B44080EFB
EAEF0BB9F63B51BB021B4FAD5172755BDAF11F4DD9EF9EF19866043DF6BF8176
94DF93D08E74A337D0D4DBB03D7F661954B603C4EF00D25DB8ACFA55EB4BE1A0
BEB74282D51995CABFD5CA4AE33C773A6815BAC885A84674B656CE3251516FD9
1B14D30E835959CD67EF9C41DD933FC6257145C0CDCBC70099DAA68FC7C26E49
15B099A441E1332B58167617019BED0D6BDD4857C2F0A6218367BE9585D6AE77
013FF66E736CD732B4F0950A58C9D31B978BAFBE708157C7742ADFE6A074418F
08CAE04934A68FC99EDF35F6E6317B2C33CA2C2E7BFCA15D44698B1D5CFA7027
0E28827795E85C151A6EAA7B7789F6323546CF0C07E6A4FE97024CB77F9F09C4
5A95EB3C2EF9635D6B4DF729DA46152D2A754298123E05C4B9675936EFCE911B
BC75D3A6DB698E0F19856567C79D6F32E15AFD00A134F3C3576DDDE0163EEB21
D7522A56B275B3AD2B8C725DE830C9AFEC2926DE137356EC4EE419961EA0988E
C0C3617DBA9A45C723F82484D76F7F52BBDF3CCEB0E2C60CA9635E9F8E38DA04
8502A59F0E4D24DFE5B75D4008E41EF1ECED79157B7FEF79387AB22CE70BE844
4E9C6098E44FEBB60DEF0CCFCC9BD1341457EC1D32A9802C5A8F88D6C1964FF8
BE906BE156D97352CCE0C9A6D9B4A24FA5C433EFA2A48E068FB6790E199E181B
95DC57B3F07B1A26A5F52F472348A8648BF9F31DA944B8E845CE574F95DBB3CC
2772B7C32A1929DD7A7C099755078AD4A9CF9A1E87E2CB8E815AA6C0B3735E9D
91C995DE9BCFD95B25943C0C8F37AA649AB367E52FD54A2009C69AF4EC4E97F2
5AC2332B3182127E10F30EFEA65B1F4FFEB834A0F92CB0782F7E68558542410F
ED5ABEE2D558682E6BE3E31AAC75E4F9705FF9AF36839AAF46335432A17E74CD
5E8F0ACA835B4F3F32C47D84FC29C7116B920DF8399BB92A865D21FF357ADCC1
DE3FE26F946A32A75C37FB3F9CABA5BDA73559D57DC1734C0B8CC03B8819DDC9
DE9D060C8C40AD48E387E06F9A036BFFA68D3A2F340FEC4E3F9FF4CCDB221D6C
175BF622DEE2356B941F85E27C2A084BCC47150C701A46837D2DB0D878798021
1C4FC8234D4194ACAAD4D453D4F21F9B00E5592038351E388DB64A3AC044DB53
5B6ADF00B4448CE8F769A50FBCBE9880870A75787ED9DB1F4B0BCEEFE684221E
D54B53B8A1D03B4280EE357C54FB141D1ECA988F4FA6842FBED3CADA11F0F939
58C2F78CE6965542489FA3D8D07369CE7ECFF0E34862997518415C5E684D58D8
08840002A88EDCAD5E441A44D4C76059B693CCB0F3C7AA06AD58B16003424F04
D7EC171F4055D187DB5E1FF24A3E8F154A46914C3B8B028243C3D1693F15630B
BBED14FC02906AD318EBD67C108CE53CAD498BF509AEFF8F625D9ACC516E8618
E543B202658F2A654DF248A87CE167D413FDC52E6FE70C1738490E86245032B8
494F88BC17AEDDA11A8040DE1CB0C6846503376FD0E1A4522A8E332D68ABE065
60ECD65B33BC22551A562833D010D768ABF4A8F3E95E527BF76DE9FA8CC71E3A
2632AAFF72253A605BB50AE443920F278C6F169E8705F3A10A22E1116E7F66BA
09167DA1968A54392DFF06ABF135AA3F2E4CAD6F1CE832EDB3898137728239C2
AA15D6AD7A6B3F7929674032730546795814B9DE971F2C74FD6C6B147B8021D0
B3E9B9B110A1E34AD5E6C6FDE02721A412BEBFB79A42C7C0C3BC8B361D2C3A29
39FD9AA585FEDE5E0511BA6DE5E26FEC8862991FABAEE786479F9750207C69CE
4EA3EE4CDBD55C16720543B9323C986BD74E627528B02E12CE598AAB17984FBD
F42A92156CA18F68B37FADE503EFBE1DA2778881279FEDD4E1ECD899447EFEFE
807B15CFA10E39FD2307B7E902D3F9FA279F15381C81AD12C06ADB8D16C10AE4
D4539BF9F29F40F5205255CA3F02D20C786A6646BAB5A1E49E03FB799370D7F2
AFEFBAF7616520AEB81E2EAC0265DC8089971945890EC2938A87B8832BE6447E
D52B569EBA34BA799A8622F5D2FD492274F40270AD3A28E376E4CEF093E680B7
EBD7FB27799114FF946A991F97DFD24C3009037F6692E2B4537DBA468ABA2FDD
959E5342DC52DC378B3C544E357FA57140B4FA8F11746FC632B5DC90F137353B
D93228BA9A4D1C6453DC35275EDE232C4AA168404A538E2E003AEDE88364ACFA
6002F4EA6A7E631A7EFDB1B6CB17710B43A1D027CDD3B610379EBC343B06AFD1
CF67018D820E74CF81C675856737C3F5975117E160E58AB582D092D834D8C09B
1F3B02F0FE525DD9063DF88E60ECE3B587813C360F21CE0322BDA21D9913BA45
EA57037361A456719758409BBB28B4B07F106B0C9A5696D27C065CCD577A2E43
21EB4E00AFD1532E93A2CEEFB1BFA3B84FAEF6857E2BBB75B60EF91F4A96E371
A0A3773A65700BC79F554F3759BDAC82637FC5CE1AE5E54027F5D3EBAE990C35
C53B7C459770F8BBC128A9031EB953491AEADA82EEDC220C53090B1737C2845A
9891E67DD76E71E44B39036AB2D9C088A10700FA4DDDBAFDCF9657EE0692D97C
40CD82BF4FEA38A343E002A05FC3C4D33CE0DE6BD58895E5FC91ABC3396115BA
C93BE11BF06B3A4D1040E64E592F9E01470CF0519822B6DAD9A0577074D42894
1C30C021610FB2724875F0B0F58F1D9795F7659D3796251B0AE53DDF963F5581
1ADA2DED14F921FFB69A564A65BEECFAE7EF34DCC7C3498C98BBA9B4FEF55AFB
9357620AAE8B70778BB38C6EE6386672D386B2BB826B2275450FB0DFD0332D05
96AAC1BA5620D8E64E426D8EEE44C8374484084904F5AABCA03D270E91B5D667
E013323D3667F8A594C30FB613D3BCB37844073092D821EEDD35DB5053DDFE25
99F5F0780DC2365AF0A4EB5CFDE345C6D417037E8961309481AD8E431FE743A3
6DEC1DCEBED9E4A794500BA8BF72A72BAFDD300261C87EEAAF69FAA692019B12
04E9356D71952A233C8B17A7CB0AB2568DAE918E98227F4832A5F4B4DC5C7C1E
9F43AFB31F51F9DF1040963FEA548EDF1E0B1A1BDEB20CE30AE53C289C18289F
FEAACE899FF14E74E36D7F779152D4E25E6502FFAED587ED520C521D113EBD96
353D3FAD337EE2917A424C0B9FFFB7448C6A99D646E6BE7D349BA84B948FF4A3
76163352CD5E814B8439BE07B202116BF8EFF4B996686AA9B044818917F4F333
890B9B788E218CF6F92207E9D286F8A12BB51EEAFCD6099D55EB149BCF5ADC51
D962B3870D59F708B7136D2001D85D31B7CE630194962E4123E0B5378EBC1828
2E6071A1F6187C0BDD593B7DCBD7402412542591AE3F497F6D5A80017F4010AF
AA05DE83837D918C6EDBA23E3BF8A9936B76A9715A7A92D44112550A16F26CB8
6D02D69B8B99E688CB9F84887D2BC3E6274069D7DCCE0F4E476372296F334886
10CEE220DF0E3C794346980BC74B8E45A492DE4729E88AD6BB20CFCD1A6A8293
DB122F0913A3630EABE576917B8CDCD4C3C35DF0A12F9048C9D24A85B0AD6D06
EFABABE92009F71BEB3D54B397EBCF0AB6A7C7F73128727E8D640581517EFE9C
11BAEAB87ED4E7FF4AB0282FCB2F6AE6AA9BA1B2E2BCAAEF7EFE58364C5B1205
15CF8062A93A94A15C8AEA91AC4C89C0B2438105C57BA174DC8BEC2F73B4AF32
2A1339B784107A8D8E38ACE1A3D06D54DF96825116F5D5377CEAA37499D1FD31
BA1E8C74FFBAEC180B709741AEC10B2EEB34BF78739B255C18CB9DE223D97426
F8ECF130825F3AFE76602A5788F3FDCD548F720696402C486F58BC75DFF3ABE9
8B353FA2812BD094DE98194D617AAE8003ECC7CE6996321F59017D1A32685AAE
D21D845539422BD9785326384AE0F73B94C1B554E079C0C126355686D8D10F35
CD5A054F177AE12CD9D58B94F12A837008B7AED51A147B88F8ADA54A01371F3B
2643D22ACF744269FDF8F86FAFDFD198C6F6FB02FCC01BB25B6CA824E1D50226
91B8D5AEB9EF7449DFF10FAB9D09D2905ADBE92E89E832615AB8288B66E0D6B5
706557B831355FDDD9DEEB305B8B619CFF951E6BC4786BD777B262A19D924E15
7307C9A75DA88595727B5042C9120B9239E7643C7113F708B8D03EFB166616B5
0252EBF8FDB5F9C5DD9335F2FF37B4A2B775B3ECE51238359B7581AB406C6064
6F2DFCA9ABE888B91C39327318A8B5F3FDEDD0C0F4E2DA16710482CF6CA2430C
C93646767CAEF30F39DA9715E7BAA88995A057DD633329BB69878341399405E2
C1E2DD0B98CC653E15195362D450F5CEF06323E382588FFB30BE254EA0C866F4
651749B49FF4F94036F8AFFCB8D154FED9C1CDC3C632E70A00190C04D30D43A5
237403750666297B59209D7C635E91CD2CBDFA8CBE98FFB35584E21F6342DE57
3C8A9A7E323EA822B36F839BB89C299DC2D61D583B7F90CFDDA2E13D9D8084D6
D5531FF0FF63B0B48E96BFF0EE32B7FC002C28D30212C80D6F69FB25D376DDB2
273FEC2139037545445D2244A818019BBE819EBEC81D83EB8250944E5F6C0E0A
0A5E1A0997BA1D41A2D4AD2D548C14DECBD76ADD81DE0AA2E06A187B0CD1B91E
A26964A5F02A6DD10E41754B38DD46C043A311EBAAE4747EE29F84EAAD974419
160F11B9539231EE28FB89C039AC4482C3F4DF47FE54978AA3218030A66B7E62
B0777E0472C10DFCB4C6D3EECAD026F8F6276A30ED1767D4BAA3B18F5AD715A1
22526BD3896802971B2C1ACFDB5355B4F28C393EC148C634D05E57AE256B1A04
77150FFDA69FD4304D89DB5D876A8A7E7251F22E5BB06A80E4299ED0D796E35E
FC534D85E1F08DB5EE463BE54700FCD3C3C1AFC54D0197E3C4B32920FF012E38
13421F8C084C166EA5E8DE8772A47FF6BBF743A7C369A6B20626B03511AA8B4D
71DEEBA3F3E87AF7DFF855269E83C6F4F876FB4DE59A31CCB5C6F49F964FB94D
1D423F8DBE47DF2DE5F734FA6929F3015D5B130C2013C07820096D93C4B43DB5
B1F35C98DA0AC542C79572DF1724D19A5B24AF0910CDA50A8F35C5A6895F5AA7
6E16A4D17AE4A978AD6F2D5C495D5542D800F15EFC94FB8B151F99285704FFCE
350758CB8B3F35F8ECC0EE1ACA3213D46C1707E23C5D361D465F07585BB4EA3E
712F64731085B5CD4EEEC7B00DB6D2A6AAE654C5F351775F33F508F43B10CB7A
8A83E5EF79561C9BF8DED349FD0AF4B8F03F0533AA918D8CCEE1C7191F73065B
002D80C205C0511437AB070625ED1D5EFFFC87394E0366BE1E6E0A0DBCB918FA
750E2D19E5A36F912E88662926BB79F9E83DEDDB7A02F924A5FCB0123D27C1B3
ECCF892F269E449ABA083598F5815AF1E2D44B8E4488ECBE9485667216E586D4
461A80B5238032FAD2CEF47DD2B43D812346265355FB648D5382772BD4F93E88
3219F7156798BDB4EC0E5781551929B55B8EF9929CF6711D38143AB2A3195F67
787E5C73D2B0845B64C16303352B15FCF26F9814AEF0DEF360E598A221D1DA23
3321E5E13176E86DF6ED5AAC084D74D663F159F216F0B9A63BE0B639BA0F1D3E
5329DF15EED47EB89310E991722B8C2432815BFD67DB9BCCFF51AB8588017C95
79565483D9C21DD3A5B5E821919FD9952E9159A334E0288C7017391198EAE112
E803C9CC1CC211B7EB42617DA7027D1440F48C6F6090C8DE8D7CA01FBD44E6FB
09411B1CA7DACB378BA7B8106889C0CAAF5B28EC1E88DFBCE4BD3398E358A9A6
FEE721F3A8B31849783C19F25314DD5253727B9B0F3E078F708230C9D2980B4B
D5133FADCCC392540B223558D711D42779BA251B08699267F063DC73D544287B
7B0FF2A4DD9AD740E852811F292F61B224C5B888E1032F9DA31206E8569C6505
837926084AE290C344CDD501BE0AF185B6D5BD82E2ED818A813F35BF23704F7E
6498E6BDF94F0AAC4E4AD5274CE67D53D70C7ECE894256190C54794B1F5F5916
CB6FB2A38CAAF7557A60AACACD03AAE4CCBA906AB736DE4BBAA607815412FF28
F9715A68EAD0D77E9BF84B745F0BA7AEBBDD7EFF4D10304D5DD0A7647AB08964
EDEDDA34EDD1B72EB086ED46816AC9C2783461CB9BA5DEB6B006943F6BEC344C
E7CC2DAFD231CEB74C3F829490F4150992F86C2DF1DC9CC4F7105135B74EE8E0
FBF406670E8BED0907E9D4485D335E12C0945A040700F50BA222F611B8E793D9
81A6E1EC9AAFABB10D8F83C364D3E0BEFD8172ABEC72B4EC2B7767E3F436AA9E
8FEDAAA834EE81B50D950AF652C039B32056C8064A688F49B0F010777A3D6F50
3C263E8F3628F301548199F386A0BDA6D1657EC710AA27A3700E11D4E448285C
CD398B530E4A81310C1871A9F3DA8677747408492ACC9448D6F79CA027DD339B
8A6AB95D99E95747FBF30C8F69D089BA2D4C59CFFCA503680D19A97102896869
7B12C7F135CCDFFF3049887A3B15264FDE367F7D7FA998046E575E4543E6684C
8BCB43F78876D19295AB0B6C635445D6E81862B6F691550F645E976DA71FFEC5
9A1B415A2576185676D6790F068F04F7AF434AD27DCDC0C4585AA4F6A6DCCEF0
B3B9BC696AB5FB32B96E2BE13FA716FCE8871E07F9070C4D7C2F6B5527009F54
0CA49D0C6684214A4F66DB05E1EC828316D1A91E508CC46F884C2DB7D76DD1FE
C85AC9523FDE981387A78C1E733A92642635945C8BDF6D0272A3CAE3697C0A79
E4C363BC3C7D55371E6E75B79FAF7D71E6C565317A95D65FC9D39A6260D4E164
A153D18BA24837FC34B6BB49EEF1479790B754BB19ABD2B7C235B258FF3BDC64
55D47040FC671849365AF30490227EA238ED497F7712E63B6CD89B0FE5F7E4B0
697C9C155EAFEA5DA460DE61906A23FC8D0F4C602C4510D998EDCE860EE077C9
361B795DC7DCFAF6E047BE84FF5CD5F71BA202ABEE690C4ED1ED296064E0E651
4493F9FE82E9C0A62E0D7F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 67 /C put
dup 70 /F put
dup 72 /H put
dup 75 /K put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BFCF3BD739E32E7FE909AEE068D50FAC33605FFF98C7D0115FB860178FD03DB9
7985B78E0AC21F2EA065FA841F5928FB85163B2E2D8F850DC7EE313912C45C28
2783F6762C67882EFEDDC7E7567F91C16B16FD8D5A1ABF35B5586307701B91AD
54984598F2AD46FEE3D68A2731BEAA754C8E730FE0E84952EF77930E4118F8D7
2F3AD755280F260CDC2CC1849CE52FA724CCE85B1E92D0C946712076A74FB2F9
46795C131C157205193A7B6C88FD9D42B1EC8CE7C37144C8FC083E36F3DB62C2
ABDC1BDB221297B462B4FA35CF1D12DD40117A926B286D2B69F71AA2FAF2DAF5
C35003BA48F75B5B78EF38652DB1E4F7F233A746D0E503EA20205D5358AB7E27
36FDE0CEDA0C747ADD8B7CBAC7DD06FD8DB3FEF78AB6FC0233ACD83FA8EF44E2
63D766BE2FC11AFDC5940AA5E3F85BFBB83DA811AF2DF4312B31A7B0697358A9
04C82AD521344E0733A45C1A7266EC6565995748B8C0486928B43101D4998EE2
8E3035136C1564C093D4B216611FC7B79EFE40B936361A95117AE42903B45363
79A8E91822BF3EA14936B07D49B4A24F9C0C6CF1FE4C5DA66990149C7BA36223
5AE10CC6C145946F4B69B3767401CF79AAEB264840BB9DB998D7D447236BCB17
C111267240271AEBF73D4773456F2B6DDFA2EAD80D9B6D92E336FB4706564812
BE7E842969147FAA363C8CB1D32E079BC8C84B642290DE228F84F28F4B912F55
210D5AE1A3105C7CDF518088B1CB4381744A844F2FDA1F63216A34A423AEB348
D11A46C30B2853586C4ADDC33A68B7350D24D38B2CEB221C244FCD2202349041
0ACDD039F844F25BACB632020AC8101AB22D339BE27690738F3C7A0BCC07A443
DCB512A33F04EE6B29FD385F645B272EDFE88E0B32510763EF5833E8A1793430
2CDF60FA3019C26C339A18D33C5C37B7538E43C21E7B4422E27A48735AF8E2B8
9DBE16F07AEA5628792B4E40FEE2CF9007C2D921ADD581C90922261EF537DD16
ACE81356135C606843D72BC4AA7DE29E45BBA5A531011FE2DB5E36F9AA405B0C
F0AF07481DBCAD99DBC80D1276F8DEEC0115406FC59BCE8444211F685D05C46C
239A9B9C801E84B00D6222A383F35CEA8E652E3F2499D1FAF969855BFC884184
068B8622FB1D9C7D445769BFB3D9C5F455F01145E5504F68E0ACD9315CA0C400
57E34A24F71A4FE731D93E5DDD9472ADB11087A447A94C256006385F39BE7B0D
B17EA69128CB83C98913448348429BD5627EF892A9E33A3B13F2E1D78EC0468E
A8FECE18723C0D6C7A7B3FF88F28D53140CF3E381970429E3446B0EA8797D24A
7BF293584C8DBA6166273126387E42A91091A44F8FA2DBFCB8AA6B9B40F667BA
3065066563083DE0AC0572BA45EB9501A5339B2BD4823FE87F5FC10AD2CF8DA0
5B22F88CD34739DFA8CBB5A25D6689393088DC02E381913234BE9A70A09273A2
6BA389A3441DF5D85693369A46BA1F8E038880A45807710DD322E19536CA72F5
FCF196B287AD6DCF7E54A00BDFC2EF5BD459C732A1EB49A99E4A07519CDF5C66
D022634CC3720E0A1D93A05AE226A1F608016C915376F5FE83E17AD499D71854
08F7C629B629247A54815A8FCF0DFBB1523A3BB41E818075B87D93D69298C8F4
9B4F2F3472842A205FB5CFF5637A8032B96FC3144068EB8A873F6615C93F2A7D
E70B579E3B32D7860BEA3EDA23549E68D4EFB70BAA475D4BEB7305CF7C920FB8
4EEFF8B2C1A6D5250933CAFB7DAE1A8D1523A2E3FA15751D4E9098A53F69A4EE
CC83F907EE44E5614AC94D4470F7BC91BB53970359B072BECB1646DD5AB3F8F9
6E4E506C98EA22E35548C18FF8C8196EE780335DE6713B0DE47FF18493D42DFA
B4E9AFE86C2FC27D3FC26CA823C0BFFE0CF75D7AD31870E4ABBD0F79960C2D80
028C011474CCAB0B984B11B463A5B221E75A76AB80663DECF4682B32C91A84FF
876028931D734CAD0AD5D042EA7B4B8AEB3445D8CF8CEAC08015B356330EB55F
726A0B8A619A3DB0930D4BC07F75693F41CC3FDF2614171E6C0A56E77B277814
59BB4A82D5A3FE2A8A1F0511AF8AB5B0A3F439A62BD25B0305E6682B0AD49ED5
3167095484156EC1AC91ACB0C9DFE1F79CBEBE51A3E2EDC645D2899BA5BDB6A3
C030DAED0ECAFDFACA3039D956E9311FF8678B4704B0C82CEF7B6FBD159709DE
18A53B684649A82F77024FCDEE2159EF53D821CAC852D36A85BBA80F0483752B
BE00B611CBCBB2DCD738138254DCF6E67364EF463D2C4DB47E45DE8CCF1D6F45
6B2AAF434244AF0CC4970F2163C1F6E1DAD340709E8099ADFD6965D9391449BA
5018C62B2E2BDEE0D8052DBF0CBCAF8C0DF5F853A37F7887F70BD357177663ED
A9B766BC914E2B6730AAE27E51992C2004960848867EF41AA9FEE505DB559503
5B38B6A037FA01894280313907EE7BE652B0C480AA4A7B45D148E497873880C0
00DB043A29B9346374B173009FC5B4AAC6E4373F1CD816505A725AECD59E926F
69AF3F7092648DE1CD32FBC4089BB9BF261869C7CF916B001B040BE58FEE30FE
482C76D5F69EEE667D52EAAC362ABDE28934100F7D0AE405CBC086F3F6A9719A
475C4699C794B1C864474F31454187F8D775068A849F6BFB3DA19CFA59F9D0C1
B19FCC76B369421431ABF53353837548117950EE4E32FF20EA670913C0FDB1FA
E71F3ED1FE4C95EB97E5C56781748720943FEA6F7161A67B65473D213ED08486
B64D61A86B1600B699E2F277EEC34D5710F671D125A2A7E2BC696203E2D78EE5
F6273E2F917D4D6E3CFC9D58E401E507DAB6C07D453BEE22EC3D10060A7F8C3E
5AA97298282807222C285DA47A51931A26465DBB454ED8A011C21B73DE56C8B3
1455D6DDB3ABEAD7B77DAB1EC40D110AADCFA5BA690238C5EA7CDBBC53B6F0BF
23742B9547704D865F1DD332FFF69D9B60F84AD6DD8073D8F0F691CA03139B9B
E315FC5F1AA4B1658DB10F0070F68F5E47D83E04980D95B9F2522EFA42F976CD
7A11A1C5EFCD847DB89670303A1CF58DC3D7866BB5BC5798649175B7153427F2
96F4ED2EC00D69C75813458A58AF945F116324642EA65C484692920B9930056C
BFCF80F1EFBE5372F3C71D28DBDA242A791F5374F8ED4E9C5B8385298562CE9B
C0751ECED5A12A7C2BD89B28C73F218DEDE2555C109AF3A181B488EC470DE4D1
D8A2702DB7298B96577345CC39A262A3010AE4B72559ADDAAC725D06E4F8DEDE
92E80924ADBCE68DACAF0BED2D710B43C1408DC14F7B7859DBE9DDE7C6C0F4B1
1A58FE298453C97BCE87641FD83864F0B0675220ED6065E0433B26B38595CA33
902677D17C259C70AEA908E1082825F72A1BFCF2475EE239C93E5760D46ED957
36E01A83EE6AAA4236A54D48BBDA2BB432BC64A768163CCD5D72803595040F7D
E87F83A480EB58CE5DA5976396EA047342CA64C6231CF463579E629376F42FC5
C2B9130A3B9599A6FD7B8F55EB3996C470F5D47C252DD4EA73EFA9F23E3CBA18
FDB94155008C9A84928AEDB96441B9C4AEDF68829CDE6DF5598AF349531D22A6
ACB3D8CEB9FA6E867076DD70E424B1F2144C0A5A626FCD635E74D956D89F3AAB
2C4D2C5E7F37C0DDD639E486A26E72022145B6220F815C74B632959F4C504479
76239C4DB9902640D920BCFF3138179F061B112F81545FB37C0B3BE9803A88E9
C47D7961BEEC18D5968B899AB323844D39686EC9CB0F05DFABB1F51BE9E0B067
7E70BE8A7BD3E08046D9620E03052FDDCCF5CD032F2051B3944F7233C9CEBAAC
8BA289B5DC7D32B34F064C8FD7087139200A923D03479BA797A70CA12A53708C
0684A6D29A50D0FD4F316ACF600CB3D083A0B1279E1FB8DB4F15FC863F397621
09AAF3FD26F7618D637E98896D09ACD299916F6B248E3F7E9E430A3D036BC6C0
07EBD6575C5481220660A92C6A09EFCA7F5A200467BE79A3966865B3BE27879C
769B7828CCC0E2B88E5549A79ADC4D3F4872C07AD612232B1184DFD4A237A23D
2ED8D11115F7A6D248171F8C78D945EB414D0FA79EFE5D6A2F63D89425977C17
4D05E2A19B3E5A3B8EC30415C997D2691AE0A843E07B925EA7BFFD68AC0493B7
A8E9F7911B7E9E3CD1A10648E835E3A806F0B264835B1285D6B0264D58EB7ECD
50AFDFEB8FF05F30422BD8656D59085275011FF085C6FA9844FDF5671C40664E
281200220E14F172BAFB6C0C122554E5CEB92EB49F9E6D801946DD0748A8355E
5AEA0110E0BA1D53E704FA83EDE915E84A20F5907D77ECFD2287A7BFEC78D6D1
C593E37FD4DB9598677569BCA2613D78F2C0EA9FA215343AA67A5D05C912892D
B4B02A9AA178D687741E20C73B3FC091DECD4771D9EC8E675C0C6AF0C1D7B592
F6108B0F4B02ECECF6F3AC3EBD3E352E1DF90632E54F8CCA66F15ACC8DC6DB84
39FA42A0DFF7A12B305CF39EBD411ED124EBB86F165D907309018F0DAF27A8CE
7BC6B6FEC277CA8B6C149F0BBE8C27BCC2D69509AD2D3049294F1FD45669A79D
0A955D840C610137CB7C361CFDB09FB518ED28FD3EB8710235A8664F62711D3E
0890A82B746D5C36276279A901C862B1898AA1372C3079FBAEB32BD19031778C
FCEAED8EFE09691F9D7434D1E0AB3A521DDCBC8C5FC7EE13ABB5FB2D347E4AD7
10632A7F0AF190C8B0AE2103883894289BF9EC486D0E3BC5D8B99493DEF3DF21
4FB05268A0674B237E048904BBD47D276DE5E1DDFA2AD8565E9E5F008691B1B8
6A9D904CA9F27C8582036EDC0B8A5DE1A07B4484B6A5C4B370DC289C2A86CEC6
CDCEB4C4B5E67AA8677719128A9147122076AAFA3531A614FDF7295D4A3B4758
BB21604A08D9D175FC8C40BC6E1AD1C6EB441A9C5A6B9D49DE1C68F377030D35
E1FD2DACA709030E072D707551A4ED6D0A92C08E4B79547BABC2AAD0DAD68E2C
BC4DC8516C22BA1DDC77DDE5B845704D03FC17CF168FB246975C26C1520FFC93
2BF228175EFA41A6387C10AF66FA7A5DA606BEE20394D3226597CF5564A9C43B
E80639C88FCD348DB6D1FB300DA363A5A5B87792FF47387EFCCB1E42758B6D43
8EF0B84DE28382E743F22D67059D4535EC07ADA23FCC4CF2CD243884146D670B
67A4D00999770DFB0F08A8AE9ABAB147C12ED2361824C27C0799D79221DBD477
9B6186BD5791E5B40291C032C5C781A770F042CE221D0499E9B0F2AC802F9097
6EE357373EE943F657842D56E3D87AF7C6CDEE176281B9048864BA5E1476CFE4
3F36F1B7712576501B5C35EF6EDD4D5A81FE7158FFD05A276DA0B4C04DD7A6D4
D9BFD211441231702103DF24B3B34EA87F26B01781556C6D2E185A6B9205DD2E
DA32AC1692D700E142F8AD4F5C9A19DE35D4AD3A0A8D1BE9653BCE06E61776F8
3473818E326C5E3C8E27D5BCD45616B61D1BBB868037A7FE55DF98DCBE37E3C2
9D5C4CCA5CCEFF5F2EA8F2932B962EED03CC41038ADEC0A132AC260C9E26B902
69C80E4E3AF6D7DE5B7005F7D7F603E734A1C7C9184102E28C1CB39743BEC3BE
D7CEAB5C15B198DD9AF70CA908DB8610BB7F588A63DDF962710E6E05691E280D
B74DAB493BC2EE73612654690B460BE338525A4AA3A5C5CB116083440B801498
7D95EEE76C100D3A5560C08CA9408F67BCAAD6B2264429C742096B7F2B321274
97D710785EE82CBC13C46467BDC117630B72A5B49184987BF422F40F5C91AD96
B6F1C1154FD5480E88E9BE7D89799B0663E6E5010F4916E82E1718E72638DDCD
722D27DDA0A14B1A6417033563CD948977D0E359CB4F75846ED08CF7C6CA4D15
2AC26B139CFB80DEDB7277DF186A6872678B744F607DA3238FB675E9A5EA51E5
FF7236731904185EB2C119DE916B29DEE6424F9EDB0A1CD17545CCDBD71EB8E7
1268E61A2CAC1E468D41D48EAA1C53C60B750898C0FE07FD219F865C97EC51AC
717FA413B9D0CF50F3E53748D5B0DE7F4E0DFD8D84D8FC7441A80CE715D59BB7
396DCAFB4F077995F28F260228072EBD3CC04F4B49F717C404D96D9FB5DDF564
B7FFC2197735222C7EBF0679F54285A47DCC082CA5C2B45CBC5F08B6813CE4A3
0BCEFB7F15AED79764F4EE3D1D06D7C300F9A77AB698A5BFF23E0089CE6384B9
70AEF42F5C7CAE32C333B61E7B1521B022FAA8A06CD8DFBADEAF3BAAC7469BDB
28CCB310C2CA7F7B03676BB1B3427D65A7E22C1B6A0188E85FCF888E2C7F7A06
3D0E8BEACF88AD2D399BA143A8BC962DED3DCFC6B3D2CD196D1286E950AD4E41
78A0DE4CC80B0AED8C7015D8B1CB43353BA65224191D5C5A7B51E3D2772F46B8
4E901A7ACDAA3E0A18C6098CCFE07CDF86DA39C7EBDF2DBB00B1F3788247AA60
FDAE67BDE8AA3159711CA0CFE7EF5744BF921A6F0B0AC3614E4695A5B50455BF
6FBBBE8A7F86114C12D324560A0DA16F82157CFED2B539BFB11DC74372725AA4
4C5CD50331B4ECF100F1A3FA4BF0E6336C1110400AE6CF2E9B9D5DCF14136237
E844820E08A8F3E4228973660B5A0B850C9437E8FC52B52CCDBBEFC43BD1A616
C294F101837A26352218E744356CC98BE9255497C10AEF76604298E9FE8AFDFB
B5FBA204E471A237B62E361495368C97F5DB868AFC87D56EE75EE09645F9DF09
70A4D6E2B7BAFFA8DBD8F5B80E9EB9467C2F42BA89962AC2752EBB12163570D2
27F79ABED8BCA9E424328806D7186B37DF4554FF974029949E94A0E1EFB4D9B0
F80DC997279871ECE84685109765FDBBBF94E8A2DC9CFBABDD60AFDE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/UniqueID 5000795 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 68 /D put
dup 72 /H put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D72541D54EBDC4B44A07AA72F7FDB023
6E0899786D3E0B8FEBB376C085CE6A2D26D003FF8EB0E6D19E277B28C75437BB
390583975132CD433C1EEBB4D44249C85307E3D8CABE77C1D9CF36025E0CAD62
E3258866F9AB86A5B9A9BD71783231995038C4A1835837E9328AF973D487631C
D787A20EA25DAB4C929C65DFDDFB605D026A768D3C279E4DB9DDE98CE367AFE1
DE2D1B658D582F5EF5AF05FFD8D797A2BC7A0DF45857419ADBE46AAB1AF01193
3E866343B7702EC63B3B512DE8ED82482662F91FBB81751FA8D49A24AB28083D
CC51DBB5E56D98500AC8C62D73815A6529AD8D3F4E20EE0C37C91F61A3028547
0E392939F6EA06F3D4D690C13F3BE403654412E6D469B18128EF794A972FBCA2
BB3E810A6BFD18AAFA383103D92855EC3BE78E0B03A545B3CA2F4AE1A09296EA
787E5977AE8E5432DD60D67763AC723ED4B8E3C4F510710A71D8CFF9F957DB93
8EFF733E88B0AF90DA9DF706413B33AA5EF6E9F328A434E986F45B6ED6D00EC8
227A6A913756AD43B708852F691F04BA6C716417B3391AA7E0F3311A63972EE4
68B9A5C8519459F6AC563FDAD22FC31FB30051962CC8B644639C7AED73BBE86D
204F406E3AE147E59475129DB46A95D56BB73C224FEF00B6D6FBBC58D6FE1DDD
8E9A3BF9DD69780B0DC9B8950DEA577F51535965550C202DD89D795C472A86EF
362684A94ACF7FAE89337B129A2B1CC4360FC5B002D37079AB412384B50A4A9E
7AFCED3E725459998F1852E87CD38C217306EC7928EDE3E6933200334237D82A
7BA66FA0E57F3AF89D258D66AB30A5B377C6A8ED1936A119271FC9A35A00F461
23A75C0AF5B6AB90D8CDFADB467B3B6E07EEAA265358FB2E46E4955C6A0FECAF
FB30DEA0E246F0B69A87E99C27A527090F0B34D7A53795C393AC4452075DD5FB
70924B6FADD0B6DB1919D26F4202A747909B06C59BDAA5D2339F78F17231AF49
E138A0EF792FA1582E921BB2AEAA87875E8B3478B121CF656BCA521A2CCEDF75
176F2CB6669BBF71CF1B6B22AC0D848EBB4A12A7AF08C68B911BA982D4473E5D
80851101915F86AB48703416AF805DE5C63686A81ADC17B1264A2759B451D608
183B4555E98CF4877DFC79F6F5EE718D4A49296BFD8A2D905EE2D0C186460CAE
BEC535B323E42768753C98D4042E804384AAE40C57252EF57B4E714C444C364E
0E6A9D23E9B8B96D3110F8E1363BA46BE0E6790D3232FC801E43C75C40C2100B
BCE61E183E9FCAF1530DBEBB733434D1130DF0EB6251CEA947BA43B1596EF4F9
9646861806DCAD109A6AAD861BE212B7F1974700011CD41B19BCCC47C0132129
BD821C5248413E46BBFF5D06149532684067756E0BA10C40FD0A6255839B420F
B69E8D4A5061FB96B71E429BB1233FE03F73D37D49E895EBF80D43E5819E3A9F
D2D8FFF72C68884E3EDFB4F52CA6D29ADFCC58CD9DB6D9B23323935148CD7055
913B9C2EBD7DFB432E0412C0830260246C2277A782045D1B0EE38AA648E02A89
67BAD5378951A72AA82DAD79FD63074706AF1AAE263757BBEC0FBB8ED36C98AB
ED90CD72587BB3CA7B98E945F0DC07FA70B6793BB5D652886535F04D4FA51A22
5A84605BFE4D6929519446FBB751D26B5293D8C72BF48C08D934896D1D3D3532
452C532AC212D7741D517DCEDE1881E2F59F181AD18A13D37B00091137D68CCD
336FD38F3B163D42D4EB7153F9141DFF483BC264D1267A5D89670422BFD788F2
D890C457BFE18EF59C135E52391B4CE6AD1205F8D017FB00D3C20BB9B7921F4E
2807AF97F18332DBBCE2032C0D3A21BE28DDCDF2A589BF599150BF3A6D39C51A
F5E4EFBDFF407C9CE7AAD7068A8664CAADC140C0DC45A2E4EB1D73A44EF94FAC
5E47253E360B636EB11500BC4DBC327FB4601524AB2F0C652EE2AACA89BDEF6F
2789DBDA2DF78470C64A99BC3560C4B7466B70426ACAB0D723742D2CA1D67197
00B4DE208240831DED10F6AADBC93681FDEF82E8ADC2C4293D43AE5D48F837DB
818292562A0C346DDA0471C6D62487743BFB036CD66EB0330CA2018097E58606
B30010A8716BACA965F1E9372043C4F316B2C9CD2AB358E6B3BEFDE5B48974F1
591DA2D35D7FD8C264DD7237D15B15B377041B1A903FB4F04A27638FA1125220
25D2B1FDDE0CAEC979F48D1919909919ED53274292F16309720806BD8EAE765A
82D05988ED3CB1526C756C3514F65888F8C986E9DD69621D486B96D923CD573E
2C8F3C24C78F956CE988593B20CFF896F95E8B2A48596F6B81BFDFDEBB1EAE90
98447791EB3ADE5E9C5DD18835EC228C1995E999D7C33E2546DC7AFBF07DC576
4A2B627C28693D7C1E6A6141062B53600C494FA37DB75021BABEF8AFF01D3ED1
CF9D8C91D88D7BC2BB303E7E8EA6EAF445DFD763CED24D6BB24947FB762975E1
4C6F478AC3556B65906F0616EF9C28FA7DC2792D5235E08390C2D915A8EA61E8
E927BB024827D263F6B61EBEC2D83F207B2D8BD362CEB8AE4E8F979268A42D8C
42C41F20E28CDA7860FB783A6832A3086CD9ABF4C3DC01FA586B7882CA93F03D
3C12F358F2B41DAA56DFF909E3ADC53D3AE6EF612E491F085F7C213F31F96FEA
C9DE382AEAA475BC8B3E3ECE336DD5B7B504488EE4C4AD63D86134ADACA4E8DF
0D972F9AD4948A4D65AA7EE65461998C98177B8837D67525B1C350851EA61631
B8914C78CA75D0DFA043ADA5E7332EF09050572F9B82539D63788FCEE0C4C9D3
6E779CCD4B7DD3D6C9E68D2C23F0A4041256B9F0A41D9AB2A3C52E7A1F89575F
68C5AE1665A23CEFD34195719B5A7D20607E6E5A6B966B379FA1ABA4BEDC2D4E
EC69E1ADF025884A5E51E73652B902F00252DDC37F954377FC70C280F0C37B18
FBDFE8F3E0207012695B9F0BAFC957C72B74DD3A045F2F3CA2659125CE72AB52
67D4768AAC6ACD7D0C1274D6A2DA49774F576D7FB619011CE2F4E84E23262C02
29A4130300D04A29D722CB4FCED15A6902F9E3C1F9DC1C1B238DCD9DD63DB750
8B6DD1A4E462D1A461CF95D0444FF6D220056A44B83C8205AF2BE0F2092AA7A1
0A8EFC3FA3DC402DCD9013F853A4815D5791E785476DC9D616F8D08BA44765F7
D10E63AEFEFC02B15F4F730CE93C541F58A8D7BB0EB30A66BC473EC1E7675909
9F94A99484BC6B6FFB5E54EDD5541BD483B55E5BB8363AA22441A31FA3BB803D
D8EC9EF856B0A472A0BA4CB7469B4494F7BB4331B615A3D532E36E68ED53EFC6
F1D6699864D17EA65A4DD735C9008AD0DC928CEFF3129D51A9C9FD8012100011
F88D52C576AE5E0D9D1E380286F01D0E7B23C424143F18080144BF4CEE4F5ED3
5F331592688A361C73EF8A99A28A154435176C604E53F14485DE45D380F3D630
FD4F4534F94D15A7E1383B2880B0E5CD3A0AEAB7AE2978C45EE45C86FC75F8F4
17855F5C7CF44195EA95AA1CF3057200C9878E00ED2AE9E1BFC40D5978C5278C
7059009BA3F27657A071A385329A035E90624EEEE6C3A8BB5F0ABA6CA968DA43
E4B1283ADC307D18E37C7BCDC973BF08A7C597DB81114E7B9EDB02393A81BCD8
11D93B50A658D3F5699758CE217C872942078A99DF20AE2C7057493F041870FF
50B17852268F00DDFC72358F6E8AA57990575E1596761BDBC6173AA97897B35E
23B428C04E2C8881C0315BE26D23E9D5F18B67BAD3DBE738084795BA932CF2A6
95174C186A8AB3018F4F7E4995312FCCA1C4E3FF44854E2567B13113A123422C
F42718D1AA31567896F3105B6AFD5B22C609254C4C64DCDEF313306C20EDFC92
1BA1FCDF9534141C734C33CB13A1696FC8567C57348DDC30B6175A94D25FA5DC
2AD857378CC7B074A8CCE4A1397924A1D62879312ED75BF82BAC9F204A903539
CBA7F2D3558758094C6992ED132FFEB47725293D6CB73DAC19E62BB6DAB28CB7
15B462BA32C0583D6928329BF2B9B4B7EAE0CD792A2E2B349D6F05028809AAD4
7B56A405E3B5622A29EE08A8DCC04F752BEA9D9A8045789B148C04E601517D54
39F283DACE5383074BADD3F8002835CC39A9DAF63F39E045924E92035A12A7DA
AB17A937ED1A44548B1718EC03DC0913B3F23135D3415B748B8D2C44CD300B89
341B1843A5F369EC3F8C27C0410CB196E7479FC188AA84FAAA82E0B06FBBFB31
A20737FBBFC4E2E9DFBFE73A3FFC1A3E29C2C63B9252AFCF765DA885D665A98C
1315839F422FF9E4981D20F630F09903F22CDE15D40257B04528267B86E8C5BE
E23DDB85202DE9C4745FC71822F84466E3BD89D8A6B0A940CD150CCF995EE3A3
C019060FA7C13B065C2A1530A6EA029DE5F4656EBAA8DCEA1DFFA7E738F8AF24
FB1A0941372017A2DEB0B91F05EBD164512FFA5F0A46D20AA693DA77BED6920D
E3A8F498E14E6FD2F35CF74F8DECEDC485DE0EB3B1A8010F0CBDBC15BB0F6F83
78AE7EFBDB0CD91777A55FCF840840438B16874DA277FE4B33C91135DF6848E9
8ADCB82C513B09130BD97051564D93B965A7A4DEF3EB42118A18077F9557F7E7
3F69AFD6794620A6DC67435C7422ABA5DA1555D333613C1967EC4F26F3CEAA8F
E9C14287C33AFF37220F7818BC454FAD23F7EBDC8B1F0765B83B84A81D46AD1D
9AA8EC95FBA1C0925FD488DB414248F33F333969AA467E0E134229A599E28A7A
482751606951B822D3BBFFEFDE750322E40303D42BD8EAAAF133A4A792A4081A
42BE39FD9F324EFCD96D0A63321988E3F34141543CF581F38D8B64076AC8DBA8
B6B0143FED7473DF44CE5C7734E544A44B2F5D374CBA2543817B71259276822B
477F7E1E949FD3B48473238A6E11E2FE4312944476EE20A3ACC194C79E8549C9
1C6C938C1409DF88F5EE88ED52BBF68B93DBC6EE0C1F2A7F3AB66A7EF3977DA7
75D56AD4F3A887486069C95950EA6BDD80D9B58CD8CC6D8AE02DA909AEC376BC
A036923640BE18CE8CE3D33EF9C8190756AE66B7932B79BAC004301253CA5036
CC1F75B5CD6E7A4EA413A434FBA4D9247E318712E10DC699A3390020697985D7
A49C7EE9D0E913A2CA608051FC225CC5D302D9E83C6EA73860E64B5963D5CF79
3DF8198CEA8C8298F98FB0E330BC1836320A9C19AAEE2DAD61B73D8AC00F6F51
2D174BA9433F39BE63A2F5CF5CF29476C6D902B8D875E45E76F40FA330F667EE
458A0B6FEFBB12D6BC1AE1ECA1BA3EBF5EBB938851602132F6E94EA10792A7AE
66BD724818CDBE5FC647830A046367D1ED7EDC83A62F67ACECF4CA59FA67A4D1
A70A607483646480D0FBF3DC941CD7E2E539471EA3A995DBF5688C7F29FC552B
19D70E573F1D9AA042D06EF87CA2902A58BAD2CBC0325DECF0335812A70AC5BC
524175034E15F0089BC6C375C6F9BC10D67058ADFF1DF48B37DA6C6041709713
08B0C6EA9E7CE0C1DAF44149E067189A71ED7F02E05AC0CC229BEB2745BCA13F
F519EC48ADE7852B399F3F8DFC469427B31A3A9D0FB3DCDDA6572FCE23962634
B9239997E890BAEE4EA3211F2D8636A4B354F2BF3B3C92C1384B0168454F5BA4
7B2A882FD6A3E2F6D62EBFEE28401DF68B38C1631AA7CDA27946C4C4DC957F92
9A2D77F47815BB3D3FCF6586E70D31FC1E098F91C5CA999062290BB3376BD35F
62CCAB20987305EBEA8CD92C9D816F10C3B0A042A64FCD70ACAC7868894A5AA4
70E5A9EEF045AFA62094DDF19E30DA76ADF7B3861190BDB865CEF5AC576130E3
BD0EAD559DFF033CEF85289505363B441FEF707738D82A6E3608F6DFCD980823
1FD6F9F547C2F072EE0F5337B73F8F5D02D8298213D4A74A69E62DB0BAB3243F
1D1DC024E784975A56565BA86BF2FF660B7DB7E6D580180FFA58C3084CE014FB
8B45E44AE199E1BC9C614BD2F94280EA9599A6E4705F8FD3002628D22B2EC0CA
60FC22D36C488AB13D9730A74270A5BAA1E2FF669F0729D18F1A2C24F83F05A4
C4DF2E96A3D5186C5B7BC912F0ACBB91541B3F4E75885F2F299CB42E30249BF5
11106A5FA13673ECE73F4B1A866A8868404160CD3FD924373AE0300796AB99AA
85E477BA4FCAC721E8A9F76825F95BB82AAB04062B4EA0AFF0AD9FC96FC6BAB6
F854A201E7542D770668EBF19E1392B8B3F34CBB5D6143C9E43A7284CAAA5EA6
1BCF4B05586A0CFED08529688BF3D3B58970F08D0BD723853728B493818166C3
075D4861D23343EF850FD3CB22E2F06D55A380676AE643FB82EA6914E0F30072
C4C02CC2098BF743F3F129B8013622C81D6DBAFB512AA3BFBCF267A2E84B3871
4441E2421D52E4354B04294571D039E8225A3E8639F0C8B674B663A697924F9E
C4053951E30143691B8E7786DE6D5EE95CCD36C57C2F067F0F8992287DECF94C
DC533D26C7727BC7557AD6CD6E1DA90BB2AA3B4B5A69C5AED1DB2065E62C7494
1136D9A036A01AD7930FE5DA9DFD84F7032986759F5E0F686D05ED713F862141
D4BE5F9D74A76882B442AC490C3B4AEC22074B46E9F6FF1D8A44B72329909A00
CC491128A587AF45A785F242CF9552AFA7D25BEF77E9482B1118432BFFE42A8B
40D57D92978718DA0ABEA4FB580C9D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (problemstatement.dvi)
@start /Fa 138[75 52 53 55 1[75 67 75 112 37 2[37 2[41
61 75 60 75 65 13[75 2[92 2[128 8[103 16[67 67 67 49[{}23
119.552 /CMBX12 rf /Fb 133[37 44 44 60 44 46 32 33 33
44 46 42 46 69 23 44 25 23 46 42 25 37 46 37 46 42 9[85
62 62 60 46 2[57 65 1[76 52 2[30 62 1[54 57 1[60 59 62
12[42 42 42 42 2[23 28 23 2[32 32 25[69 46 46 48 11[{}55
83.022 /CMR10 rf /Fc 139[44 44 46 14[50 62 54 31[85 65[{}7
99.6264 /CMBX12 rf /Fd 134[51 1[70 2[38 38 38 1[54 49
54 1[27 2[27 1[49 1[43 3[49 13[54 7[76 2[73 1[64 2[70
11[49 49 1[49 1[49 49 49 48[{}24 99.6264 /CMR12 rf /Fe
134[83 1[115 2[61 62 61 1[88 79 88 133 43 2[43 88 79
47 70 2[88 79 10[119 2[88 2[108 2[146 4[119 3[122 34[43
33[{}24 172.188 /CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150
0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 0 TeXcolorgray 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 0
TeXcolorgray 0 TeXcolorgray 168 120 a Fe(Health)l(y)52
b(Dogs!)69 b(Soft)l(w)l(are)52 b(for)g(Managing)g(P)l(et)g(Safet)l(y)g
(at)1210 327 y(a)g(V)-13 b(eterinary)52 b(Hospital)1280
535 y(Problem)g(Statemen)l(t)1605 651 y Fd(Kailyn)33
b(Hellw)m(ege)1435 767 y(CS)g(461)f(Senior)h(Capstone)1757
883 y(F)-8 b(all)32 b(2017)150 1126 y Fc(Abstract)150
1226 y Fb(The)23 b(Oregon)f(State)h(Univ)n(ersit)n(y)f(V)-7
b(eterinary)23 b(Hospital)g(curren)n(tly)f(uses)h(an)g(outdated)g
(system)g(of)g(comm)n(unicat-)150 1325 y(ing)i(that)h(is)g(ine\016cien)
n(t)g(and)f(error)f(prone.)35 b(The)26 b(solution)f(is)h(to)f(create)g
(a)g(customized)g(electronic)g(comm)n(unica-)150 1425
y(tion)g(system)g(to)f(pro)n(vide)g(b)r(etter)h(trac)n(king)f(of)g
(messages)g(within)h(the)g(hospital)g(to)g(impro)n(v)n(e)e(the)i(exp)r
(erience)g(for)150 1525 y(the)32 b(v)n(eterinarians,)e(sta\013,)i(o)n
(wners,)e(and)h(patien)n(ts.)48 b(It)31 b(will)h(allo)n(w)e(the)h
(hospital)g(to)g(trac)n(k)f(and)h(analyze)f(their)150
1624 y(resp)r(onse)g(times)h(to)g(phone)g(calls)g(and)g(reduce)g(the)g
(amoun)n(t)g(of)g(w)n(asted)f(pap)r(er)h(and)g(time)h(from)e(prin)n
(ting)h(out)150 1724 y(messages)25 b(and)h(running)g(them)i(around)d
(the)i(hospital.)36 b(Most)26 b(imp)r(ortan)n(tly)-7
b(,)27 b(it)g(will)g(b)r(e)g(easy)e(to)i(learn,)f(easy)f(to)150
1823 y(use,)j(and)f(impro)n(v)n(e)f(o)n(v)n(erall)g(e\016ciency)h(of)h
(the)g(hospital.)p 0 TeXcolorgray 1929 5349 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 150 83 a Fa(1)135 b(Problem)45 b(Description)150
325 y Fb(Ha)n(ving)38 b(an)h(e\016cien)n(t)h(and)f(easy-to-use)e(soft)n
(w)n(are)h(system)h(for)g(managing)f(op)r(erations)g(is)h(in)n(tegral)f
(for)h(an)n(y)150 424 y(compan)n(y)-7 b(,)23 b(and)h(the)g(Oregon)d
(State)j(Univ)n(ersit)n(y)f(\(OSU\))h(V)-7 b(eterinary)22
b(Hospital,)j(a)e(primary)f(v)n(eterinary)g(referral)150
524 y(hospital)40 b(in)g(Oregon,)i(is)f(no)f(exception.)75
b(The)40 b(hospital)g(partners)f(with)i(v)n(eterinarians)d(to)i(pro)n
(vide)g(high-)150 624 y(qualit)n(y)30 b(care)f(to)i(b)r(oth)f(small)h
(animals,)f(suc)n(h)g(as)g(dogs)f(and)i(cats,)f(as)g(w)n(ell)g(as)g
(large)f(animals,)i(suc)n(h)f(as)f(horses)150 723 y(and)g(liv)n(esto)r
(c)n(k.)39 b(The)28 b(hospital)h(has)f(man)n(y)g(primary)f(goals,)h
(including)h(pro)n(viding)e(service)h(to)g(animal)g(o)n(wners,)150
823 y(serving)23 b(as)g(a)h(referral)e(cen)n(ter)i(for)f(v)n(eterinary)
f(practitioners,)i(and)g(teac)n(hing)f(v)n(eterinary)f(studen)n(ts.)36
b(Organized)150 923 y(in)n(to)23 b(sev)n(eral)f(service)h(areas,)g(the)
h(hospital)f(meets)g(the)h(needs)g(of)g(man)n(y)f(animals,)g
(o\013ering)g(cardiology)e(services,)150 1022 y(in)n(ternal)27
b(medicine)h(services,)e(oncology)g(services,)g(rehabilitation)h
(services,)f(and)i(surgery)e(services.)150 1182 y(Curren)n(tly)-7
b(,)35 b(the)g(hospital)f(uses)g(an)g(old)h(system)f(that)g(it)h(has)f
(outgro)n(wn,)h(and)f(it)h(needs)f(a)g(customized)g(soft-)150
1282 y(w)n(are)f(system)i(to)f(help)h(manage)e(ev)n(eryda)n(y)g
(hospital)h(op)r(erations,)h(including)f(trac)n(king)f(patien)n(ts,)j
(managing)150 1381 y(app)r(oin)n(tmen)n(ts,)30 b(and)f(comm)n
(unicating)g(with)h(v)n(eterinarians)d(within)j(the)g(hospital,)f
(among)g(other)f(tasks.)42 b(The)150 1481 y(curren)n(t)28
b(system)h(do)r(es)g(not)f(pro)n(vide)g(e\016cien)n(t)h(comm)n
(unication,)g(and)g(it)g(is)g(prone)f(to)h(errors.)39
b(F)-7 b(or)28 b(instance,)i(if)150 1580 y(an)e(o)n(wner)f(calls)g(the)
h(hospital)g(with)g(a)g(medical)g(question,)g(the)g(pro)r(cess)f(is)h
(v)n(ery)f(slo)n(w)g(and)g(man)n(ual,)h(with)g(lots)150
1680 y(of)k(mo)n(v)n(emen)n(t)g(around)f(a)h(large)f(hospital.)50
b(The)33 b(receptionist)f(w)n(ould)f(log)h(the)h(message)e(in)n(to)h
(the)g(computer,)150 1780 y(prin)n(t)c(it)h(out,)g(and)f(ph)n(ysically)
f(w)n(alk)h(the)g(pap)r(er)g(across)f(the)h(hospital)g(to)h(put)g(in)f
(a)g(spinning)g(queue.)40 b(When)28 b(a)150 1879 y(do)r(ctor)c(or)g
(other)g(sta\013)g(mem)n(b)r(er)h(lo)r(oks)f(at)g(it,)i(they)f(will)f
(write)h(an)f(answ)n(er)f(or)h(necessary)f(action)h(on)g(the)h(pap)r
(er,)150 1979 y(ph)n(ysically)k(carry)f(the)i(pap)r(er)g(to)f(the)i
(next)f(lo)r(cation.)43 b(Ev)n(en)n(tually)-7 b(,)29
b(after)h(it)g(reac)n(hes)e(all)i(the)g(necessary)e(sta\013,)150
2079 y(it)h(is)f(returned)f(to)i(the)f(receptionist,)g(who)g(is)g(then)
h(able)e(to)i(call)e(the)i(o)n(wner)e(bac)n(k)g(to)h(pro)n(vide)f(them)
i(with)g(the)150 2178 y(information)c(they)g(requested,)g(whether)g
(that)h(is)f(an)g(answ)n(er)e(to)i(a)g(question)g(or)f(to)h(sc)n
(hedule)g(an)g(app)r(oin)n(tmen)n(t.)150 2278 y(There)i(are)g(n)n
(umerous)g(places)g(in)h(this)g(curren)n(t)f(system)g(where)g(things)h
(can)f(go)g(wrong.)36 b(P)n(ap)r(ers)26 b(can)i(easily)f(b)r(e)150
2377 y(lost)k(or)e(deliv)n(ered)h(to)h(the)g(wrong)f(lo)r(cation.)46
b(There)30 b(is)h(no)f(w)n(a)n(y)g(to)h(trac)n(k)e(where)i(a)f(message)
f(is)i(at)g(an)n(y)f(giv)n(en)150 2477 y(time,)i(or)d(to)h(determine)h
(the)g(route)e(that)i(it)g(to)r(ok)f(to)g(get)g(bac)n(k)g(to)g(the)h
(receptionist.)44 b(Handwriting)30 b(can)g(also)150 2577
y(b)r(e)e(misread.)37 b(The)28 b(hospital)f(has)h(a)f(goal)g(to)g(answ)
n(er)g(all)g(medical)h(questions)f(within)i(24)e(hours,)g(and)g(with)i
(this)150 2676 y(system,)d(that)g(can)f(b)r(e)h(hard)g(to)f(do.)36
b(Additionally)-7 b(,)26 b(the)h(curren)n(t)d(system)i(is)g(o)n(wner)e
(cen)n(tered,)i(and)f(this)h(can)g(b)r(e)150 2776 y(a)h(n)n(uisance)g
(when)h(o)n(wners)e(ha)n(v)n(e)g(m)n(ultiple)j(p)r(ets.)150
2936 y(A)f(new)h(comm)n(unication)e(system)h(for)g(the)g(OSU)g(V)-7
b(eterinary)28 b(Hospital)f(is)h(imp)r(erativ)n(e)g(for)g(the)g(future)
h(to)f(help)150 3035 y(ease)g(patien)n(t)g(and)h(o)n(wner)e
(su\013ering)h(and)g(increase)f(e\016ciency)i(of)f(the)h(hospital)f(b)n
(y)g(mirroring)f(ideal)h(w)n(ork\015o)n(w)150 3135 y(and)f(impro)n
(ving)g(the)h(p)r(erformance)e(of)i(the)g(hospital)f(and)g(helping)h
(it)g(meet)g(its)g(goals.)150 3469 y Fa(2)135 b(Prop)t(osed)44
b(Solution)150 3711 y Fb(T)-7 b(o)39 b(help)g(the)g(hospital)g(meet)g
(its)h(goals)d(and)i(impro)n(v)n(e)f(the)h(w)n(a)n(y)f(sta\013)h(comm)n
(unicates)f(in)i(the)f(hospital,)i(a)150 3811 y(new)29
b(comm)n(unication)g(system)g(is)g(essen)n(tial.)41 b(Our)28
b(team)h(will)h(design)f(and)g(dev)n(elop)f(a)h(more)f(curren)n(t)h
(hospital)150 3910 y(comm)n(unication)21 b(system)h(that)g(will)g
(streamline)g(sc)n(heduling)f(app)r(oin)n(tmen)n(ts)h(and)g(in)n
(ternal)f(hospital)h(comm)n(uni-)150 4010 y(cations.)36
b(By)26 b(mirroring)f(the)i(ideal)f(w)n(ork\015o)n(w)e(and)j(the)g(w)n
(a)n(y)e(messages)g(are)g(mo)n(v)n(ed)h(throughout)g(the)h(hospital,)
150 4110 y(w)n(e)f(will)g(create)f(a)h(comm)n(unication)f(system)h
(where)f(sta\013)h(will)g(b)r(e)h(able)e(to)h(c)n(ho)r(ose)f(where)g(a)
h(message)f(is)h(routed)150 4209 y(and)e(assign)g(a)g(category)-7
b(,)23 b(suc)n(h)h(as)g(billing)g(or)g(medical,)h(and)f(it)h(will)g(b)r
(e)f(put)h(in)g(a)f(queue)h(for)f(the)g(necessary)f(sta\013)150
4309 y(to)32 b(lo)r(ok)g(at)g(when)g(they)h(ha)n(v)n(e)e(a)h(c)n
(hance.)50 b(Then,)34 b(notes)d(can)h(b)r(e)h(added,)g(and)g(it)f(can)g
(b)r(e)h(rerouted)e(to)h(a)g(new)150 4409 y(lo)r(cation.)k(A)n(t)28
b(the)f(end,)h(when)f(the)h(message)d(gets)i(bac)n(k)f(to)h(reception)g
(or)f(its)i(\014nal)f(lo)r(cation,)f(the)i(whole)f(c)n(hain)150
4508 y(of)i(where)g(the)h(message)d(has)i(b)r(een)h(will)f(b)r(e)h
(visible.)41 b(This)30 b(will)f(help)h(eliminate)f(some)g(of)g(the)h
(pap)r(er)e(w)n(aste)h(as)150 4608 y(w)n(ell)j(as)f(reduce)g(the)h
(amoun)n(t)g(of)f(errors)f(in)i(the)g(system)g(and)g(time)g(sp)r(end)g
(running)g(the)g(pap)r(ers)f(around)g(the)150 4707 y(hospital.)150
4867 y(In)38 b(addition)g(to)f(the)i(impro)n(v)n(ed)d(comm)n
(unication,)k(w)n(e)d(will)h(pro)n(vide)f(rep)r(orts)g(for)g(the)h
(hospital)f(to)h(analyze)150 4967 y(di\013eren)n(t)31
b(asp)r(ects)f(of)h(the)g(comm)n(unication)f(pro)r(cess,)g(suc)n(h)g
(as)g(resp)r(onse)g(time)h(for)f(phone)h(calls,)g(so)f(they)g(can)150
5066 y(trac)n(k)h(ho)n(w)i(w)n(ell)f(they)h(are)f(meeting)g(their)h
(goal)e(of)i(24-hour)e(resp)r(onse)g(time)j(to)e(calls.)52
b(Another)32 b(feature)g(w)n(e)p 0 TeXcolorgray 1929
5349 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 150 83 a Fb(plan)35 b(to)f(implemen)n(t)i(is)e(to)h(allo)n
(w)f(easy)g(access)f(to)i(patien)n(t)g(information)f(from)g(a)h(patien)
n(t)f(dash)n(b)r(oard,)h(suc)n(h)150 183 y(as)f(whic)n(h)i(v)-5
b(accines)34 b(an)h(animal)g(has)f(previously)g(b)r(een)i(giv)n(en,)g
(the)g(dates)e(of)h(previous)f(app)r(oin)n(tmen)n(ts,)j(and)150
282 y(dates)32 b(of)g(app)r(oin)n(tmen)n(ts)g(sc)n(heduled)g(for)g(the)
h(future.)51 b(This)32 b(will)h(eliminate)f(the)h(need)f(to)h(scroll)e
(through)g(all)150 382 y(the)e(messages)d(and)i(information)g(ab)r(out)
g(a)g(p)r(et)h(to)f(\014nd)g(sp)r(eci\014c)h(information)e(ab)r(out)h
(the)h(p)r(et)g(receiving)e(that)150 482 y(certain)33
b(v)-5 b(accine)34 b(or)f(when)g(they)h(last)g(had)g(an)f(app)r(oin)n
(tmen)n(t.)56 b(Lastly)-7 b(,)34 b(the)h(new)e(system)h(w)n(ould)f
(allo)n(w)g(sta\013)150 581 y(to)27 b(ha)n(v)n(e)f(pro\014les,)h(where)
f(they)i(could)f(select)g(whic)n(h)g(categories)e(or)h(departmen)n(ts)h
(they)h(w)n(ould)e(lik)n(e)h(to)g(receiv)n(e)150 681
y(information)c(ab)r(out.)36 b(This)24 b(w)n(ould)f(allo)n(w)g(emplo)n
(y)n(ees)g(to)h(quic)n(kly)f(c)n(hange)g(whic)n(h)h(departmen)n(t)g
(they)g(are)f(a)h(part)150 780 y(of)k(on)f(an)n(y)g(giv)n(en)f(da)n(y)h
(if)h(the)g(frequen)n(tly)g(w)n(ork)n(ed)e(in)h(m)n(ultiple)i
(departmen)n(ts.)150 940 y(The)h(new)h(system)f(will)g(implemen)n(t)h
(man)n(y)f(new)g(and)g(useful)h(features,)f(but)h(it)f(is)h(not)f(a)g
(replacemen)n(t)f(for)h(the)150 1040 y(curren)n(t)i(system.)54
b(It)34 b(will)f(need)g(to)h(b)r(e)f(able)g(to)g(merge)g(with)g(the)h
(curren)n(t)e(system,)j(as)e(the)g(new)g(one)g(is)g(just)150
1139 y(an)f(impro)n(v)n(emen)n(t)f(on)h(hospital)f(comm)n(unications)h
(and)g(do)r(es)g(not)g(pro)n(vide)f(an)n(y)g(billing)h(or)g(other)f
(imp)r(ortan)n(t)150 1239 y(features)22 b(that)i(the)f(curren)n(t)f
(one)g(do)r(es.)35 b(Ov)n(erall,)23 b(an)f(impro)n(v)n(ed)g(comm)n
(unication)g(system)h(is)f(crucial)g(to)h(pro)n(vide)150
1339 y(a)k(b)r(etter)h(exp)r(erience)f(for)g(the)h(hospital,)g(patien)n
(ts,)f(and)g(o)n(wners)g(alik)n(e.)150 1673 y Fa(3)135
b(P)l(erformance)46 b(Metrics)150 1915 y Fb(There)31
b(are)f(sev)n(eral)g(metrics)h(that)g(will)h(help)g(ev)-5
b(aluate)30 b(the)i(success)f(of)g(the)h(pro)5 b(ject)30
b(based)h(on)g(the)h(hospitals)150 2015 y(requested)37
b(features)g(for)f(the)i(impro)n(v)n(ed)e(comm)n(unication)h(system.)66
b(The)37 b(most)g(imp)r(ortan)n(t)g(metric)h(is)f(that)150
2114 y(messages)25 b(m)n(ust)h(b)r(e)h(able)g(to)f(b)r(e)h(trac)n(k)n
(ed)e(and)h(there)h(m)n(ust)f(b)r(e)h(a)f(w)n(a)n(y)g(to)g(view)g(the)h
(en)n(tire)f(c)n(hain)g(of)h(where)f(the)150 2214 y(message)k(has)h(b)r
(een)i(routed)e(to)g(along)g(with)h(all)g(the)g(notes)f(added)h(to)f
(the)h(message.)48 b(Eac)n(h)30 b(message)h(will)h(b)r(e)150
2313 y(assigned)21 b(a)h(category)e(when)j(recorded)e(b)n(y)h
(reception)g(as)f(w)n(ell.)35 b(The)23 b(new)f(system)g(also)f(will)i
(allo)n(w)e(for)h(searc)n(hing)150 2413 y(b)n(y)j(a)h(p)r(et)g(to)f
(bring)h(up)f(a)h(history)e(of)i(all)f(the)h(messages)e(relating)h(to)h
(that)g(p)r(et.)37 b(P)n(ast)24 b(app)r(oin)n(tmen)n(ts)h(as)g(w)n(ell)
h(as)150 2513 y(future)k(app)r(oin)n(tmen)n(ts)g(m)n(ust)g(also)e(b)r
(e)i(visible)g(from)f(this)h(system.)44 b(Finally)-7
b(,)30 b(there)f(will)h(also)f(b)r(e)h(sta\013)g(pro\014les)150
2612 y(that)23 b(will)g(allo)n(w)f(them)h(to)g(c)n(ho)r(ose)e(whic)n(h)
i(departmen)n(ts)f(or)g(category)f(of)i(messages)e(they)i(w)n(ould)f
(lik)n(e)h(to)f(receiv)n(e.)p 0 TeXcolorgray 1929 5349
a(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
