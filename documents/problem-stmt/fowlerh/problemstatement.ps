%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: problemstatement.dvi
%%CreationDate: Fri Oct 13 14:09:51 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMR12 CMBX9 CMR9 CMR10 CMBX12
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter problemstatement.dvi -o
%+ problemstatement.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.13:1409
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 68 /D put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB701C6AB68B224A626C5F44653170C361E2F7E35FC251A050787AE9B
B7C1F3A1419789198196FEB13A68A0D880036E1B28C58041E9EC42A55A21F252
5A8C37EB253C8F89D1C52B2DA91B155939DAD237D049D6E65C4B14E4FFF913EC
2D5768B1000DADAA71263564836C345D6EBEE9014F07134A5FE2C66CAA4412BB
82BACD341BC264DBA795030F4191BEF2718961B82BA47A4145316F4FA463F6C5
BEB756063C4C90E109A098CC74590B55163F957AD376E04E481B139DFB65AA2A
FB5669696BC08746B54FC2D9B10D8EBB97C36FCDA5DFCEB1686DB42A71CC49B7
C6E75A2B1A1EB76FDE0DAE8DA280288DBD141BD2701A1146900B90BB242C4327
5879FE4DFBA8AD925E7C7FD3117066C7986645FC4D13D50274B204F20766CDCC
0881C8263BCA76D98359C6B9D4048AC32A024D6FFB1539E04C18DA5864E747BB
8B13A2D2CAEC45E0472905DE4F1E756A61F3E3FF484CF4BE0EF103567F98FBA5
0B2DD283818C88D3386D43084539C72148F20381AD244F68FEE228F655C12AA7
EADE22196441AB3FC95F0FDD873425CFAED85AB67439A01CC37962CEF90D688C
CDC116B84D7334A4FEF9A160EC56FEE432A8FC19A22EFD7338C35EFE777DEFBE
39A268BAF43D81DD85D8A0C84B561F6867D7AF327BFC25156AFED10C50FFC3DA
83D27B23F93AEB0440038BB017C0C519A8D51A91454005784CA20E9146DC92F4
3791E597176B062D360BB9F564D0EAE0E637459DB4696667C2C788BBBC8D37EF
D7DDCBB582B0CD6AA6E81E4FFF498F4FBA7C295B6DB9DEC3E8B852EE8FA2D9DE
8AF06FB920A446A9DBF605841D01E6D7C8083C5E96CF0A956CDEA3ED7E437EC1
8B9985E426FC9935C2CD5398CACFA1C344AD837A20E794DFA453F0A4A19DD452
CC202308C6C18233578A153F2475B5F39786DA0A8084D81A258E5E722C7E6E34
061F38E717A9A8521C55E9DB2E79790A48F683FFCF83A3EE6F23673009C29404
C2DE5D3D3FC15C25D272682D51C2384E3A60143C1AB75FE259952DDDABA2D53B
6167D5496ABF528FD38091F72D1C1FDDD88D88A7669A687CB83F274921263349
1D9895717B35E63867082AB9EBE6BBF2006D8060010F883DD5CF3B90AA54518C
6D47789C09E5DB027F208B68A0AF8AE7317943B2ADDCC09A54DF9F57FD5F954E
CC1A66F328BB270800868D29BA1AA53084A018FE5516FD1926E7F188BD11C28D
4866C921509D01D96DDEE7898942554EC31F2A7DD60E99BF84A0ED833C9B40DD
54758F6F36A84F7AEDF17E2E104143923BF683CB3B3248CCCD31D8EA117D1EEA
6878CBA94BFC9581AEE14162951E9EBB41B37ECBE00CCE70D0C0F5EDA63BE6D0
A99734929402EBCEDE1BC07AA0E90943C3993403C48606FFB42B4C66BC18376A
3C01402811ABC53ACBBFE17553286358230C6C741B49E21358F90188BAB26010
B8AEAAC1E194614E4FB974C557E18055D5E9BB4A3742A745742FC6479DE379DB
E27752E69E4370442D6C6A8593FCE0CE6C1D0C13D2E0BB13662A8142C140AA2D
B7AB44FB63FE48510033D39F38E746210FB374F2029E3130B33CD2D9F59ACD3C
AD634F4CE7697977F7B9EC0C0398F9ADD8658FC76C95F5D65DB0362D69FB4611
9D919A654DAF4DF86BF98F9BF4C51C047EAFACA1D5D04E32C8719F572348C9F9
2FEBF4CDD4DC12839993E805BC2F321ED1BC61FF4B82E9349FFAD455D3B3BDD5
FAEF4267074BE74D6F6E1CB44F09B8C9E0FB016D85A81E4A94BCCB4F52F257D0
4D97526B3343F4A163D97E84377071264E521D5C54C1F1BE4A9F5E7FFBF98F63
987D31EB7FD511B8FDBF0476E32377D178E4D5BA88759787F003C3519FCB90D2
89FB0E88D6B72DD46F2E7F2C2245777126AC4BDC5E393C3E45BAC44BF9F08687
6DEAA7B7E527B967E862669FF48A9B2A20C9854D5CE345D8DA10FB8D26C9C7DF
6065FC19A9558892496B240B25FE3B3355E96F31EAEE01086EE7C08F99E4A67B
BEF26EB1B7715A93CAC35B45393C170186297873833682090184E6FF955288AA
AF405C91C4895C5332F37C0F36B3985FF035F75D70D66ABB000202D049B57685
324AD5ED0D0F678CA4A3C1ECC7B75A0D18D167E606226A27D5E392D906178CAE
53C3A3B85BAFBACF4850BC17B14BFE35D17569D73868BEEEF618718F77DD14B7
3DCCE76A8235C98F0A29AF3132374A0B14B4D8BC6CD76D0D592C4098B97C8407
4DF416132AC4DCE9B94A2FF971D87BB986DFFCA11D3A7402AB1F8A750AD59D74
F8B5BD5F5DCF0AF49DCD4D8EC712EECA54E98EE6520EDE75A14F993C169B0B2D
EA51EB095D50635AD48064040F5D2E086C55C927E8C1FFF41F1A97C4959E0522
A49005875E39B5A73D0BBEC197313CB466F8FD563AC1EF818BD5BC089675BBB5
C32BCEA034F240E1987A37C4A0A3D2A5DBDC57BEC929B62A47A0D59491F68DF6
8B906BF41C8214FF42E0DAADF15A0AE68DAE79F69098F4ED054284BE586ED5F0
EAA3214C2FFF63892CE0E7AD833D34E75D10C2F41CA0E7BB8F009861408A379D
38CA7961842EAD86C5B6BD05DEB583B448FADB1D2EFD523EC22E9A8C285B5620
F12CC48559F8A7A8DD2AEC3D67306F17C918F29EC4F5EE9537FB3838544FFD7A
592B33C8AC063958E0DF17814E4DED41DCE01E3604E485AAF29DC9086A722685
E6539EABD1DDFEE46D7000A9440AF58195D1DB3074CBEB01F75173CE5C7117F6
AE317D74AC400867755D07B020887EC4A982D59AF8B628D2130FB315888805C6
D056A585974001706A1AE3CD905264E9EB1D1CEA79A072A952CD07E686DD952F
6F825886B33A3805A61A8A329CEAA1F1310D05F1D555563331862BA6F7C4FF5B
68B9A35E0425E7183E3D033D7A7C7C9EE49F0469048A7B5A5358ED373F5CC4B2
CCA024A5A8EA28A8438148AB05B127D9B1EAFCE722EAC3B38B24BB920A998C30
EF0086B9D30198A85784138801C4B8E2DA3E830D2F3D511F7F217C302C37AF8D
50B1E5FB96276E20465E918E29E12454CF3FC99018F0FF719F2351581F1B0F12
5261DA0D9343CD6F098BF3DF98C2071E6709B9082E75CAA17FEDCDADC0021B73
EA5743E1BFF70513E1E1E77BCCFEA97FC880D9FA0AC790A8FC7D43A19D575F3B
150059DC530F52F104A531A69D22FB59FA859ED248FED28A2F4E9634C2F5CA27
DB0CA398FA3CCEF23729D967174D9027CD0345D5B995CCBBFB9E92B98F959333
69E2417F2609A9DF71786DF8CCC1978762AB2241428335560BEED57F7DC7B878
7A4AC55D366AB8E8D216E040A35AD6C89C244D5D90E9D6B1BB5474F6090E3080
9B6B48456996316639E0C3ABABBE37E035220F5ADD1D70989A7D09C6FB09ED9F
6F52C56ED0CDDEB7E0A5D8C1467C38F6BFDED190A98431A22E51B26D990AFB49
DD88499D33029A82F0B1232741A070F9A556A079E5984EE16FBEDCA1F970A84A
9253002F5CF1155792FE68F64D78B716413E8335C730827C7D2E9B64ED409C00
AEE8B5AEFE806AE9C46729F5550EDD1A66C898EA744B4C304B69B06BBC928650
5892D4498ACAEC31100A087F9DB40245987FA21165FB2DC9BEFAE0ECB7200F3F
B7ED368DBF43DC47F5C74CA401296752E930BBE1A2CC975A611D6E4E98D09D09
C31C8BE4FAA82F92EF06161DC53F0BEA01DF209C25A580ED1A37945202601860
80D94AD2F732858190CBEA2A75EBD6D592681A382C45EAE0A3909B2E47D49E4A
ACADE5F8509471F7CAECD351E86E8579F0BE93EC21FF420779DE806CA017BDD1
32D7FB35362659C6BE1C1DB9852E09F6952DCEB5D3AA334E60A9DD31B969D39F
301F5D5740096326E374F7665E5242C74085DBAA32B79761392357332FCBC04E
B2AAF1CF9DB6E56E97C2F43FF78A6E68CBBFD0A6CD05F8D1339C40213E412577
966A70AB3202E2C1368C2889368F3DC940B73A251966B3BFF3B479CA187E35FE
79F033C510AEB687F6362357CAEB0B69442312C4238626259FF05D04D133E1BB
EE2BAB73F3A886BE4227973AAED58B9B5BF8F8A4A25DBE4D51B84992E96CCF42
C5CCF841FA496686BA9E3E8FEA3CFB20D792FC6BA87A781F2A529E49E349DA15
A983308471628E80C727DC536FC86D3FF4C3A8433F274C8A1CDEF9F643102F4D
1A5EBEB8A5AC77DC9A971FC9FC1C8B5688A0E2EC61452FCE60558BC9E6A21D41
C0EB96C7A5D9C1CA73F92CA051BAE5CE0D701AE88F48BFA87BA379A05D52430E
50262DB974782034974E27D9D89CBC259D35F68EB57ABBCFA1B1F45E1E0AFAFF
6C7846EA57D4DFA2B428C39C788B8054088615450E98FE29487D80DF6898191F
407AD77724B3CA6B30C20DFCD4D642DCBFDD3E8DEE9CD9FB4BB4CD2FDF3D9FC5
2D765E03336B0637D96DF2D5037B3EEE910A6B8FED21B73ABB8957E3C4575B54
E087DFFCA02704F3C245298509231D49F749260254705CB2F08ED11D7389D014
47E4CD9856A2C4FB9FD33E736A42EFA7EC5DD389FFB80AD9B0C4C167594B1216
C27CDCDB4D16E834789CE3184A62048E99D899B4AABC7798CD491BCFEA80CE19
8F99D80598EA4D03713D95657CCC115A70DD42A00C0291CD5E5595902F4279C3
A25153B1CEC550ED9C55EF6ACB22304021CE3E67B1727CA449EA9BEEFD98724A
A30130CEB7BC7FD679D95F56C2C7B6FA95797E8DC4A51A26F7B3CB6BBE9F1C27
72BFFD66C71DB0101C8161D0412A0D268EF4843C39EDD64DE37925FC479EC196
3D0032FD11B239CD8D5D72743E063E735E79F522FFE5E714BA4F23BC3600BD33
E85C082F9C2F36A652E5633A8B77939380F17A261CFD250D5FE6ECE498AC36F6
0EAB41198914D36CA5CDD82C7659E1EA9EA753CB54511D31FE40C68579C7CEB6
73CA718A75AFB0699EB0B0A068DCC7FA16B1BB9BD978AF285392D087FF037BBF
1AAE3B2A7CAA41D9AB8FF78DB06E58F35772FE0CEB3FCC73BE00DB4A956AE42B
26C1D3E75B4CA2BC387D8EE5F8D8E8C67EC198EA797AB47F2E1799CC7AD88166
60C8640F0B8211AC9EF350A9429CB6A4F83C79F6696C78013E518CCBC102A75A
FC959B7B7414159040676ED930976F047DFC6101FFD45FDAA373B8BC6A669ED2
ED62DADAD4E82BEAE5C8988883D09DAD25D6938FB62D755F913898CD7C83F993
1A7999BC9518BE7A6193267B01DD4EF036EF1B472FDA97E38455AF607E7DE719
9129E0158634FCE1B365889BDCB3868A072774A5E6C2B31B28337856567B4200
8E20CCE3820DFA3F460B1C6150330396B64121C682C6B67FD074D272A0D574FF
BD006202EB00CCF3ACD19DC52DE1391F40261EB01CA6C15D9B417E66B854F833
5F5A404994E751586496E1190BC57AD29EF96939263E425B034392B532803711
8C1BDAADEF7477058271AE88A8D245F464850FA44ABB6399BC6114583A1A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 44 /comma put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 65 /A put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E2995196097015E0C4F622C4356B6B
F41DBAFD797A4B9D7AC22332C552043EF98913D0D9B50CA6B7CDAF903BC5C04F
D20A952BA5CC35B646ACD0A287C956B98C450051AF6AAF79DF37F8954473F8F6
652BF03AE2AE82B99D820CF93F5FC0BA17EBD7AF90313E70594EB5C354023BFA
07912408F1757319C7288E99872B907D5AB583B082EEED8AB079C63E38B07D11
6744856E689A479CB3A8BC081F33CB06755926204981DC0A45B3ACC18F6865BB
EE2C50DB43B62E3630FC1D9B1FFB3BFFAA6D0A20C0381ADF48E4D916BEE85BA2
BB40F538F55C11D50F882B73913840B45161262BC8B0012694C3EF26452F9B77
2CD7C7AD6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F1E10DDB693AFE84
246AB18279A2B24E5B50A2FF6337B7B10568EB0BD821F8B99500A30D1F959A11
7F176FD5B8CA4A70F9961A02B350A76F697E285BFA294491AC22E3BC4257933F
986FA58C106E98B256E2293298D5B7A1FADD93BD3CC207D8623EB59F6B3FDF30
24051AFCC00619CA95CD8F97EA85176570BCB441E9B74F7C1D6915938B3324E6
7788D11F468E8ADE12971FD6A5438D8DEDA14983FD315A540DA3F064922470D6
3F7871BC2B5CAB0B6342F1B42302947A3B490FFDD8EEE55FD2D57E52F756384A
83E2267C6484A6D4220E4B8D430846E137E6CA0BD4A5949A5DB38EEE74CF531A
5242EFB376496DB8E8EC7CEA9151BB3FF9C0746080099E8276173D4446330D2B
139A67B17DACEAC7A3B26336A1F5759B14E840F0C5FE027316068F4BB7DA76A9
736E80A8818F63AD429AF6971AB89FA8835379ACF115CFA8FEC7A20B5DB51023
3DE403D68D225B5BA91C814B18ABD2C55BD81130F5D1E2FB148F3A728A2C3E6C
D33E727B2933F1E2E240900C2AC7BDEF8FB9D4574698BC8D4E374956FC37A0CF
7D9AE0D0933CC49558A514BA3CB40E82D565CAD27B9EB2020C908E91E81B07A9
2AD544D2046696094E1E0FC28F18CFBF2656D0A5F8453F45B799BFE55CBA5E62
F16CA4AAD970585C6E338F5F95A83CA11AE479CD96B4F9C3CF1D39123EF1C1EC
A9B83CE4454C165785DC7B085956E2B31CBF164EF31284DC4AE61779BE5DCE90
183592A2C6E2FFB3AFF49BBE499B17CD87A1A38A0CCAB4AFFB3159A66A113E06
6238B6CF498C4B87E6795001F0A64B37B8EDAD4DDF40C38029D811ADF35B869B
B210E44A57178893AF229268DBAFCAA577FDD4A0C3CB556245C965074A8DD4E3
51567B3BD70F801D02ED63B52CA0B86222F2B90F91C1526F7B69537505EEF3F9
C30855C6332DDD58A2809F9A0AE32F3181F98039645643E15D25917F38DFFD8B
D5F15424EC1C28487B7D93628E039E14526B19E4EC106AEF3046476E8D55E54E
29F36681AC18245D025AB9FD551B450FC9D4F3131E5B9BF09E2EB27D88CE83FC
0BE5C1BD63FB69472D782C659F7862671FEDEEAED24289C4EE9C0C48A7298527
6AE70079BAA0ABCC95DAAD209422879682A8D0D249CDBAB31345F45FCE24247C
1F773165050913614F8EF8A85BE29E113D06CC85788E2229F94F3B360D1F7D0B
7CE61AEDAAEF98864B8C55E4EA0ED503C7B55E1FE989CF0BB55EC84C02CDC7BC
278E87DAB64850A522D345E90ED27EF879D04CE2D996CBB80F91A530393E0EF9
FDE4ACB3F04D50C2CB1AC6472BE9087A53BA14EF2FE8893B55F950A8E66E36BA
4EB2F17EA4824E8FA73EC91D432A15993A4D37BAEF27F403EBA7B86CBE4534B8
C23B409B7B3709B544C8412F8BF642048C094D4BF20C785A6F46E7AB9632E42F
98BDF5E289B7AD8F297AC7E5ED3272E13779E233142CA097BC0184963FA54A89
2B080627B978D0D24A03FAF677A7C02ED92973F7A5A6E26DA3FAA757D8E5A211
B8FC5F9C999D6EE9C7F2E4DC00372537A6C61764AE9ED4A5E70398523E74298F
347B44BB5570AB163466C17D90B1B26953865D451F5B002FD823659BF38B3FC6
0F78AF501655FE19F18F6F92FBFB3A53B1FB97C9F9FE15888A245527E79C94D0
DD5E16584C75D7B9426F419ABA3ADE0ABD63805BDE760A0630D3FCCCDC3EC552
165D8D04ED952720D5B649EA735F63CC8A90417E0B434CF16B1741E9FF94FFC5
8A64E11CB57FD2002464B9ED9AEF4D67C2051C2DE6E5420E0D145E3C09E9CD1A
6F57F3835B7847A9568B326AC02458B6839664B8ACB442DB8BD47060AB7D8607
B409619EF249C4CA50EF006CABAF03E68177D4DE1241BCB7A26AC1D3470F5618
CE987E4C401FF8DCAAA5BAF86FF89F4B495B96861CD74DEAD0EFBCBEC17E6E42
76080FFA7C50C69A316F8232EAE9355F75676B215E328FB5ECFA0525640B37CB
3163F379C13BE5EE166334B9919AD6EC8DC618735F54B78C794B35A4EF212201
8A089CF3E696FD838804C3EAFA6FF755018F31BC1F79C8CF03FBCF06FE08AEB5
9A6E11809A4A06AE648526654CB58007A87724F585337E7769A30D5C0200118D
C0995A57C7DE9B455DCB92AA42FEA4C3650ABB1356F36BBC79EC75E9B8F909E3
F3D5F72875031461E2DBAFA96610EAE8DA67B3CAFA52E9323191F7B8BC525D84
D5F1ED8495FF650879C64A288022DE4E530064805C7AAB72A0E5D929236579DA
251A9E65E2C1F5975E103658751FEABF7CDF47393F95D46336B456B0FA852538
DB62C5AFBEB9F7C291641E6625E31E91CB71FAFFB3F1BD992EA55CAFDF0CB183
E8C0DA64C5A488EFD0D6F65EF40BE8C526F59DABA970CB14FBD94AE337FD2466
C9F5D8195519D0DEC36FEF286C526C0195120826424B0990CD5D264A457C8B09
E1FA5D246F40FC24952C323D16B7F005B3431D5341C401C560DF5B12A07F8197
9ECA823142A7D503BE40F1BBBB93788722875DF2455426500E410A707EFFAF57
696C79DD1C174C26DD1727F697B3B1917D1EB65F3A88BF9536338CB0ECF40BA2
371C470605D265783554B035FE327AFC4E7A3FAD06AA37D6890E6BDD8F1BFAD5
A65517C9B58FB6BDE906BF13B386FF1FD4C383E278AEB9599A4A69CC2429BA9E
9A3292BCA49EE9223879405DF665D0513402CE4F8CFF44731B6DB80077B9F664
9E3A3F38342CA74A04A955BE268CB7C51A931274C30C6B87CECEC060281C8D16
51E7DB72782C4DD1A1FA3E6FFE9089145D3C62228FBC98382BECA0C1FA3EFF9F
B3433DFA911FE4523E35F76D2407875D0C42BB4CEEA37BCBF4BDE54AF9212C18
7EFB573749F20B21C34F1BED103FEFA843A28854C3A59BFCD7D4D2397B6D294E
A5BA6F5AABF3E7053387A7D5C2ADA2194F7BCF7AAEDDBDAD06D2B49624DAB16D
FC4B03C5FDF97FB541A5984665D3B6481BFCC5768F67300773D6472C15F3FA2D
D63547F55F27548D03E4DA37DA7FABD0066D2E919FAC0F7BEDD9169DC977A25F
41B82CF2DBF7526ADEC86B71C43A8255D0B63CD2781512BAA8CC3B27215BDF42
52480BE8E4E1212206EBAF2360BB5568F08B10FA58AA1737E5C37FC3969BE68D
AEB153CB883F4FA98854D55FC99E42CF675B6F816E62D99AC232504B08A53F24
1EF8B955C0D405406EB5120D33AB4C42076A02CFDEA94476AD780595C97E76E3
1CFCA02C24465068672914597125AD67D929CE8BE7E10F643899C2BDA1BF977C
CBF1FC38C1B709AC463F0606F0E33CDC2A642870D6EDEAA57F1A67B6246167DF
B4F3134F436D3B6DB6ED212E6BEBA9D24FE20EC7BAA299C015E9E16CA0477D69
1FA51A48FF8B461EBAFA10C4FA457A18C5D9AF550679FAAFADA9CA6071E7EDA0
40CDBE1BD0C6CE50A4A80FBDC13796DC98E55418169CD7F89ED64975DC69C402
D8193CA61378549CD943225815E3447B3B03136961149327BCCF2DC42EB77C60
7E5BB0BC02A517D102E5102C8AEC75DFC750FC0216F51159A4507FE5E8E0F43A
D371872053E9930701583046B8B41BC7E2C78D6DE2F6067219784B5B33CDCF24
498E1ADD22BF421C98205483B88E2B41B764A5D4424DDFD2395436BF9C29DFAD
E1EB10808685806BDBC52C09E68E33B5A3213250E4B49D16F7F31113D7BF4D5A
28EBE9A154B66363BAB6B2EEC169310617C44B7CFBD881CCB85B91B03BBB90B5
46A8132BE0FCF7FF5E38A9C89B513B7DD837A6BDFFD36847BCF1099AE95AC0B2
501100596AA9C7698A1E3839BD6C1FFFA65EA596106EC64014D6A9737796B6E2
3DB15EAA2F1CB975041266FD0A3F6DF80C5AD40847F9B18A605525C6D26D5316
C36A204159E3CAE65B6838547B2B16F6E7154C5700C80B44DAC605B823C7A6D0
68F7555FC3C5793EB1C455C9890000635170486770EBDE5DBF3EEF82ED1206FC
BAB561BBE7C1BEC2FEC9805AA68361F73E520EB9EA74023EA1347F525AB81966
EE51A738147D8D6CCE83294EF029ED3A6E771D4DB43470C4102563389BB84F8C
40C9EFF5F3A94E4B316006B7B45BCD7B40325978F8FFB0ABAA848E76051CB86D
81747DF8C5393A31E60ED0432A0EE5831C3CEA0A9C16A0CD17D347DF2E02AE7B
F0A3914BBF80A6F5F3538A83DD5A608F82E959123540CD3545DD3B689EDE52EB
F9010365BB252DEF90E5D6FE27B42E8F75DE44D204B0FCA731A239E503875297
362B557BCB92A89024E31DBEFA3D547FB45CCAA33F97411EF48FEC43BD1DC6CC
8A682F7FCC0BB33A835D52D671E12AEB51C29373B87A60D96C85255E6BCAE513
1FCD3A1F948180145C17F9DC79A9BB480C46B72A8B98B1F3280F90A2FA553CDB
EAC61EA5531268D66DA0D0E08BB8EA0F3F98EFC44228D726D86AC85BB18C74AF
D61619AAB07632D3A3A2D60A002972058A78010AB741B2A19E0726DF0D9FFA1E
B290D6E269627728C72AB1C50B6D478AF801A26251A366287895C8B8823600A8
1569E1B58CF5CA58D6EF7389EF53B9266CE080AE754C26CD85BFA3A89D4E5A58
293886058FC9906792780E0A54D74B78BE2709700DBC74D778ACF3FE35432615
C5957FF3B99F64FDBB010ACBAA27457DB84597192CA6F14D825B49C96FC54C2A
BBBDF91822D86DAF3F01585E138D2E840E8ECC55326A65D9CC18DB7EDA64638C
63DFBC6F64D820414F77D062F6AAE9682CBB9D142A8696820C26D4BE5C6319E3
AE21733A7F2F522B62FE7D9355C070A25498612DC22643AA368B17A980E0CA95
615F68E91762C462C692D31B0FD942FE03A267389088426796196D073EA5926A
5B69E1E761B556697263B319F6425A443860562340AF76FDD58B98DD95F487B4
885CA3E49855315C7CE80F661EAD1EC83E75FDD24D2B3CD9ABD0595EFA354A8B
83C5307991046ED2C101B4847AF00AAC023CDBB3CEE92354EB9330F96EF7AD19
C8BEB1D8E3E02B2A39DA0CB404ED793271131F74A216ECAAB6DAE2757F990A20
A55B0F66527E6B906ED308A8178DEF49F12EC47829E7AEC3EBC96F0E5B64F2F0
4613255D9AE105F6A4113E2F8E94D91133F41D31207F66AAFEF2578483947B0F
BB3FF3735AAE08D95FE77356514D9FCA2B114E44AFC1B683630F5393DA05F2F1
C5D381809254D4E21B56A6C855185AC014BE7B29E614509656A5CEDBA81D4905
75F66E1EC5A8B311B909691E53868824B9DB5A85738419142CF85FE016CC4359
2E5699A9B203E2B649C777E22E9A444E0B41A6A0D97EEAE0035B9811C7A9329F
4CCDD66C5E1AE5ED1F83436251D29EF16366A5E0D313D23E3BC22812A89E2F9B
0B63F5F48B456F49BE20CB9AABDAF5E4267F120F7128EF7F9540D206FAF02127
80FABA915171A74F23E937B1F6A19CA7F86D0F376C3DE7157F352FC529D86846
CF04A6799DE590882313D673385F2C0D3DA8C1603E19587A00CDCFF381456DDE
8A525A6886FAE5FE9A5F3FD2603178B25B1A3575E376219C0954962898E607A8
91E5DFE6C88C738D4A940A0BC57DE1A6851CF2C11A12FAF1B349D7E427E0A7A2
CE76B280AC3B212132C6126258894E773997A2274C06D3A1411657294B3B4F25
D0DC301AA3A537A91CB1587214E17FF1B7DFE5E7C667C959A39542360C63608F
ACE24F2043C8205EC6801EB9D1ED017E4A14C90AC1EE88A18314636516C6190C
9681001831C95416016E4079559BD5C26AE95B2197E5C4BE07F630C4CBF7C673
FF1315AEF8830A39E5C0DA6704D4E1D3A25193F5FF528D86AA69890FBE0CBA70
D938250FEAF9293AB5A4EF229521F23B5A2053F1CF26FBF0F98F22AB4E6FA8AA
0E3BA4FE021392B235830B4A1D11F507EF5884C8B7552ED7759C899B743124A3
18D369E3FB610015715D55909655CA0186E56EB7F96E4F4A6B98F74F2D5A391B
58529C5F2B4E6B04968E84E2BA9ADE8126B7ACDB4128ACBF1153C7CB429E7C14
28508B9D31F01A8198ADEC91D5CEC0C99A1104AE2AC051F4C6E541CABAC2978D
D1A3D8ADBD361931BC4E225406D4A47FB54B32A46FD18E4703365FCD2FF5698E
386CD173C8ED797840DB67A8CF6D5078F1115E50F966E9AF68803BAF43FAFAA8
94E338C35A7AD9AC5F002BF51E38ECF3E13A8783D108195DB6B3093B9C609DFA
10BC308FB9ED8096D26671E1BC74536FD00B140A9D3AB1E6A395F49B5098795C
D426EE6B10F138045FA46BA0C9737B84761BA6E3F2FEAFDB26B3C887D1A205F6
363C18EE98AE26C62795EB6EBE9C683900DFFD7ECA0E3EC71EC6F18446FCC374
CF1B43DA556904B77C7E3A1D64670E0FC6011E9CB596C0216280187059B0BBAE
60D189E38C5F5C9BC4B15C8009224F453CE5884ACBF729D0A3E20B495750AEBA
CF9D0C0B521BE4165CF77AFFBAA3BFA9C996671F7EBD6F314254933BBFA1AD2D
03B1F1C6215D811CC53233052246C176B890C675C9C2FDE685CC005611997F0C
A898948929C4E490A5D59BCB5A026BF358C01AFF4BD5E6BB9F458A7B5F6289A5
2D773A011C4CA4679BF0013BEA8E73549BAE43FF1AD021596B37AB155DD02CDB
D42593CF9649E2DD6A4654EB692CD3562731426332AE27CB66C4EAF992532889
C5905B39412FDC99DD5FA8CBC1E11614E1FAE719D768C0DD68C70B64367B0CD9
5E0FD25AFFD819AFE8932B797F6D8126F4FD6CCD1A3A026A8EDD15B7138D81B4
1333112E2702C80B4BF47F7420E599B9828D09964E540982FB4FA063EF356651
469A8A55D93105D141079DE04B40930DF3F0F166550BE9CAC805ADAD58A8C91B
AC0DD6931BD0491A7F5B213D9A230B4BAFC75A644992F3FBA938277425FC3883
81D5F21DF554B06A8AABF481933350435FFCF92A777961CD891738858D7BD0E7
AEF3A40768518596FD15B37218BCDDB1A5997AB865DF673295C2C32E8CBE0589
D52FC4BF25F9CEEC0D7A8E54F18EA6EDA9F55EFB309BC474DF1D1D3C4DF29A3E
6FD0BD776011D3BBC2A929B519CE6B203D62D8C97CFCFB39BC65D1F034E69C25
28CA41D68262D6C4F0348408952C45B0BFD5F0D344D67E04754F43E5B6D727E9
3D722ADD2C34CA4BCDEB3997DE26988B6A8A821B06B77958650B4D0FAA00185A
159D5509BFC7466629638474534A8014CB255642B34CA8B9DEDA2EBFD5B115A0
2CEA0F2868C7EABC58C608786FC1D8EE91A2AF80126E813C30A70D08369E4764
FE0B6273A2F0237F9C2830E2EB81262AB63A7315D03C902B17378B93B3D453D8
999090AA85A9DC74E0A54419FE35A3C317F18D215E97774DE5A1744A25AA2D5F
4E62DCA77DB09B31C51FE43B3381DE74D0F6A2AF779C4C9290152AF5C90FF60F
AD75605159B88848263CCE8692FCF4836272398E3E49E58C7FAE2C719F96013D
808F1C6C7A5D7EA5BA70D5C4BAF342FDBDFAA25576CEABEEDCE85CE2CA082E35
382EF79E7F2D1B74BA1755C358ECD371EAFC437685A534A83BB9BB0A6793E511
842F35FC3689BABF5CE8FAB7ECAC4091907B48FAB44B80C62DA19321577E4002
33F19B3DFBDDBEDB01222FD2AE4C0A18EC78564A142194F4F59AB471CF2A7D3A
1C9DC2B72D23079A8C17232D4588389E3FF2A3B6129AD43CFC01C39E643D367A
86E1030C0FFE0C14B53DBD0E109DAC93B491F30E62D78CBDC1CB6B4A21B50C2B
50069F583A75F162C8EFA70BCA83BB1E164AE592F55139FC1D29DB9FD0AD7A75
85B7BB02947A7C1A83A66894C8B7D4DE863EB291EF31E7C2D189F0CE7781A575
90B6AD5EE97EC759348EAC006A594AFCB8F16D11920AB40B75BF71BDAC49A3FC
ABB15436DC0325141F40D89E9EA0687A0AB7E26157EBC7C5F5EB02CAB6A8064E
C4A759D19824DA59218D92B6241CAC7D2929713EE1AEFFAADEEC1277F9FBFC1A
6902A5029F3CE9E20B3BE7363AE2F02818CAAB8CE09E9715E93F8BFA8A8B33C5
123CE77C5B445E06B29871314106ED90D2AA72146520E18A3441C276C4C8FFC6
A746C7968B53781AE288F3E7020B1B7FFDC09D3CE4249EB3427185756C13EA98
49DA69FB1097025F3D63256DC1ECE46BB07BAB12561C05FAC627E7B03F5EF4C7
FF74C8F3B5DF20BF92A8ADD18E5F074EAC3563F84D011D84AF7257BA892CEA26
0603A931D08C5B9621498B734AD0E8818318F15CDA742BB478DB2566723869E0
3999A2A7E6763DD2B764F674AAA691328C7533A7A3E78CE1B1C173F9CACD2BBB
0F5B040F615C5185558CFFDAE09192C762E7F43EB163BE1E02D6DB0691867F2F
ED620B63D6D953B5F4B44424AF7C7ACCAB346F2191C9F98AD0AF4201E8FBDCD1
338618CB550394DCF6AC5A567F1E35107CA837581D05348E3287700AB7CED327
D4AC7B4D18BAAB3BB5C952A0AB29AD34B8D12BC9211A0AB400DF4B87672E0169
00E05B1F686FEDB070D54AC8603E2C43CEB8654AC79AACFC6FCE4BF362D75B37
D62EE4AC47A3C5EE41DF737B949411331995EE1CAB0DD5D2D005EDCAC0AFD1C0
9D6D6364815356C4C501A23E158D3B49A78D42D964EF9920F95F3D7CFAA303B6
D8F8264A1C2E3A3A3CBAC1B468BC43DACAC2109EE07A240E8407CAE9218CEC1F
D4C9915F68948194C95AC88F610A52C2D5E2B6A5EDF342800E74A16D17D626DD
037E26FEE88405E4423896992282BF9904D13F4718D868DB67200B926579FF7A
70D868CC596E737AF510D241892BF822B98F2C8B82023DF3CDE8A97D3F214B40
4B9041D981389B61A4165A37FCA4F6200874607B96B0492A7ABEBA49228D5DA3
64C6B287E56DB1A71E08AAC21B12B93E261F14103EE49890DFACDDE92F37C339
78A0329641CF49183EB190A3751414F12B86F1D318480138DD8C26AFAECB791C
C6806E1AC58C539125A8796307253FCDD226B21C14893D5620111D61CB4A1577
647E457334FAC9C643614FB23F584B67142D9D5EC251A6F104B509CD196B514B
A525AA7C1A345DC5766B4760E803C483AFF3453180C618C1814F112ED17CC866
E854ACDDE6C4DE05E663FDEA4CD3F9A06F4589EC41B3EFE6974E58A2C4875AB4
50038822D6FBE96A74CFA9DBADF34CDAC1C53BED3309C1E3346069A24C583B28
527E470DEE29F121CDB0DDD1E9C3F0E860DB745D3A78A2675AA72E50F344D3D9
574918DB64A9B71246ED8744126E5637659266EAD871CCC73FBE90A85F3E1172
867B5D1BC11DA1D5AD9933F034612CAC8D06279675D37F69EA6287741A4053F6
9B417E0C580D328671BEF27C8EF08DC8A7612E0C232075D7B1F6A019DAD7B1E2
42C62354A35CEBABEB55CEE35049B4A25176C9716DDAF425D2773C7524766BCF
2063B6AFF537FC8806371A129A5DAB3629305E98344A1DFB20319F8170B9B6FE
DBA2C309E195E12F1573D58BBC6C1076578E41254E3AE1E53E29567F885E9254
8EF6E0C74D5148EB61B57C023C1CFF5FBF991510A62A12CCF4F04F7A5E8B9D4D
EDCD26599B2147290E4B490D08A840D43B119C071CC92FB967AF4C28F470FCB3
DAD7550105EDE408312F3CA6C9AFDEE236AC4CA52B2C9B7E41735403CAE6B475
96AADA0CDD4B7EFEA6701D519F8080479F5B21E412AD4567F27011516C9623E4
2FB210BA21023206E069486A0AF6109D99EA2AC73DFB34CBA1D05C61342679EA
3E73DB6D668A0794C678CD1D0CC8E5FC2A7DF44D4F30A8BC3EFB10A560921184
C58711435883FAF806498469447896A757EBF2D015F916B98745EF8240444776
18C13532D2A238E47AB74E2C1BFFBB753D754049DC93C929D2C6333FE967D87B
33539AC6585EA61371182A84B5EABE7729A6A8DF16DD9FF081F94D16A6F27713
977E43DA76045C84099FBCD27B78C9FE8380A9A046E069923A7BB06798178D1A
8021F99872D90D87C82723D150D86AE4B65740B006192D7ED490B85A02A2523F
28C698442F899EAB55565BF2C62F2A05EF604F73E39CB349FE88EC1B1AFCD145
C5018F4EDEE2FF21FDFB1C549D831E16DEBA1FEBEC4BF9F90C921FD8D5392EC0
3307769F18B00503E6B922F163C6F480A1E08EE396714401BBA7DCA7391F919F
48348C3A5FDB37853F3659DCFAC8CF93988B2437947F65D85F2756A61FDB7E61
D68891D424924544AB26F79E11F4C02BD3D8966406CBE57B27E6D8097D39E66F
F6B4912CA47F4F690402F792DCED970B37FDBE221C3F324C529A71582C90C7AB
5071280E5ABCF9E7CDB8C4DEC462197B54727C3F56E9940FFE0A641BEDB4AF5C
B53CBFF1E6B40380B94192467D4CF6FEFA057B2F34F246DF4A7BC2EE6E76F893
C4A37180C470760B6055041979445EAFF63F58DF757E5323F93956821903C00E
5D06FA164213EA24E4B8C5CB3741B43A7CAB8853187801CC5CD18F61A53F486F
E9BD14402778640CD5C262E137C55FCD4A09BAC579F6D3129481921C4FFD0E11
4F88ABB2FF00A7E68B47D814B1AF23B67C6CD19EEDDDCD11CF9F1C4B1D847903
32FF6B570DB47BB8A65A77E0C4CFB735CD23CDDA0A21B7171BB885B278352E23
7CC27F7724A1BEB42B20F16C0998CE42EE06544B1F2AB3BCA31B8BD27D3A1FAE
68C809B51015F285C494586203561716A790564265135BF50818F112C9AD87BE
B3ADC58FA1F264C168A04682FB1DB92DEBFA52A6E4DC56B4441DEAEAD9597311
B1E1647ED13D3A7FAB83559954E8C00A9E165C70CBA2FBF87F054CD7A011A449
4E363BD9BA184A47023D7379CDAFB7B23506DD8CEB1BFB073DDBB8295FE833E9
F3845FCB5DDA119523E7C576E16E367D09E751B222D54E3D4A39A350CA79675A
E5A83525EFCFFE61AB30B78F85849D8157AFA2EC7E76E45DD2D73D45BBA0B4E1
6C3024F100CC6DC25EEF919C139D425E3B6DD9C38B0AF085AD21A42EE0892686
70EDADE6D77BFDFE06AAE425B4F51AE5BC4D30CDED5859DFFB506FA029909BB2
B206C6E5D25EDF2FF4DA605E31DEDF8F509FBA2A9471C2D8A4151488200FB030
DD8A6F7BE512FEF23A7F4EACFF87812F92CD2F8CD08A21DB46B6CDE4850FC59F
F8FBD49A1B4904DE99064FB0FBD45E3EB0B5036B1B443B1EBA3940F76FEC6B17
2CB16A84DF50A5074D1D67199135F6762F3E39306025A169A38A631219B108FD
1C83D8D032DC039CC7FE77DF4B9F29AAE63580C20DB9F34C25907058C2ED21B6
4B108B31498C68A9AF094C36BD2B314C3D3FE88ED46C3E1E0C77B025D6867402
249C737FE3E2B7BE4595774CB012351D27FA8AEE89229B3695A0BC39A6274744
ADC19C175D3EFFBB06F3C826AB64CDA7D02184598F2CE15B2205296AE0EB191B
6DCE9E7909AAE33A726493B3A77E6A77DC26E004C45ACC8B074BE49D84B2A9BB
5CDD28C276182162E1FBF3876770D0F98BE47354DAD26DF4E0609DA559E0BC54
638E2371092D8E498046055334351225C0D7C7C7ED265D34761F27365C1D4A30
82AD5CA377549E16CE13B7BE756DBA33C36E5FE322A2A505C0BBADC4DFE6EA36
DEA13FA5681236AEE5605DD906BA6446AA06542E52CF4B15ABDFC823665EAAB6
E59A0BDD82CB1EC206E83B15034C77D608F8FEC7DD06625720C0C608A24EAABE
6F6AD0554B2006B6C73CB29FAD8AE8B9B09D9C73A5962A729AE695A6CB2A12D2
E65D3000C12631A9002046AA2A77C0206CF3E33A01433C14AFAB402CF24529FE
96851C2B25ECD2FBE1F2172F505CC4F8D1328DB47A624C02960FB0929FA6869F
0874A957D103C803A180279E5D7F7180A6C0B80E5512063DC49A82789329DE0C
35F4593A0B23BD7B703DF93780227E9165B5363270D3F8AC87175A1FF281B952
C40D3E7EC19E099E5C0C3B1BA5BD192A7B5DBE8AB8CA9EBC3A3D377322FC351A
E556C855F7C8F7FA5E562BF12A9DED94746BC101548AA5FEB1017BE6740E3D16
621B878BBE18E705BC6665CF9AFC27981C2154AB82396FEB0DA0EE987756D8CD
58334BB33B155E9A0FD0431B1C150E2E973453D7E6F899240EA28FD2F2D8B637
E085F726C44E86F95DF6CB9246C40DB3C64F24735CD4E1B259E5854A25AC2CE8
049B91D976CF85F292A710C100875485535A5A75ABE1BA1EB398F08AD319A0EA
577DCAD371A07FE8C59A531DB448D81B3C0862092EB10710FD0E66E1A10C6F84
A291ABC4FBFCEA357B9A704D78B533C32CBC6EF90664E79B86B1094724EC2650
2B4EFBE91873D7B81347E18C2C42B722B4C3C02F9BA25CF656D4DFC7CC965850
0805B4CEACB592EB37AAC2892953EAD550817F10EAD9B7A0BFAD32FBE2F0DDD6
AB0ED7CFB88C8DEEC7AD6D835428B66FB237AB9B7733538A8831B87492EDB5C5
4BFC27BFBA14B53121BE900CBBB78B1ACA1656EFB6CC4FFBF33B311DB4011E54
284C5E2592C2237BEF07BD69497C8B3D1BC75B97C02264309BE7358015D82061
EE67534DCC6F4D82F8D8F0E615FA468D8B06B3EA782F928CDCB0BEEE42A35834
26CA7F4B4A6B2DBAD360E993B6670F1262E1EBEBB7B84D7EA4183620CA897FC1
7251682710BA43814ED457A5CD1C3FCC7ECD9C5ECE0B2D9202AB63FF2FB87E41
BF79ED36656FC4A9928BCD2DD05050AAB1203665A46C8ABDCE5894C56CF76FBB
2913D4899BCBEC1E4C93B1E801301FC1C60241D8673AAB8C4DC01229C365F6BE
3620D0EFBF05C862910F918D763D1BF3D69F0B1EDFB91A5041764E0BF0E33F97
2BAAA23DA0A6922C24A2A0667AF099C0B4127133FE88942D6D245AB2C82749C2
1C505CAC9BCF7F00225E58ED1B3A9573475109F6DD1D69FBBB425F4A09A2A754
9D92640C7F00B9DDA529B6FA42C6FE833FF139EE981A3F2E01E531DFAA9A91F7
C8662B9D0DCEDC136834DCE908443A1514F56104C7DE1B2875C6D136D92134B7
34FDC1DDECCFD42147460EECBCEFD81698C301E685544EC5A90A9C65BD885CCB
61DC68C5A5ACBC635173C4A7544FA85587BFB9C7E9941AD2786EB48113D2F509
2AE1D666AF73D1DFD86AD49ADB5168134D9B19B8EFB55455A4701FB65C68FBCA
0D73EE0A295248FF3F08769272D605D0E6E9554F2E6B4D1151EC713AA52CF97D
667EC939BA0F5DB717B6131A2B3D9EBDA477B51A259EFF95E248D9ECBC2AA092
8FA64FF9271D193518A081E3718BE7511AEB1F99A1E6FB3139767E20BA10C29A
C2A8C5071D6459CEA0967B745A5428391ED44535AC2D17E8395A5CBE309E3757
90FCD77B98086CDBF51F6C4B7026EB074C38FCBC9DFCB83BF8667E27034AB10A
D80505975CAF7FE6FBD27D8F5573DF31BE24EE3A6D3DBCACA7C0DB42F25BEAE4
3FAC6EDA0402714DDF0488640B552731D9E6FA7EA168F4DDC556B934C4E0A07E
10FAE5BE72DB78F9B32FA76C15D7B26C6A5026B3D338BEF53A9AAEFA3CEF0D5E
789F42EF5DF51D7E12A9F165F27E2DFF7973E6876D7B695241134F735D30D48E
4854ACD4350AACCC6C20FD26538D30F20C4750BFEE3D335D56D9F20B30B406D4
DF1ACBB8D9C8FFA5CE5F584F7D7B7763068A81242A7D89FE1DD58ADAD03C7FF2
B3410F8337B974A5984ECB83FC777B516C6B196CD2A355F126419E830D7657E4
99477A09775A5F30B459B245FB1344156DE7712AE7E37E4CF8438B1E61989ABA
9E6FD4B618DDED16AA3EB565B1801A3E2BDB1022112C01BD42C0D74EFE28AD4A
5E3B1D00D73463814FB9E04309EA3CCBD63A94670876FADB7A109C045A2C3B86
4FE92933CB14B4CC842945C931B699A53D9EAF50A60DF63F79B14AE957CF4941
26567F299F21B72E125F4DDC8871A4DB18A04FA71E1AA51D6A42F442E47FDAA7
1642C09C64F1EABE04E92BD8347658C268E6B50921DCAD171BDF92E2CF8880A9
D1B1E80FDF655164EE2E1E7C23FC2DDA8FF43A7DE616B9236387D13F3CD632A8
B61C9C0739A6456BA13D40B93931F626CDFE5E4F6FD7EC7E76D2125F063144B9
23E7CB581CD2EB4BE1DF3E04F5FF3E91CB1CE04A536871D341F1AB706B25884D
2E7E3BD2F3264F224C30F61B624A93894EA89CCB1631DEDF8ABD9535E96E25FA
4C92903C582762B62A0151C1B9D082A5F6D8E6232A89D8D22FE335051B39B658
BBAC5184B8D536284679FA5BAB350AE6AEC8CB4AE0E506AD5A52A9CE19331ECF
F8E8C9C192EE07D570A45225884FFC46461C095C252FA923B4A3F0FF62A0F423
66BD62E2C2138375798FEA72525FB12E2ADDDCDC9E3B405D86D507C30659522D
EF9A099A322E0E5AC3D8051DA696E36DB661EE3895C09E5C9BD9C2B420FD74C2
F4493ADEDD026428F8439C6A7F10B5C983FF6884A9E891F9FDFF5AB263896E68
DE3A9710558F1DF282BA61D6610952C82FF080F6D1B142A1741AD91986DD11E4
2818FB31D405C39CE0860D840B604D36078B2CADCFDB46E162C890785B9C743A
2382846FEE793031988F99C21CB3641B1D559AD73EAE9C6D48573E5AF8E6648E
72694204D56F1E91F161C7B103C27F7189DC6673CB858100FD7C84D17A3FF087
CF44AFDF2B71072FB9419F120777F404CB68A4D8EA153F342CA0873D2E5C6EEB
410A09EC8D922221ABF099AD3CFC42680421BAC61C8CA16B596415819884559C
E283DC0A94FF9FD731FA01408078E90F5FF5D8DE16F62FD49021E7716945F8F1
8E1D58C97CCBE701564A1F5B092B82F55B3469EACB167C30F7427D475F13DE90
4BAEB01024FB7F30F00C8647636E74C3FF774C6467710A6D629A74FE5B518097
C57FA25AA31160B5BC96176FD03572C4349E34D1E7243A084A8A824B8AD96847
1A8792CF0F071258BD92AC16AF0605A78F9D9CB44752A7DAC2EA24EDEBBA0DEB
1F13D701165B98292ABB32CEB9FB4E120016189086AD7A1D9978576DF002936C
995C3BE0DF3F1AB2D1B5D4ED34EF992B34ACE7A7EC111303F38C5BD0A096F692
F6C4A0794CF7150D78FB767079DDF4C5EFD750B5BFFE723626E87EE3DAC582B1
430A73587F89B7B2F4333CBAF58A6E700196F9265B3A6A1E8D935885AB6BD726
92C2F5B5EBD48B9B2E3C2E299139E41B7074B1DA95F9813204322BD33FEB5668
4F17BF131597559A141BEBE8AA696CBDFC73943CBCBF380A5C96E3AED5495366
3ED51FEB9A6FC60B2B98D3640CAAA94CD06B6636E7D8839F049197458437B54D
10A776873D3150B032325FEFC8539CEB37F013C8F0BB90074170CE6FC09FDE75
7FC957AE6C6DFE4B654776AD368137D42EA50602BA5E9CF587B43A471DBEC926
2D9D8393DE5392667D942A98534A59D660DE717073659D118807C53590CFC639
41C6199796C0D5E284F73FD4D7A99B7303EB10D9B7FE54F988F3848B58021514
5EA0833FB70F977F0DCA637D12572D6614A9A92D900F69FF55F2545AFA6660EE
78A64413361F5496D8A99842E92347C85FBB37E90D825A612A9A7F2EC5127C5E
7DC61006B354656A23E30780DDDA37B5CCD54CC51BB6EAD2A6D50E06FC304530
F677867826EFD029F5FFA94ABED5B658D366F0591D8AF2B0F4B19CEF550554FB
4D5556707D7341AF38E532291D2B2A14AE2DB21F871C99392CC13B2FDF48C962
4A4608F9B682875D68B19E8385DB9B9D75B76400B981493F5B41FEBA273C3265
B6E93C8D1C199B756F9FC06CDA45DA6D88C7717DBF6104EF3EA7934687F97D3A
4E9E9143C337132302ACB7F4BCFCD0E97B25252E6989B343E2CC9A91297D60BE
D85C85FE37749F9655F54B02914C91BA5358AFFAFD4EFEE61C266D0B0BCDDB8E
E0DE7B3C876806AEF53FBD7D85E70DA12BD86B5CEBB96C6AFF4995DA347CF619
812A2E05932C8D63C8EA600BB9911091678DE2EEA9D277E0FE8D6DFABC1A216E
5EE9886AFBA213F4E317F7E94947E3E7C2CAAC298382265F3D889D77DFF78CA7
7C8AF6EC66FA0B727FC6AE866BDB0AD1D5BF0714A8A8D30EB5D0707CD2945F67
8FE553E0F9DAC3834A49D6ECB9525CF4E7A12B20EB26F62F39B1B19AFC2D7FF1
2069DE8A04B9015FBB704DC4005874EA37808CB1A63D8AC0F9264094EF936D43
1A9C3B18C3ECB816D74480B374A406E82C9E78EB561C31D860F33B9A0895535B
87B8203F66342F4B328EED3A43BD88C5E4558EC0A2BBABFEE5F78AE362BC5B28
7A933F5B2237AC1DA78F9FE6C2C0B2FB329AC213A0774432C5A9306B26FD155E
B66FBFB961D696E4646055454B3A45EC0E01134B5441176CE3C1C368175A2B71
6C37BE7A6975E0CB7BC1CB53B2A90B0CEB4C357F832FC2C363E3D499F3DCD805
5481446900749B9E33B2CAE0714BB721290532DF22D3799A2F3B4B2D9A82DEC6
0511770B984DC94992A087B0A6B5676685903EBB0006C546D91480ECC0AB2C8F
7C24E155572668940F4E5ACD49BA61D10D7F6FC4D921256468DEB958567998DC
56F538F11D40444EE0A3BE567F32C38C37AA14C7E3477A7C9A26E3051FEDA919
12632D731FB6BB2304BC0C4FC033BC777DEB2760094A5A862215FEF991BB2EE2
99A35CB3C3B85D2D80C9542C8AA918220D1E45B0C61881785D13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /fl put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 65 /A put
dup 72 /H put
dup 73 /I put
dup 79 /O put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5D24AB1323A0BDCC0A8FCCAD408E091D37B62D3D1BF8537CFC619A78488DA0CF
87FF97E3181A579D373539E8AFF22856FD03F4C387BA307983EDE87FE0F320FF
41E45F60704B913C7381D84E98411045E4AC9FFDF8168FA2286D8C7EBF681EA8
787E7960CFCAF502B7A3066310BE7A1159A02F1BF2C5C11A3A9A52E01DE3E108
8ECF6C9F892370DE073A17C26D92487DC47818C92555B5FA22B8E2D726EBDC07
7B0E0DBF8060AEAD5106824D748D9C085BAC95E031069395B41D5BB131FCDAFB
5CB678DA317AA3082296487B40E1D4297E22905E096C47A26F4DF5975ED3571B
8D41E4680A8FCC063278A87F78062708C344AC78C167A0E5CE18889CE0B44A03
15084F5C57B50DB76C39EA6587B515F5CAD0858001D0F08DA33F13C63849DED7
8CFE4ADB26070E46F7E452BECBA1FCE1D1604D39EE99D02D3FE7C02D0BF476D7
68D438A2C185B65F6148263D3133C7200962174762F97B1EA41634C128793856
2B2203565FD277C13BD2342C13A682C0303174D9022512B07ACCCCD0FC88CAFA
99839629C1DE9A67257E51FE20B5D01494A8FD21A104D906B000BC068A00B757
D6F9DCA2AE54088311ED782D682B58F4EF4A3C6D9969CC408705ED11B2CE62D3
E940616E483BE513ED163242C8A16395C67E4EEAA170C208286C5E86F0126AB2
5A5CA2875B48C61CB8112A4CFF52C65000714978E352F4D301B9688E76ED5AA7
BAEBEB668B24430916ED58EF36404E3B912BF4BFE16F0572FD530C5B437E27E5
E435083606FC3B43F0240E01171A3BD42496D758AEBFBD49C8EBF885197615A7
639C32791FFDCE1561BD18943A0C860BADAAEC8F1602CA4E90E0A8881E1A7490
84C0602F98FE352B628A2093C4B707795612B51A3F3AB2A52ADDF6E9D7FAC5D8
6C0CF0FF79BB3E2D358211DF809239CFD0AC7C18140DFF32A234E50243714D41
C65EB117F74F5BF076049BACE2F4D5766F6F839077D4C851BFADA4F202D9F4FB
0387D88E48A4E9DDA24E7B41EBAD5757C6DB346B20CE7BA55AD821FB43058D15
E6B577374C6F8918E3EA6BCD5CCE64A657C543DAF63A2A8453383A051DBF5AC9
E8600CAACDF129B2BB843A32A84B2C5624CEB0A5DA14980B9F60B6CAD9A9E694
305A5A652DB7A6F0AC28E960123A04365F335B19735F54B78C794B35A49FBB9D
60FEFEBA5941085C71D25920A0CFE830F76DD45C1F88B9C3DB554403EC5566D6
D4B270A06BA454296EC17A8435C39721EA5C3464B0245E02013E1666DCE85044
D7052D5DAD7CB06D15F07AD79DECFFA7CEDBA0F151727F93909B1BFD7A018C37
099933140495831EA0F62DAE0D60672A349E2E47141187B96B846A54CDB34BDB
6647E785563AC550C78230F9DE248589C55FB2FA7D935A4FD76D7A1C03F19C5D
7CBA05E59E74C7B5B58F4145A22A5CDCA376CD2586BD2B33F80AA1938F035390
CE98711FD1C07D94FE1A1329C4D983E0A8AAA0F61F3B74F8EF14DB359D881F7A
FCCFDEF33DE27902F4B0FB754D69330A7A2A0C72C3891E4D22B393FF25B5C46D
7391C6F010CA4F741FE939FBB642CA06FAA5E11A7EA52CB1BCCE88D89ADE52E5
D637878DA0D48BE5C3635E2D13A0F0E9707275300A86AB185D188A27093E1BBF
CA3FB51903F806D15B7177BD8E9D24F7FE3209CFD7602B74E1E6DBB4D6C8AB12
12CCC7F398B49BA44472E164C63A0FC9BE16947E4839C2EAC582C852031DC339
103010CB68F4588F0A756250CDD85CE6FAFA01CFE20B58762A0AF66BEBE84811
E098F00CF9CF03C2FC2B6A1EA45B1E466F4CF9B8A7D23362F1811CA92461AEEE
58B37EF4B087652D327EFAFF9029B3C7AEA3BDB980F30AA01DAAE3150B4B18C2
D2539A2DCF16ABB0B90E9A3DB6EC2B073E37CF15E87821CD65E4E594957C8553
8C1B682D0FF598964D53D965EAF694BA767065996CA177F3983F3E18AE2CA622
E0E703B8F38A83E4045F3CC8D78FA910FA0E9F2D6F8DD3C0995D5060C9B13CA0
FE121D17B57524F6D8E00EC46EB0361529D811FE8DCF23C73C1F725870E1EDE2
178C17A29A339F99A0BE9FC33A702D808AAB91FD4909661571C08C4EE6544EEE
1B5F54261642ACAAA688D4B09C5FE38C7AC82B445254C10AD88A81FE4C24396B
735511E408FDF92DF3776D856386FF4E5ECCD7C5AF202B32459DB3016C416F16
BDFA9C9DCAD887B879401869E08B7D906A3978FD53C1FF8A8DC54F9CDE56EFFA
4E7EC1CB8C26472CAEE4A4B45A89282382FB1854E231FA19ED16CAD0F2F751DB
1E057C10C8DB99ECFCC4461B595CDC635B6EF34C4F81C55BF538CF98717689B0
2CD3ED73682E8995AD8A73D846F4E6036D3AA2DF8121CF4705518A673212ADD2
44EDC09A5F1EF81913F8825BBE48CFC911827B6D836988A62FA3ED3554585C00
E211CEC670038D9A665F761B1E32D5AE9D187C1DBE0A06B83114653647D31452
2BF6490078B7072F2FEBA4448797CEBEE09E970EF63508766BB8BA0FEA195A5C
B9DA1E3F1B819A75C30BC8BBCFB9255EB616B9CB1670CA8EBFDAA1BD0BBE3E5E
C21B3E92796203BF5E8AB34A2DD55308B46B2247539F455D30997BA080A6E814
6A32DD75A0B2A48291F051DB2AF1F4712776DEB38CA9B80D4DB62419E0A475FC
C7634E1C250AAE7F08DD72A8214E57C443BB62675CF8130478CC24ABE7C780A6
2A4CF198FD0B280FDF3EA14FF57C94B60A0E2EE76EEBDD0C65EC07A283D5C84E
369BD5F316D4B3B213D9B94BCC253D17419A62F46B9765C5490D48AEBDBC19AE
749F38314494EEF9B605BC284E2D9E81F9D74B30A83B532DDBDEB6B65D1A6DB0
F29D7B184EAADA97DE278C49FBD90F2C915168923CC58787593653EA6B5E2463
1BE67E801D1E597C6D0F3793D4CB4BB848FEFCE88F26104537D9BC5F851482DB
FDFE38600930DE3A20E19AD558D817DFF31CE5A0DC6F25E0E4A6968F0282D42F
E5B99CCC94A4CDB62AB1E9D8F2517EF113F468F3E728A81A613E89CF7B16408C
B7CEB45C28DA0DABB4536DF0D1A7CE868413E99C30E87249E35EEDECD7415116
E9E6FCFE97969B9E1316628F2EB52741CAEF0F022DD19B3D8ADDAC7252B1953E
063994882BD188B5B9CF9D278D6346DB1435ACED91014C28C84E3E881C20DDDE
1C04A7D4A539F4D867C8386C5B472622AEFCC58281D59D77B5751D1995481688
DFC6238D5FDB872EB02644208A20247EDCEA3AA4883A5A3D584CD62D7875A872
F6A7ADFE831327B740205A94A54CFDB3C3AFEE31EA27AE6B71BB829B5702C455
59AB0DBB4C881D288A159BB98C064F6D748FE3DF7C5530659EAE80D203857B1E
023063003694F88EB5196901480593AA95F1BC10869A095C5CF005C2034FDF2C
0335AEEA5CC17404204ABCC791128FEB1F95FCB151594CD63CB1FE0325D83B9D
CFA9744967134240165A249A36EE9F4EDF2571B46441F7B549C65234B44D2FA2
729654F1DAEDA08435A095F31F5DD737B13C3AA876DCC5E4D23C016909B77B2A
EA94A4C686737580BC32AB4B5EB70E31A3C068EDFE66CB7150DD10FE6752C76A
FAAA01D278A4D749A103C41BB8A2B814B6C8C354322F94ABA18D0ADD4FA880E0
96E4E8C9470EAA4750DC554D773A10C55950077BBE160911C598830FC80705EC
3BF3050B07269746684420479228F7CFAE812367EAB6EC0E7DC1F126E41C84AD
07C443F1BB0B1E116E6A6742FA3507DED5C62A8BCFB02586E6AAA93E72AC2F3A
74AD9E072611F861E6FAB5FF4182D48A1790BDECD3BF8B683D332336CAECF631
A53E0B086E9D3A58FFDF34285AD4E89511DF2CD26D8B914DC6DB4C267624503E
6C15C1933FA67A155E1DCF871E9C4B189830EE8D14518D11BBDC67755E50CE24
0293368CFE6D56D4A9AD18AA21054EAC3BCCCFB6EE146D21DC8D6F07E83F13FC
6796BA72CF0824C98DCEE702F70B511A5E542D083883383707622A89E7DE344F
47568824CAE0E3F4BDC1A5C3FD03162A920C284BD1F8BB7CECCF9D4F116F06E1
7DBC4AE41F312B00099E50AAC9D375CE3320477021E98A56CCA4134B8E2324B8
784422187F039777B215A4A87F0C83878CE3C774D44B2D0C17274BAA65125323
9509346F42F6CABFB54BBB923619E20FAF94CB788559B1320213C1FBEBA4DD7D
6EE1F080CC908FA2535EA52471C1321D7A5AFCA58CB8C17C1A83178A88C48324
CBEFBE1062B23A2548508795170B61354388E8840F274D81CDA49FB357D4BF32
A560E56530E3AD8A27DDC820C2D583C74A5BD213562F08DF298057AD263BA6F4
488DCC01E652DBA57B622FE7DC9010CB97910D9F57FD9A4C2C4477F0A585CAFD
D92E651EAA5FF1D4DA651F9CB991689DB60E55E08136F94FDF105270153F637A
6DD07823ED62FFE153A1A7EBBCE1019470BA632263D08A1BB3564D8C988ABB8D
03A803695D4E257C20904A64B7585F7D7C6441CC2EF842AC7859A50E1C8C8848
4D941BB2A96E863610DCB5E3749CEFEC777DF851DDDEC6080868AFD6C9916FF4
4330E7EE0B1219E5AA8FDEC25F02DA0287D2A07D694D57ABE4DF940743EBA538
8E379DC4637E465550FACD2AAD7FF92F7860B972A087EB2D531274754085D92A
2954BAD0FCAD9E5B0F5678E4F355472E1D8CDEBEC2FB1DF4FD3B3EC630F5ED7C
547C68C0771F8E6EBACEE7327F665B3A9080E87B952A2372FB4D1666F87EC0BD
32419BFA706319455E40991BA19D356E4B371185D4F31C9299660CE8FD4FFB21
2381B3FDC72FDB777020AF551C738846DBF151AC8B3A9EDD0CC9DD3D7324CE2B
06D70629048A08BF13837BF0C17393E4C447D003D9848D7F05EFD064BB8E337E
EB3D74C49DED54DB3D70D2C0BFFD26C7DB854DFB496CDCDF62E3051ECF1DC494
D9BF808032FB4FF58AB4A20E3C0E40254FEADF77120E5EA6485AD55169A0E8E9
121549DA8744BAADC069B1E17F9E9926D19B7F4AC00B706AABD5F89B44849E87
64CCACBC59FDBD97F27AF4DEDC76E7427A33EFF3E0E35540142CCDC9D41BB374
E65E434BDD3CE59D7CA652E9FDA006B55D6826F49C36CAFD1F865A33D7101774
4357B8FDDAA75D2F168D701BC07D415CE5FF8334D014568F3AC6A8DBE70E6B8B
755860204D265486093076E6247D01014873B52F4E079C4165C2594579D6D15C
E2AAC0732D932A5763BA35649795A4293B92428EB9DB634FE561453B5354CEB3
97B08BE386ACA0858B4A4E196A9F0CB76ABE7F0E49D12170E3410E9277C7687F
56CF0CBCBCA18FD318ED0D728F4B86FD142508ABA85CDEA348C89B24C81D980C
C4D728A8DAE493C905742C565A3443C22EA489634F1B085D1724C67DD9B62546
5AD2370DE5CCC57FD76596B9A2A46B120731D9934863F30DE7855DD46809A35F
E8070FC15B8A7B4050B8EE8DC25683F8A4CABCB05E7B0EAD2AC8A7AC2F114EC4
919A6F6F79DB1C61F0445D8B37378105DC8AB7F80E79D52F305F1A0852A73BEC
25CBFFBD0097CA3A903CC52E0A6CBE8190951EF3F995D441DC8407547B244C8F
33285B58227095C254B23CBCAE5EB9D18191EB936D4EB7592A263C8327B1F402
D2F0F19151DEB13BBE34256185CBB524EB0B907C5221EE128EBE304B581EF60F
EF9D79654CB5B854A6859927E548C41B3FC2EEAC527ECDC6B00E0D90A95FA084
99D758D7895C02020C6B0FEF64370D56C187F21E77ED18E66EEBC5521557A1D6
82C3304CA28526E4654AE63BD52DD9FD6EEFB3730E16163C8F853EC7AFC55697
6F8F9B93E6EF652E4F09396F72308D6428524A9FA3EF41B3280FDC646BD89C81
6980FA2BB7202BD29005590F3DF25E3C2F46DBD8EAA7C1B05E371E667C4734AD
EAAD5FB841D7C3B137FF94090564BD20DA2433822699398B03453C027694152F
B029C787B4268CAFD163A34112CA26F953605D8799150E7FBDE08689888BF0A8
AC786110941440DFA0E09A3CEF386F00BB379BDFD1FDC40EC1FFC1359F2CB0E2
4449C1D17A5E68CCD7B591675CF8AB5F7A506056FB0457A0F8D04810C8DAC07A
81F3CE2FC2070CDD178766B21D987CBBFE2512608F42C3D181B62802203322A4
C2022D4DF325A66A2FCF552CB1FE1EF0CBA9A28C39228B21A8DC200E0E539C6F
60F7ABD21CC2076AF7218D39D4A1AFD4144578ED4511F0269B10E452A4F9FFDF
8346B85D0C3A685672E5B5DD034350B874162FE139EE16118EFBDE7354C1D628
382DA45BCC43D3C576DFF0483D53AFD8889146419704E656D03D66B99A10CEAD
5BF9D0735CE86CA4B2B494A2DA681403938AFFC2D42D0831EE12B3CC55037C89
1909814C88B3F1196AF7D3DF2586CA40BC6E96DA87A6247B5925E65251040F05
BD7E93151CF0E84ECB1430713B98891648DC3A083E03990DFBFF32DD0BAE43B2
26598EF6B0FF89A47ED7CDE68A6A5F48955E847294513D9D411E3E62A7F8F906
2BA0228DD853D18630C52586F71BB629BDEEB690E1C27B28A6C4609AE492972D
DE27D99E2D0F5DE91AC9C33647A1FE9C476FE32EE610918EE28570835962DD88
5B66443F0762DC7F23D70A964A38955A5746ACE4FDCD460E1406F18C4C37C049
D4D436C6AA3B52BC2EB14DA3E4088A3D2E6A1B63D9A188961A3AD600A30B0905
19598C211BBA1B24789845EB53B4C05FA50E4C162C1D334DC15F76462E533B88
E7FE5D6F915E3822970A2B97693AABF0DD6B08ADB153349F7AE0EE237A7EC720
437791871368675C3C12A3033322D5ECE9D434DD8B2B7FCB3DBEF6111ACACF28
028FD9E88A688DFB49C80972A6FC9C2264BA533C22CF7E8BD53B6CA99E0CBED8
F2F7E657AAE78DD8D1D2FB0B15C8473E0951D2E19AB541AE01CB3ABAF0030AB2
1D1C914329FCD5D7BBFD8A9266AB6204A2C7F92A7C39EE62CE004021034BEDC1
45274A2675FCA08AAAC11B2493B0B06E9934B88918A577F9DDBE27EE3C9D9439
84A39CD961BB6F42083C6BB763106332C3899BB3199B31F30D79B8DE8FD32827
9A11C72129F3F515771ECAADD61B9DA23119C5916B986505848C3C9C61514272
FA0A3FD1B43D63398D0FA4AB041865DF45C448169181A08A0F75DAE144D73419
B14740802F3992AA4AD2577A66FE581CA870D4C75CDFFE6139DE44556E641AC7
21C0748252645EA8BBC06389B02EDA0CFE89D62EA5AD0763F987E11389FC09B5
6626C39CF55B2B06C5A66D6F93044C387EAD41842D130FB6E06B0F468EF483E4
8A5CA6840F6F42C8E74C4599632CAC2BC3BB3A096C4E28B02BBFC7D578145EF8
18F7549A51852729333F9E804CDD7C190A30D72F4DC121F50C5AB42181F58E0A
ADFBDC4900D53246121361440DA631BE2735B2C944A90875AA6B2E6370152923
CA7F34B2EA027D6C717F00F78B82EF16DE179C2DC0DF8E9A343DDA6BE717BAD2
D2407E7BC5CC6949C03DB0A067D72487A5E76F8A937113E526B9C8CC9A5CF05C
EA8EAF853A64FEA3BAFE5265EFCF7CED110C042DB9334244F1B5982F6F1C1742
BEEA726C5DE0D1E493F6AC510DBE18EB9C5B2DA01F2A95B78479408E0581459F
81F0C5EA9089C1040C6B1DACD14AD64377245DDB3C00CCDD3BD11AAF2E96FCD6
94ECEFA10DD4BF9B97794A3168F900F30E8509A4E88B42F2B64A0C7CC8F1AE71
7ADBA1AB642A18483DEF37FAC370A988950CEB87ED0AE61BE75721FE2C16275C
D3191F8A21C9D487748F5B2D43368A63F3334FB346249EF52B4EF46288A35075
2EF5F79B66C08D89A1B08C1DF55D4BC8790EE52C37FDC9A4C042A8CCE9E6B3F5
7ABFC1EA1156FE95A9197C9892A9DABC5B2F89DFD86BACC995C3396D2BF459B0
452C88753387BFE3E54F053BE702B87CF361534873711A5E6D67860B26DDC9E7
9640EEFC4B3C2828BA35C6C8C444E961C73AFB6B435ADAAF22A57F8C321B4462
0A12173F5513194DD1DA71BADF676BA6E1897E3042FA3576FFD6FE39892AC206
2A51B69D6699809EC4FD519CB934575A2B4FA6A1F9075481F132BEF726530A0C
188BD9708A4882023C50C2535FEB4BE079BFF6440B11483C786C1E950925CC70
9FE67C81C5D8B6B33D510A28DCC16DA96C890B0CB870657FDB8ECD41F2575AD9
93CA98F3EFC8540866FBA721C3F5B87C4AE77413AC72FFE5BEADF922681FF80E
884707290BCEC4472E41DCC6E085A0677CBEE515BABFCA7B034561BA812AD2BB
799627C6D0CAB63FD774A4D5EA8545C538841C5932AF47BC56DDBD6363E3364B
9B0DEC9D4EF00A258C9DBDB990D37F8659CEBC5E8DB642A38C3354D01B14BD4C
A53C4B01019BFCE27B1DD09CBDDBE6673D1568EE01EBCC07EFEB92274D8C221A
3C8FA0E4055421EBB92B1E8EEFA4ECDC2363EBFB5819CAC8204CDAD3262A90D6
AC4288A6CA21E0AF7BA8D8C175F5D44338B2222921B0C38A58EE2476BC60B3A3
A803F0BFB401979D7F5E8F36EA3B7001257D88551979C203C6D210C162948C30
12C7960ADF0458C8ECA54848FD70FD99A634C4937688963484C342B79C2C93BF
9A9AAE55E4F55E1CE91721B21849DB842C69839DD59B2AB1DB3A1F22F34F1714
3CADD0022DEAE07BCE5987107DF4FC609BE213A562DC6884CE7F9DCD64D77A80
EF3E137156A4B2E2EAFB85E02C9DB3DDF9C4A62B7CBDA34C757F85A6EA31D9BF
E6B278CE3BF227EF8FED51D597C3FE312B0B25B856B22089DF727D14F676F05D
083C8A37B50A6C98EA8E1F35EF883340204BF93B4A63ADB4B386449416F05EF0
4A3AA3870496EE3175F2541B3E4AE819DEF164C91D222968CD21B4031AD28892
A9BDC4AC6CB4BE1DB8BF06799DF3AFAC29A64254762EE6927D89E2513AA0B000
2A4323361BD4B5A17DF78543655A37D1E3CC209A7F492A9C6A2F5695267433B8
AA602DF500B988C62F9E34A5B7C58F7ABAAC501567BF6CD5098C20D1E3B5C77E
C92B1511CDC61B5EAB7D9AFC4F8B8906C6A7E39ED17D46ED9E26F18929B7C06B
D1808B3F898ACFB8E49FA685B91092599150F994B0A5134D70525D08D11A5087
DBBD00533313A1D3C1E64B600CD75B8600E9C60BA20A5045FCE8F438FCBECEBF
02E5D5588A648F6C0DF89A88B625474962E115747A6700F1F506FE3A51D4A790
33572089C0989FFF26403938E298D0E86CA2F07C0D0B1F8B4B9599CA17EC6E8C
CD0C235DFCBE138EA2B990993003AEC8C49ECD2DA5DB394E087260CB54C640DC
DD7C46EB240D3234BC4187E30AEAEBBEB87CADF52F3B531F79764441492FCCD8
B58234C24D1CBE540AB287B50BD1B84CD4A58995F84C7B8453AB442C5974E8FA
8D6F6008585993FCAA077CC9D081972DF7C598CF60608A2A14B8DD72384D6ADE
3E40FAEDA38BF98A9BCFBB8C32162C3493967BED01391208AACBCD95266EFAB4
F9BEF0F25A57EE1B4FF656B8AE5971294C1A9F70EE29B069A9DDC55D474A4EE8
99D4B8B19EE75C5AE16508CD97D9FD06653BE4C8E657D6E1F298179E38414F53
7D888776869F5686F34F46641EAB65C2D3D6FFE10C1BCB9E0B6DF816DA12BFE4
615D4563BD63EA4529559412780963B5CC101AC0EA40E5F388CD7B95039FE5E1
49550C898DA65EDCD384AFAE410570417C57A6B49DDEDACD80F5D302FBDF9E42
9D446D78F787257E50B92E6180A11D82FF21CC5CFACCB81B755E85C8E70E1993
8D60B536B89532A1203F72356B302F55E707B42AC7D05E1E536E5142220323E2
1B09FE682EE128C21BB47E61EF79954435F9436733537B7B5953573F5A79AE47
2598AB41755042A746BA4521DC90E021C7747943970F9CD4F5053D8D550D9EF1
E403BE3691E5D6E1706E23C8FD4ED5C87F2F77C14BF633AD3F77F4A0E007D0C5
315403A9D397105BB491AC494598C51548132DF8044B6C4549555A4E0D06D994
5E406CC621BF757EFD89443BD64D2B7410EDFB165B2C228E7A20227B2C988F4D
0991313A8CAF7E387D6FD30E8C22BE49015D291BAF4DB1C85D8658F1C5391CE1
F79A588EB5BF698457D100DC1DBCA085C1F005EF78C1E449853FA9B640CE8576
DFFD04A49785C794A1F73D4E8CDA909035E0122143F9902030B703EF6D349AC2
A74013680CE69CDA5CCFE58272E39C28A8591A40767C92E447BAF83D01643E21
211662EFC33984BDD4F173AE77C9AC06EED0C5F3B84D0047D32EF64ADA91A411
44DFC0C12C1012356AFAA7FDE1C2EA92B84BEE162B97159F1DB757358FD9A78C
0244711AB45AFA02CBD2DC7CF772C80024061FA65C5B8276D4C751AB0F86812C
ED01B73B15C8C919693D0C7E59238F264C4CD749BAF1AEF200D5EE996269B3A9
308C910E1CD1EDE6ED9FA4EC62A1B33FBDF7B5120FB3244D945CBE59E7E615B3
7A11CBBC8982D095038D36FE99EB7A1A3909E95EDFD368E3FFA36042EE0045B1
267DD8ADD39B0976227E226FA78F84A70A767F3A1FE89DB21AD834B54AC1D058
87999A39A93E6BFC32E84810B3A9AC43E8C7F51B672C5714E3738CD968E81660
3441B9D02B379F5E281A8AD914BA325C8B0DEDF01FEF1583B9A892C20831E151
06BB4CC63E9D25C65F216F8688DA61029EFCD18561005400ABBF41E55D9C7193
B670399F558B37AB7CB170CC5D12083F2DED462D41294AA857ABF784A61EFAA6
3C969D131FCEAA4A6C73BFF2560E0A2733493A5A6C541478CF42B2B21D64747A
29333CA0FC854D780E121A49C675C74AD88AD53B5DF24597E15899F334A33396
446D76FCBC4D990A1D7F5A7D47772B4B84BD505FBE90F218AEBADB6DEAC8754A
E29E3A8AA2B08A1B9AD6A672A9BD76628090A435E2384826FEDC1477B8328F84
72A8C12A0B219ECE33B74E53C85D5FD0800211377A685F2667929D47EC06D8F8
236A41D20C9A6C8E7CF7B6FE199E347062A5C3B3542DE94CF09A52AB2AC2C06C
ECF99D6900FCDE220B25ED13F4A1679CFF36D64753ACE5FBF0FAAC223F65B7C8
BEE55C2FE82C103B0054481011181025ACA1109FEB9733F9A779D28427427404
099C604EA233FCC54825BD1BCC3A9054EA249AEC286174662ED21819F9A65270
B155C0043C921201AFB971F5BE490EFBBE6454F83FA2E2BB3B4EAFDEA62B8291
6B16ED35169C7EF77749C0698483F1C64D2D964FC0B380F639B1F1C2CD6F9A07
BCDAB9F092ABBA3BAE4C2D18AD02B3E5D9B4974E0B8A1415F044CB2BBB2E182B
6365AC596B3814442733896CC569D378983CF71C112DA0A83190715ACE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX9
%!PS-AdobeFont-1.0: CMBX9 003.002
%%Title: CMBX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX9 known{/CMBX9 findfont dup/UniqueID known{dup
/UniqueID get 5000767 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX9 def
/FontBBox {-58 -250 1195 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX9.) readonly def
/FullName (CMBX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D4347EE3E5AFBE73BA
31023D79A7299D8F662042A8D8B6A7B4E86F48AE98EF848E83FFDE68E17A0832
A181C126D15EC79861796F03957F5A51462C817DF752097718413D012D19C9D4
423A5EAE1EFD4EA7A9651BAE6E45CC194BDCD03FF43F255E58EB5E50CA26BB98
B8B11E21DBFF2BBB04D039E63C453EEDFCD9378F5E7AAE3A93E8691DED5865B2
B78F540F8AA3224BE372B18904651D057608DE4DD729FAC398A80CB904410451
90D66C44E943517A8F4969673B985D9D244FFC743E0AEE309EFD224F7029D37A
F6EDD96E2F88C9D071FF16EDF055955D31DEF10808B343E948BB4F6393D275D0
44C4DABB75332DD716E8127283E8D70511F8EAF4D1A5F72E2F8503A2F964E5F9
39304CC17ACCF531A8C0B6A9D58DBA6F24A4ECA62EECC939E8111E4BF79BDF77
D656F9998F1EFD2ECE3E61CA526106662273D5AD3E74D08E9D4453569B359C2B
E2455F2136B4DB54ADDC3C0256EB7A11E1615AB9323ECCBB6EB48ACD469A2020
A873E88B28AEAACAA01826C1C18120774FD5324DF9AD36FC256706DB24FEDF34
0FCDF04B12ADB66876EC7AEC183A1EA8BABD38BADDCD0EBDE11A5A1BEADD0F7B
83585C3BA141A8B296872F712EC42C625DBEE9EBD2C414E57CC1378CAEFD00E8
DB4B84F51967F2968329B8503C4B37A56F6136DA89167FE3AAA93257140FE94D
D96C7F85C6F82AE1596511ADFEFDEBC1B41B0395E66D2074B39B5565AD4687FC
89BB4BAFF0F7568D9EAF069CCBA2DFF61C59E2CB2F4274459792C5D097FDE6DE
0E40AAD8DD8F64C28D04EE50AB79EA7D3420CE42D39FA9080E9E046A4F22B5AE
AAA17FE750BFAF7BFF097E4A6E9362412C55E25767C311832C1C0C76005C733F
E046FCFD4CF49C6181C24BD299E90F20A0A0ADC868C11A8AB7F610186D0483A1
B3BC4FAFFFE12FD746777209B4DCEF0E4ED15D90F19BF2FB2B56231FFDE5D40B
146E3FAEDDBAB365D88CED98629B9855AD6E57FB01BB82659BD320D248E5F7D7
B584DD43E1F5DD2C91945DDB772E5A62AEB7080AF36A83D2BA8533E7E6FD287A
924F616F8090E9FFAA607A21F38718D668FBD6BA3434500BD01EDCEC00354F68
E1D0E9A921DACFB83FB61C1A5C27D027CAB348C4B7E2781013B68CC5A2BC8703
2809A49A0C2E9E004D56844EFAB4A8763B103CF7CFF980C9CF7F6BE28814CBDC
348E2486D9379DFFCC0E9329854D518B49B98F582972B0D1D18A3319EC00DDF2
F64C2CD2DCDBA287B279F98D16ABD1D140246E8B66C759571981FE7402F14C94
18394A4C426AEE4B0688D86D08B408763DA3537E5BA0D6A6796C316FDB0193E6
77C6F257BEDDE17F2CA5E661F434964BAC9834BFF36F563637872FCDDE94CF22
F076D1C2DF6357D8A26D305D52C9086CE36F49CD92ADFB4306705A0887407C9D
59B6BFDB82379111C9E33692BA9E2ED9782CE4334C6125933A2F210684642DF5
3B129F955BADA1E86D6B80CE299FA0D1C0AED1AD61686AF1052A188881E2125C
98083BA8255B92B9CA0B48EB57F936790DEFA6E6947C0FF4083FEC296FF3034D
AD657C64F2675EED2B4EED1E88F0B1338762CB4C64C79F111CDE9777A000F65A
F9979943ED7C445815BB59052B91F0FEF7219E3DF27E1D5155B9C42B7BBB06EB
1815997FC3471CF963A15B1C5E4653C84236CC5BF55A31B94E394C635B95D847
69E8134F4FFEAE836CD6AE71F58F48AA2F95BDB1E2CB89DEE590EFF3AB7097DF
AC185303E647628F5D87E0D82E6685DB467A0F8B7D3AB2B7F3F11BCC99BD48A6
FA5D4D75698454CB74451B486CDA6B65547C0CBAA563EC3574364540AE7B11B8
F9E86BFA655CDE88DE2E7D41851FD208649E9C011E04C78ED9209FD56E2447BC
E1AAA0A3D36F6406C60F6B19347CCB7D56A84D961E17E361F92C5542109D9BFC
FEA2FF9775230EABE3333EB25A40E29016E9A8255713AC8336B8F7DEB89FEFEF
4006DAAEA26C6BA1EF494AB99C2BC960D9E07981BABE909B5C121F2CAD48C938
A36129D10D38AE8F5C64879F61138FA9F7479341F5C5DE86376B65A642B9622B
E58DBBFAFE07EEE1D11DE9DC34309572868586CD92D39FADB711883AA85210E5
C82842EF225E55370FE0AC600A170687C60C8091B0625A1C5589186F3C7C1218
B15B5CC3A5CDBA7085338D963D929A18A651EC7CC39B8500899DE9220A1BA363
78698E414607C34E06E29AC5BCBAB98A70DC2BDE0FDDCCE22D4717EDA7D95397
33420EDEC2F1D6E7072FEA85945378A6BE9C7F68DB4FDA6B5BBC0032B3C02519
F4168C804B6A101AA60EF4FC40C2428AFEEF5A80F9B76D561C8A21B3633E13C5
215A14D54B8A1E6143A9CA0B5794D20DF97C35B3C9E9A4673AC2123E7DD8E216
044269B1D6AEEA46757F8D9AC5C8A92BDC1EF22EE0575C80CA7895722CDD2BA6
F9A208E6BEE5319E63B3B3CA197D9739A4498AAAC9C7484D61418ED2BEBF63A7
F5283A075D1DFD4B2702E1551A0D1A90DBBBEFB6A55B5F29C869763A856C4E61
EEB3C8E14E3376B7D01A4E265C6C8056ED23931DCF669A0EC9427F74A147AD8E
82E172FA6C13DB1281651BF3D14163D963EFC7384BFC4B3B9274274DCEF647FD
D6DF0CC146BE8AA660D709526B394CE253369281FDB45AE071319E8FAE4EDF10
2867A431E22779EE40D885E95AFBF62916D9900016805D004C0375D29130CA14
F3E466AF350D1A5D181816EE1C4BC75DC09E4195DADA5AB09CE9EF2C4D5F7CEC
6C16BB6EC791E2870DB46B6B06DF421E7A2781D82A07D92316B553D068A1DF5A
8B19041F96ED637B932DE184F8B856FE1947F5FC8AE505F0E3953B325E0FD6FA
825EAD072AF06E258BD35607A1F082DFBC2BA5251DEDCAF68B4D03086CCF84BC
DF70BB8D2EEEE3E0EAEACC8440AA130273E5C7E78A15EEF66A9A1E0D5E022188
0AFA50FA55C6C461C743E1845FED77378D639839F548D6827CF371AD3DFCE592
B7F6E29FFEB6CB92B33E24E34875A5A92C08806F67E18AEAD86447A977890AE2
30A452F33B609DE5B792D9CABF39A086C0936AECC081CBBC810B3EE1D35F9717
260E76132661E3A8170759084AFAB04A6E773E9714A6D486E0BF46F336A7CDB5
C325E28E747295CB0E8FFB289F4907BAEC213D4D0B495A246A3DC359B995E9C0
C5322D750E13159B7242E4C4DD27932AAA130BC6B0400428B5E6F928CB8F7658
EF02F7522779CDBB67722E09774C419489192FDAD3DF272C95BD9BD64DDF0BDE
999FC72607F52805DCCA5EC17150EEE38B866E3D5199E5A6CC262785EEB11D51
80E79545DA191071487EF70C7FAC0CA345955F797912C1268924DD79D0FCA3BA
460F43E74975C04296E34423BD366A4EF7EE9463ECEF08F7E7BC8BEC570F812B
066383C2EF5375FB1504537D902818D63B30385421FF81AD92A1C153852B1427
A39685A76DD636DC4ADCC53F2A78F795F48EFB23807E5751023FE324CB401281
60F8A8DA779A245DBC26E73B61A1450F25AC276E1B5240578E85E1CDF5A784F7
D4F5BAFA76F70300972E4B130C685189C4010B9035A5CBF0562EB3B387FD89F5
C53A25D3E883B506E0B477389DA5CFA82CB157D8C30F287678B0F9A17F5A8704
ACB5DC57D7CAD21A4EBA49248F277F929D3E49B17463EA5F31A4FC11B0836E34
3A5FDDC6B9A45113590F114B99566D18C21464E7FC1D9AAA9B1133E5E8E2D14B
8E143E1E16595C42376694A83684E3B217A17F158DE89549ECCCB443701B520B
E20B972CA5EC6405C479C5054663D48A22D105AC98AF094340B5964D0C26D9CE
241D2706D3444C1405B2C9F7C912CDFC87EE8FBA01C0020D1AED1A6205A8A45F
8504B42431DB5409BA8AC472F2FCB4CE698F6DA92C4C8BF1293C2C998B771540
3D933EB5E976B7D2252DAE9584E5C6864B29C3048EE159BCB7638CA956E07F81
F76391380AAD2F1DC2DC201BAC657A1BC93F5569A5F612A4EB6B01F136F41B87
E20D4DD6ABD7ACF1275FD80D9BBB87A45572979BDFEF59212F1F6D9423FEC976
1228499D626A328569B4BA2755B1ACD20796398AEEC5F3C61122D52124996535
D0813227F549FCF59C6182D6514A70F9E38565C8C98D5F797318FB531B5DA58E
EC60235B6F1D97CA5D495CF689C3F9B3260998ADA1204AC00135C7C72700DB00
7C06798A46E897875BE619508DFA2201FDCF689E51C3D85342247B059C0DDA14
766A31E3E25E792F090DF3EA0C45C3F64AFB918BDFF92FF0ADA2F71866CA190B
87B2FF90C872284652619F084E2259F044E2980101A62004AE9F4BBF675C5279
BA3437ADDF2D552A033D2301A669EE8BBC840C0028275D077B8E9977D447B396
F1D82608E030FA43511BA01C345078986B8C35B6C6990D018C2DD2CBC7774450
D8482DBB262BB816E6A26A1FEB084FC2027C62D17790C80C65A9183F23BB2458
34FDC5D566C1B667EE801D0521BBA520A15C0C923EDAD84AD6A83DB23806711B
0AC2631C15EB1D33C26F8D65852EC37A3479152557366929A63B753226059870
45CE6403CA23FF95BCFB6F0C8DF8CAFCC0BF27C59414217CC6552F5945D9E6DA
AF83F4AB1917742F7502B069DE44A6ED3BEC966F59A84FAA2F8DE441C11FB122
DEF1768D250C0CA5F2DDE6FC4E24FD3AE4386B91ED2A492A959BF7E4C0AABEAA
5BC2D933147A4A21FC5E5CF3B2AF5C0A768A8B79337FA3934A43E24F9F7DF24D
22C5BFE4DF1FD57289A6E1C9AA48D32D20F613AE94B4308E0D3BE4D1BC95B33E
A9911B82EFF461D295C5462EE2B12A3E40B89E0BC778FB76F8B847B6AA99E061
3444A55D83FF839B926985B0F4E562D726FD99C5DC86DA24BA7AF38B93C90F51
A937E7C35793010F351594465B39BA5276F223DD3CAE1868B969D8EC93AA50C1
4C7E51D0D7F5E9F0EDBE1BE24BA5A977163BEC724D575749C56C4F39BD60F3AC
47B930C9E07A2D59642C9DE85EA6FAD1E7D8817812C049FDAEE148E8AB207B89
B2324191F1A82A7C499E7BF09CF1299F0ECF55EB0A2A32C5BB89411B4AF2A401
074718859CDC27C2FA78BC5269D5A38DBCAE55F6CB669DEED2C36E5B0D590504
B6162391FACA9F20224E6AD24B86CCAC0048EC7A618B3263F82A317B3969F0FA
9D5EA4676B27F371785FFF6599B61A6D32E82DD9D511B04E03F14C95A4CA6CD9
5B59A8A7BFB2AE32E9357C7766528E9F74BB8D0B9317F02EDACE2033B7918D6B
8616F1C1B3E113B0F77B0A1292E41F8353DB55EBD872290491AE1FBE95EC034F
DAC1394928930EE297693598D97EBD0720A0A7B4A5DF4EF4BE0E2E0968E64CB8
167CA1B8C40A779023AB6F74E0F1626D8BFFA96EA09CA88524837B18DA6152A4
3F0DC3C3958EFFF86B07581B416720FADFFC4AD35F1553A18944A6DB8FAB0AE0
A8118C09DC8E905CA32904B44E0541FCC7EE555335E61108D8346B4EF697DE67
7F67E1E4CF0EE2F6D89D10FF2D115C6F8163B8180378018F58C148EAD188E969
C60B83C7B295F30614B93FF925BBB2974B0B9C68C2BBA6E973DBFB5500A574A4
F7348BD31C735A1E57519990582D8F7D97F8B63D9DCD488DC569D5B392FF26FE
F06F9762956D64E9C258EB9B90733BAA8F1912F3B9AE88C6D14DB46B7131BCBB
D47CE60D9C63FE0B9620D03F615EEDAA3C76A7285F9897A0D476F35F5CC158D2
D148CA1E5A96D16253B360F34336D476FABE9A434AAD5FCF65A27F48C5BC3519
DCBC35DC1D324A270996B8DEC6D3833E76A434E05074C7E3FC8E5633D6B25B7D
69D9BF7039DE4E755A7E3BEC8A4E5929A98FE265E742B269666C75644E53E6A4
C5AC907F7DEB319BC88CD1A7F29A0A4D43D471892A674D50C70BB6EFE5740F97
50522F2EF056E208C0134EAF15DC9F85C7C06066782B715A5EBC22AD414A169D
86A2F606150B6F903D3AAAF44E75649DC410C3B8C845909BFC8235E573A2D291
19440D724C960014917EC802414651E298160EA70FD54BE4EAA1A1007ABDA8B6
085A89221C3DD5E9C759C19BAD6EFB91360CFDEE6C4876AC19B4BF67A38BBD5E
0BA20996BEFC1F8C427EBDD666B30DF5A2389F1F3BCA17132FEFFD3231570AD2
61CB33381A0D2E2FDFF470FAC3A60E61E99C76A3F4A6BF32FD4B2B6DB6B27F2A
76A5C35E24E78F7DF28AE1B7D04A71097881CB67E060DE537C1A318B95964FAA
1455264E48DAC7689EF10905E381C569DD65825089EF325595388FA5BA6A1EA2
E2536872DE92D46AF3BB3F1DD920FBAA4481034DF831FD15C01798AB04A73B50
1461BA7298B2EAD460D6E645A9ED41EE0E0282C335AA716D7563AD7CFE2841B7
0C782ED3F6D31871350A12A41AEFE21E9A03DF676671E4C953E51F801CBEE091
BE0B7B413B7EA2479E2529DE9E49C03CBE8159DB1B28D2E290826B6D01B35DDD
083F85E9CAE378C1A3B7065280D9FFEB04A02B76F1F0E547328F005CBD39936A
5063812D1C958FD4EA6BE9FF87E5FAAD483055819D1DC39D31B8417B44F30B50
EC95E26103A0DC2241B56DC62D424438A5FDBA8AD4D9B417F0DC31CD82DD772E
FEA23036A719927A4654876985FF4AC2D28A180969A76F3584D001A2EFAA2BB3
7F0CC228CAD9A485F3FEE3E0F0059D3BD8484FB97593A6EF08F9D352E3860613
2617ED6138ABE551DBC67F0151D0F9CD83A613C245E23FEE6FCC8858592AB43F
8E66FDC5A27F9312091478D102BF867B320431F7A6EA42EA763C51FF7E0E0FED
A6A830AC95600C837033968174A9406D0DFA72FD65ADF153E5CB3420CEC76A3B
43DA6743F24C6CFE0E9A7E78D540385B657CCB379BF5E238A07B836F907017D9
C0CBA503FCF625536E27B77A262A0EA1C3DFAB015EC859FFE5BB26197A05F4F9
87046F3AFD3387CF1B040DA7B7CFB1EE92816C7C172164CBAE3E9204559C2A74
87E4A41AFB16E7789686047067947F41C82A26E3F343E7359804BFB3B7904F4A
12FBB7EA0E8C26801ACE0E9093D7E2C3E288F781E3E6A53B8C121625CEE7354F
B1A059AFE21AB4DD2B43A9DA710F2D811F63DC41699FCC43330DC7AB9CD10F00
C959F73155E9D63EE7B20970C7AB1B9A8A51D0DA0ECDB917291FBD57CFAFD9F0
E1636B9DEC48FA7FE5B225283546B01ACF3036F1B5F399688F1657E41A5F4EEC
2CB1324C136CFE6C6B92958597B952552EB7A8D58BA7773CF685FED451D89392
C290D38D67FA7519ABD024B85D3002D8592C5D30B50726C7BD17577FDBA79E38
3D99B3A08797696E593C0BEDC50706C986E6BD05AEF30108F4BA192E956D2942
72F59E1A025FC31568C2EAA1D5942A479203EC01B37626F1EC334DC3C6527C06
41162B68D66E7923911921E861FECF78F36E4BA60B4FB8554E83AB554054B2C5
8C05D3FBA010846BC5B32E9ED62C6A0E8D92B8F3546CE0406A87634E2D96F5E1
F007DA0161E75DA55FEC10F7564CD7CB9AA0A016438D082D9A9FD107CEFA7B27
BA3C61B3A13D9A30E4BAD25B2FAE3ECE3FEBC9722B448E3AC5DD9FF784718F6D
DF58A8A7DA91086BD86AC776CAF3F4F2DBC2F0AA81600D53D2A0EB178568DD96
1ED459E1CD3D897776901284DE5673813ABA0CA7ED342130B261727DBAE566E5
F57FA86A7B4EE5F48F039FB95D318DC142E26022D7F85B34558E99078C5E6467
FB2ECB21BCE1E271E22FFD2E71F203DE5D3BE3EE5DC01A9FA9D3E4D01C0F12D7
D430BF07CD774516464C6FBD414FF6F0C22B9C02C7B4DC659BA3D7306AB4EA90
12AD3D9EF3C73E567590ADB3C6D261F650E218E7A87DFD9185BD17E8FB9B8AF8
5616C4309919470B2E01F294D6CF5A8D89BEE7B3B199C4D935EB8F12308C4610
01A5E4EA5AC9E47B414B924B518F44461695BDBB493256D530C80A2A88A2177C
7389DB61382349231040253A36E9C91355A5F712201ECD1C786660F544C3116B
A0993F9C043DFFAD52BBAE21E69799BCD56EAC612B22742334E801FE3F6789D9
E8B51FB66F3A3994BE700FAB60C8433504179D9329E6662652F1C6DE49CD8369
9CAEAAE9C25FF0A986CD5B91A78A7B281FF724201841CA0C0D9D48D68AD9C991
4A2B7D515CDE867B33DF058A239E5FFCDC44E20149C02C89C5B87B075FDFFEB3
371700E036FA0A232D1B534C581C33583889251B9F3E32203D8FC328299D6093
BA244223A74506D13E1CC9716F496D50AED48F058071D6AD036D571F32185338
F2A6793724E8FB850E9A175C83CF701AD2876DF91DE0D9DA7C3D13B745367D96
22E1B8C006DDADFFE4804F83FB3BCB48544D0091684C1BE9A4BD325AB959050F
2535F50F12B73DB7FFB418D7D6B2CAFCFD5BC761EAC675E0EBB8A23BF332794C
2D67F4974EDEF1EBCBC5FE26D62FD71DD749445960267DD18322626F84416B78
AABA54E6DC8181CAC0ACBC66952C4E96507800FEED6D7604834A14D9499F5D7F
D93E31CC2152EFE43CD355D981F91D774689EA589E542F11297A430617BBC177
2AF03ECEFD7151E6347343F6A12CCFF5F64FFBBAD48D8A806C6E563511C97581
7D4BA510BA1B84B72FB495434C2C07DFB05F8BA0CB099FCE8AF1275AB983855E
3E61F8B818BD04B15533479FEDAF2AA4CF1A0F111834BAB2929A9E9B67335F5C
085B13726B55EB619D2474BB50B473629FD0ED9D4987C17A36CD0B3016F479D8
EBEDCC7B626FD5F54EB70EEF08006C92D863F9623F50F35158EED0C209FB9D84
45BDE42A5B3F1FCDDA88353965D55AF0072AA1278B3CCE16218C2B393263FBA8
2C2210721E5B8A92633F6E19EA3CBBC54CB10EDEB70C4DC00502F8C7B72BCB5C
12EDA943F183B470D7878B1911583199701BEAD17F5C4A5481BC27597DC35EC9
FFA8941D718692B0B33DEA798101DAA470BD4444CCE1FA857E6ACFFF8B860F75
CFB76AC54708C02584E9FC8AF486A9D16D6175B87DDBCE0F270603A94B7612D2
65181880FC339C100B1A7EA58DFF7C64FFF8FF24790DCBFFEDB4AAF033B93215
8367CD9A9AF44E12A8EE4B7A2DCFC02C969AF8FAB72C1A1AAFD91C36173D7AED
B259DA94331F79CC0698CF95D14562D88E6BF6C99743307FDF5269B44DAA11AE
2C5505BA70F9616A855D5A75026005164BA2ADA6279CB3664A23B3C5A339CE52
D11627E92365C39D4CC02D34F9340F4A97E6E186FA9C52E9D7086FCFED0C5319
C97670CDA4461985A2553A7E845737E04268AEA9FD26BB8409D145E3ABDE88FF
2730DB4697F637CCC4F94F633F4B6F1D352D5E6E192932120AC10E0830B436DA
B474789F08F51E23D3DF5867A64D688F5A671E0D025FB5217B919B0C8E9154ED
43BB6B3ABE0AECE3A74A4AD8EEF54C1AD48F8B63525A05227A52E33D81C9D531
9FF9821CAADCDA4157F8871CC1DFA9450E12B9996997BBD6A3A399C2C8461B38
8D509B501C34B319E11FC9CC32116E9FBC913C73E80797C995ABA622E8D8BC16
27AD703EE7676F06CC2BAA648EE5E0C04156DF21D18EF62A577CD2F9056A5A6C
B7EABD639EA8115274A88C57247A82CF44ECFF98BCF7C128452DFD54FF9590AF
464D0474E06F30DD2D82390805F4703740FB5BC6D0807F83F866A06302548ACE
CDCAE86F789563
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 67 /C put
dup 70 /F put
dup 72 /H put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC15BAA041EF80C5BDC12EC1F5786BB41A5A21
073EE0BC436B346E014DB4099EDC67BC432E470A4B779FD556341061CA3F2BE8
EFA332637AEC878C2BB189CA3267B2BE5B8178E6B7889A33771F86276E6F0B8E
8E93B816AC7005575762EF4DE45E2794B7322F9B6D8E634FB8FF250D638EB502
818321B3C46DB51B8EC6C2EF1D05C716519A3BD6B12A67239898F8A011F1C027
D16DAA270C9C1A43F6C78AB1B48D7E1397D4E11206766312FE29611404794589
0761213CE95AAEED19BABC36F185C4852A4D133C2DD1CD525F49FC1ED23135A6
08C3AEE445B5DD5CD1E241581CBE08629941FC585252B3EC6A33E1E31FEAF580
ED2A51D9AC3741DB679B9F3DA63F31ABD8FED20338DC4CC18F7B1C8797D4D2D4
3DD47D3439CAAE8EA2D166D5507AB790674EF7E9B992EF8AC2D435AF877BCFF4
EEA3D034834F38D135C089E11EFFB70D4282701EB5A4AE32EB324DE5CC02AF4E
2E0F568B1C64C9A554DB9DE93FF3A5158E40870A6CD336077F51ADDF7DC9BEC7
DC37E6369E158647C0B64A47F8ED58EFEDDF65FCD1A2B2B7C9D48D43F96938B9
BED527A453237F4E26B66E07B715A860933C9495F306E113D07CD76AD0FEC9D5
5CC403F3BC781D56FDBB9F076C3921B7EC1BED6EE3898800CD3FCE0285B9BA6B
16CBE4C114FCB64AED4B3FFB2E10EE2D556BD2709E30425F489FE1582BFAE740
EF719D1C90FE5DC53516C94C1C537657A302D0A512C9965CF48DD0D7DE67265B
B9EF27D6622677608FCD04CF9C4598EC0EBB2FD0BEBB99D045C051448EB99063
6C273071A4420BF8A020BF87D94B62AF6FCD0BAEC73197445099BF1648857492
DE69E3C2E5DA82FAC3503223E188A724A0D2F826C0354D0AD11853563DC3DC7D
F73033DCFF7871B334DC1F005FBF45A64F43BD37E570D6EB12162C6EB32EA5C5
4DBDA71CB837ED53B166241110674EF8CCA952540C8FDE0D18DC799963610C07
3A503922D06B464BC6380725ACED690BB3268F57F24B23E5F7C0798EB6FECFE4
D5AB7B5B6F51AF14503C9034A43790F337977413019751072A61AFF2F52FD80F
67AD3FC4A0C1B40E3F5C181D174A1A876DBFF71E0DE856382D255322ADDFB254
D1216FDD7CEF46BA6615CC18E10CAFB93AF549D01FA22A650F04BF5F60C692CB
282B29AF9B32D11D5A18BAD5D421FBF87D63C4859EFB6D91CF1F053D8A509D63
B2E16D631645FCBDE894432373091B52E27240AD073A5A6A9C13AE9CFB63AA97
C20CE4579B4CB8908BCD92289569152B3C99137E42CA087949F7A633D4E68FAB
E16A78072DB60A8324CAB4254ABCDAFD593285BD324CA00A5B5A39EC2ABC464E
E7C8C6DE6866A9E8C41CE8011F95BA2EE3C90E7F15E163E0BC619C8036F6BE8A
E7D4FA9C050FBC7F6D66BD8830DC05293006F178F647E5C6317F18CBF484CB72
A12FDEE69984A8226DBE714490493756A4D734D792113AE4DBCE982A0D364614
84696DB93ED29B7DA200BF18C6EA190FA888329F70F745D91BAAC40505F231D9
07B22FD5B72AD063DFE917B114BCAD12202447C343BAB5CF84A9834A33395C0D
A21B4D4C73CD10E97CD06FD8AD43D5DA79942700A7D253E1AED5C51896881C95
C05D86541B735ED3B4F9208C272FFBDE21B0CCCEAFC778214D80BC05219708C4
3EBBB35E76D2952F872160B889BC219F6CB27D03C8E6F080EF768DD8C7B10D8C
A402196823B37918C115892594153EFBB01DE21236BF4608C5BEDCE2BFBE7515
880F6CAB02ABD35FD91AAA2B3A5BC440AABF752623B42136D1FA56F494F98FD4
46EC5091092C9D0D4524C795E0C9709DF0F438F4CF459E19FECFE3F8C002FC8F
6E5026E6346C8DC65227452A92E3DB1967E50EA43128965BE49E2CA3A75E9EA7
E79B60454DE8159E78F3FC0C197D14FB07776674050301230D414A1B7D48B1C7
3D5E9B552D99D8728EAC579C7B907F3809572234E75C18B5AB596F20A6B7B968
B068475CD80D589F39D4399A6ECD2110A6C78EBB6EB9B3A0702797D371C2E5CE
535195BB21694B60ECA42AA84CDD6A45923C3CEF3DB0D613DC74EBF9846F5E52
14C58A551C75C5127356E44A5E41FF25BF4E2DCF99CB4ABFB9BC11598E8D30E8
50E102E393835EA97F26295985F446890D0334D791B1A8B241A570B3FE244D0E
568E96933E19DF75FB364AFEBD9EAF61533695D9270E52EE7902E6FDB7BEF6C1
BE9BC9E2DD7D3B904FDE20D391B5FA80C912531F30771931CDF993588BF8052B
28F7AD4A057CAEE10DF9FA2E7E9386CA9414EE93BFDF88CD3AF694BA4CA497FD
46C0FF49E97BE3ED97A5E7983C7CD9A0BCA32B61AC9EE0418B52A9CE899B884C
F5530EBC17B7A8C9604C701FC3FB09301432FE13EBA9A8B16FC559F58BB2AFE3
0D3CE9D12D9ACE5CB0D3AC75E26BB1759E02EB738DF9C40AF4417306E5FBBBD0
4C44811854B9C99A4F145077AF965E2FF1E98B84A6DF735A6773901D993E27E7
3354BA193B111C2899AE9E43ADC8300527400D635D439CC3EFB5381856F76E79
000C489A7B4CE49510025DE23A2AA2135D309533324C7AAC6417CD0DEF04DD20
6930010280ABB3ABCA3C6AAD4E03A82F6263C9638F9AC4901788EBD86DD14BFF
00502FB94D4D57AC5040ED99E693BB159F412957CF84AF62E276FD79973E934E
8C417463F8BDB20570CCAD9500CF33EA20D7912C51301F32DB4506DE9BF521C1
0D623D7583C3BFA643A9728B3043638083200F8FF072E96BC73E085668DF0703
5CC93058B9C903959861DE0AB76FB5B9EDE384BDA075AF7A2448E4ACB7050186
079D937C25C6AADFE5C5C9368DC6FBCF94A2FA35405E9D5142BF0B28E914E84E
5371D05AE7AEF55FAEFCCA4266B31B94126A2CDBEDA007F8D26A36F356CF48BB
3E1DC9E3E64739DAE2F658A6B7F1E881D602921734C32198FB1F5114C1A218B2
E12A95A5C4D6054F6A6F90927AAFDC13398BE6D23C38ED781C1F94DAA4DF48BF
2D8950492F3FBB2102F270D3BAA6EEC2277EB7F0A38C66190FE4F02D552C1789
DC6B3F1FE2CD26CE020092C27C368B9061A59637582E09573BC2B79CD050513F
A4D7826B4B00BFC59B3AB72B09225D5509C8C13982CA2C5215DA405B8F1FD503
7742E7FF5C26FD72237390EAA1D63A6418DB55EC166DFA6511C7C16F30C43B1F
78D76F32DB37579A02D034531E74835CC6E3D0C23CE8403961CB4ED01E8BC4D8
FAD6EEBE646050D407C544E4E63A3C820C14102E59CFD9A54906B6CD0B70EC9C
610BF7C1CCEF1DDC3B6544B7DA396AF27A6BA43AAEB34785706D8A03B91B6DC9
3CEF8470262D8ACA1551A47537FB35C701AB773780A8BA6A995AA88E20CBE603
329148D50463EED7086E0BAB8D3CA2190E52349CC6763A7DE936E6CA463779CE
50BE66B766C7BC48FD1C001455917C0F00C634CF9E8BD57C28D49D4CEB633571
64DCDC261AACD6CDBF890C3FB410824FB4D4F6A50876BF53D7D103D331120CBE
A054D5C6E4033F892DCAB0A2EDC30E18D6613D4CD6F2DEBC6802D49633CB4BF8
8039971CBFA90F1B16EB5D2AC70519A1C7872DCA8601B1DF93D06D09A4D91A80
63E71A7F275B74CA9D7CB4B55C4EAD23C71ACA648931F9324E1D5E4FE9922F35
031002CB5AAB086F77E1DE4F7BE51C0D4E3A337F7BE0E1B7D3FD44C31DF700A8
6FB108CBFBD0F3C6E02CDB8FF1614A50B68BA60FC849795C6BEC07FF70EADB5D
360EF59DD9966ACDA99B507DC2FC9F372E24C97AC474857FBFEA48518EE6B96F
26973C7F2A446661875C14C75CFA746D0B301E5424E3EEF9E0684644523B37FC
94520938849040A1680247C02A5E17C89E184A568C93C007AB20F7BF69B07034
70B136D10DDB1492E6DD3AD9BC73D8EEFB1CA1EC5905C5F26A0C9B099A7AC41E
1118BCA96ABCCD1B46ABBF6C2E78ECD85BC71F2D638EB33630B26F97D9AB0732
6F7EDAA5719E82A2F64DA15E1198E4FBA6765D562281B9658C87D9702C06ED45
DC761B7C0ED62ADE41B92D9A793E4FA5347199801742BA33CB56D1A4F86B6AD0
8FCC8EDAD8951FA4BE0A3EA5EACBA1FD3AB655F85C9920071F6374ED6AA5E28F
42799266E8ECCBD8B85D4190D415FDF2F15D618014BBAB3D6FDBE2AC4DC8D1A6
F1C56D88BBE8EB40CA72F01B54EF49E3A27496769E19A9BF74690D6EC8814E58
0C6007234C75286291CC0D04FC8AFDD2181C237FE2029E5CC82C30D1F836A758
18F1B1007F409C85EC086FD9C430D81DEEA62981FE10FEC4BD3F3C79A55C316D
C99953C069E3F0B3DB7AE8AF805D633747E99D72BEF269816CA590B3E9F6D24F
2C44C6FCDCD303495C32967B91C34730087046B67324B9D6710DE3F487370843
E4C79B9948A960A7079568117C38331EFA1193F239E852C5E756774E2E96052D
D64AEC028BC6F8AC3D0001156127CC94DE49B00227711F3B56F44FBA7A0AE617
DB51341B62B2D15DD0ACB21B96A02739416D40634242449E5F18FF7A00C732F9
8C832A2DB2238F02E87AB2BE5DCAC57BA8E7907F8DFC773954B7AAF724E1F9E7
1BE1A696B37ACE6863D6490C17321EBD2FA2F8980591CAE5FDD40E654082AD86
EFA460E2B205CE6FC35C380830591243DF72B7958F763828B23FFBCF94801802
41B8B7BC73BA7E8F2EA7E5020CD8B39A17299548BDEF02D7BA47988C11F38E81
62CD932E8A8CE59F560D321190D955D1774250247755392D57906A0E1189304A
6715368A3CF6C7A4E86D6B2248AF003351D89168627792C0CD2DE0C71635258B
4B35ABF002DB75D70CF9F4A9EDCCDEBC28FE76EBA1ABC499D7DAFE7AA2AAF8B3
BE33616054A3C8B986753E261F36ADE3FFA8F5813FCBA7D53B3B4516F5B5DF3C
97616FD59BB0535EB18FA79882828E95E8B70AC38E3002E7ADE4ADA071137FB7
2528418DBFF5B240A6CF43B9E10FFD5B9FE5D0510687F17F12925352864D5593
D7E4A28B36BEA611A1894BDAE0F073E88ACAD7B2991E75D7F27B8DF1CAC07C34
D3A3708F8D438B26E78326EC63C3C8B70D317D45DDD7B6557C9F2B176515D9D1
617497F24C508863BC596A842C9C25D3E4467EC9CDCAF9D2709FFD9569AF06A7
08F7CEAC3531F4E52285CAA05780A3623B42A96176443E37650F012FEF460BB5
F29BE79611AC634FFADAEAA3BCCFEE40D5DC852F135201EBA6D7DD280BA57FD4
84A266B95F111FA0D3A1BA1DA93F474AFBCFC419AE7E27EF6EE764E0B6E28C0C
8D3A65324E354D9D983604BE97932345808C5C7A1484C892DB0E514593261D34
E50D87278733B7BE39CC1050DBB94BABF6A16B19419385C5B98FE6579078801C
5D5F0BC58BC5266CA113FFF37EC456DFE92A06149772AE9F3848EC6EFB800871
7AA8A7F59798256EBEB5CEA62B04FBA76545E4A965173ABE4637476A4E2A7DEF
0C695388BF971E3D53674EB3F823B71D3F6CDFD3E844858578B0D2BB4B0DFF56
663379B4EEA089A641141A8302EAC5E7BA785BFC7E5D9D2068D554E70E3EF5CE
FA808B8A56A4741DB2BC068AD32CD9B9E1BF288BF8D6BF942A4E25E767EAA661
FE7D184715BC5A0C17E7DE8ED3E42ADBB1CDDC7E3D250C8EA4BF5894F5E2BFA0
0CD70A7549EAE8891B5FB90D0FCA22B640D87E79D2DA533E88A5FC718F1E407D
F37E4DFFD0BFDD34EC7D7DDA5B90BA00CAE25269B8FB3083C24AEE1DB8C4F887
C6712EEEBBDA92A60221C7ED730128B257AE77D2BBCB84CA9F6F1A773D5C2405
B176C9FA61CC0ADE752CF568AAE8D9264AF9BD9F116385726E901D00F48197E3
CF5CB13A7A4AE3F516318C107AEDCFA7C1DE0BC89F0EA5220409F0EC6000B3A4
D8CA17A00899E89A43B969B1FFE8D80D2B1A874662795368D2B1BF360AD1224A
E65CADAF3575C5DEE88AC262855FE54E3E2C5AE26C16636614B75D97F2B9FCC5
3017011DB701D79EAF656BFAF842B9ACEA2B01F72D2A70F225D38157F75C93AE
526891AC5A2F87E341DA23A54751A89C065FDCA7C3787FFCE6D7BA6ED591BB35
0C2ADE0E8A3ACDE9F8841E3FD1D7742F4ED6C9DD10E934EE9F0180095C03E104
F607D0670155C4C8AEC3200A3BDFC8479AFB92ED3331C3C59AD3884DF8F324AF
3267B8313BEEEF9CCB48666A9E02B4CF9A698D5156040B7E72B08AB30011958A
2298EEB67B004B7AFD9B9BF6589998C5E594E42AC8F5EDFA4A317B175B86CB9E
68AD985F6C606372AB44A108E400AFF8DBDC7BDE8FEC754DF57F7F3B1CD58519
2A089930AA616354D0E6A5D541D623C87D9FE6DC265F615E4E33060D352412C8
DC7175F8E62AF068D15CD672101AEFCC123256B24E77275E5C34EED0A576C772
8C94D0E457EFFF623DD876E6999C0C11E18F69C30C4C470313653E08FC76EAE7
DECFEE69AC12411769E1485D2025C4FA6A27E4388C3A0ECCD01DBC0073231C19
BCC97BDB48B65669A67E72D51F712B66BAB7F96644511258EA2BB260EEFF609C
335CACC2FE1104A2DAD8B109C684A09B2F5EDF1F102FA22DD9975628DD30A5C7
80FB0395F456B90B46AFD15D224824A980E1749E4C0EAEB144A86B20B35A7287
D9C4A3C9EA021690EAC5CFA404D42236FF37D6CC0DE6A3145C51C2E7C097447E
DADFDB0827DD693CA7956C6F1D5E59EC60F72C30E297A73E1911833767B6EAC7
8342DF6AD819
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 68 /D put
dup 72 /H put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D72541D3F17007CBAB23C8ACC305A655
BE646A9303F9D2FFA3E7060B7D0226EDD997605E246BFE131463B8614464591E
6601D3D82AA8ECB4A5D086186E1DFFF29544E8824846B1103AF9020E4BECA197
ECDFCF9D11226A166E00E2B97ED408301F506DDE2F8FEFC3715A879E92076BCF
E4FCB0866E90162FCA5D386DCB7533A108D6CD6F340606C967D2C7AEF9DC9721
70CBD5B8C80162D2AA107539C41B566CA52C5F7BF79D0C01AB5E596553FDCBE9
D533CC91245131109A97235A689D6E8E0AEC0756D01B52ECBB3E3ECE3B5EB4AE
F25E715AB9084738FA98BD0CA3636B21D8C5045784C4ADEF65A7B4D0B5A8F759
4660A0DB6D2F0C54FC5D33501BF43F8EC5EDA3BDC42B5E33D62589DC0D544CA7
DC84214F943143527CDD7176ABE4F72E4405AE64A1DD61C7C9CC5C2CA8CC7615
11A6F6A9F283DD779726449366412F6A1D34A7F67F3C3F887DD9E40B72252CBE
2B5934F584E350AEEBAC633C97EE950B9523C81D25E4F2F8D6F74BCCF5FFCA60
3736E6D3EC16B104A9C9390C4752BEB8B2E2BF7DB2C3EFAE6F34282977D01CEE
41AC0709ECF48C4FD2CF7C81D7BD084F0176DA58CF1664CDE2F262FF63FE4BC4
B90B443D0EE727B42D7EC73B6179569FE597883619B62F91B82BC27DA3F99C50
8BD8F7FEEF48C936ECCD70BC625888B594276F2390F9EE435AFF999A607BD832
B5F5AF1EA6DA15846566B4F90FB6464F3EF217DB6757A0D06F8111E2A437918F
42D204F4A4F550EB09EB9949278EC66B4AB4B6B34546F3023594586139BB56EA
0B1727F61360FAFC9852F5F53F7B39A1BA9EEEA8A9FA3316D9AF2D788E4A6907
3CA784D1CA7DD7DE1E193B65FC63CD6726C22B661A57511B4139519FFBBA73CC
0A7B196C3E9E550D755E0D56E6008EF2ACE1680860B673F4E65C82A10346E3D4
7EEACC4273608C5F2A7AD9076172DAA8F26D2A193BECE5C08644676D8E33D1F8
1DBACB13191ADF1DB0DEFC6C5A53B57BBA95BAA25C68A13CFA830D512620AE2A
5A75D0C4BC317326FC733140B7C3D5ECB76C3A44DF3C57A7BF75CE5E14F7ED8E
653331FBAAEC14D976121230E0E864F0B0828B5B9863F87CCC121FF39C210843
4520A19501809FC6EAAF2D6DFF8A36587311086027A31AFB2A6767D524C57FA5
193379FFBD21327849B470854BDF20C22B1EA12CE67CED478BEF5D8E0A89463B
ECA0BB423CA7C5BC562642F10EDB49056C2186C12A07F04E8C16F666880890EB
63EC631345E6309A099A14D5694EC56CC8CA0263D440D5372941BB06AF5AD0E4
C61C98569235DF923A9235D425374DFD8701CF30183AB83A6854049896CC561D
93687747C593BEB9A01F5024C51CA1FDABFFCCE5EF8343C9BD44C7AA4942A042
6656D146AAB7440F186D87E7A38B24E1F802AFE810724023AEECACD99B2F9B34
5FCE0F990BDDAFF96FCC06A43404B25129721A962247631D582175DD4A004D7C
2D7ED356D607025BBCC6E451CE7D7B104D006C20AD9B620C061E6F0F38102B03
EAA96D0950D9BBD0A4C69F131987C73C63F30F57B539A370B7DDB14E6890F5E5
EEDA707189688880CEDFFA8C6E0FF6FEF631893104A346C9F4DC16D1F98F39A7
AA48C02055FC1DC19E9D2CF61FC2282AE44BA6577043B0ACE1126ADB66047FC5
59E83C8E70E0F0770528691128B0585B6E9D485EDF7E845C780F0DEFDE5335CB
389A0F84981646766C4CBCF1847FB3040235C35772D0B865BCB056B1984C4E29
D64865EA055DA7196142C3809D8638958162548C2FA82399D34977A8588CE104
EEE932F64719CD29F0EBABECE9F44468ACE82F4577F90D58467A3AEBD0C7AE01
EF572EBF6EEF053629AE5DE30965261F59344E7B158513B87346FEC4B1DB1718
3AF31196E4B645599C61595BEC495E87FBC5EC820AA91D4731E1297030BCDBB6
E5C7F0A2C15CA4400BDC235FF1555C301479941291722A40DC86EF1C62CBCB79
2384154732EC8EA13B311CC0F1938303CFBC5F17446DC1ED61AE9349D73E45E1
E2CFD82DFC7BD816648322CF223306D364F7B6A7CB753F0B0766C0A06A2084E6
E8E2C7508B01A4B7CE9AA05ECC21D556A8459462592D475668A99DDEEDEF8943
CF23B38C71E002B259FFB3AF0DD4293425C4456F38C6394347936BEE0542866F
41A63297C94F13A11F0EE3AD76DB3E9BD88248E4C1C428E7EF5F7A9AB5A93FDD
9697A6721760A424B0B0ADC7532C33694AA6E8A8E59BADAB0D5B481FF0F597E8
70FEDB0547A17220540B8DDDBD384DF5014701CB97D212238BFC44DD1269301E
34BF956D6645956F683379BC738AC0D25656DFEFB8614B60345426B78F79B55C
905631D302FFC44C793470E58E1912BA7312FA94E1F7756DD6CB486D80514450
CA63727554E9BDD98ED8B6D1835C73E1C4A211587408E257EBA3C53D3F8F88C6
674E468A851BC73D71D6011FE41F60BF34713E1A6832A75852C0CB80B2FC8BDB
635EAD5A061A588D727B2176643C93ABE309A969761F6A1B28043574277F3D54
39739F5B783AEEF8620DBA3CB720CEDDCC7A3339904E68FD231715202F56E9EE
DB0263E4B2542969B03A98CB071D8E6918FA93FC30263B8B54AF40852AAA055A
1C261425C9773E9491A81751825A25026AC5B3D16FB8389E47673FB10B17985E
6F3CE8B6695BA86D817524BE0BF2E2AD94EEDFC12DC67CFC14D728C06F1AF146
DF0C6FDAF2772292CB3FC82C7028A5BF574615782EBBDE0E46B362E1D0532D27
F6489B78FA789D1DE919B3A4C7F96DF1E485EE6FAF1D0EC0FA956F283753B645
BCAAA542EAFEC1F370D1DA057DBC187BEF737B9FAD81CE449F17292049E03770
FCB34CA035445B4FECE38D930C08C990AB6B60169CA12DF334A7E758A11B159C
C16D99CF952FD9E35ADEB24E67C6A6655336FE1BB256E799922D0E28ADF9BFFE
2200F4619456434249320CE07DBA0453250864C3BF4E5397FC31E9D71A29D7DE
F5624758D87D0F19030CFD65E26600BB5557532E8E6A8827EB26F4A98842DB04
CBD9EF741A5C45AE186A2F9E2EC2FD2E33520482A65772A25726F955330298F5
BD4AAAD4D5A9AC00B216907CB544DB6E493FBE22E41146228444FC2B823F4FE4
1F5BC2958ACD192C78F400F6D9973FAA1DB7531E1CC37D86B936724DB14310F2
FB867353496A1F49B8EAE61A1943F524A6DB803C39A83BA155748F98814CBDE5
6802C27B2E9692DB5802F2DAE1FBBAA812A8DF9FD0A4BC2BEA53D24C780ADE3F
D350B465BE718FFD66C81AF9189E58F16959D4D88A602790EAB11138DF46AC5B
0EA1FB8E191AF6662371F1AAAC0B510E670506CFAB78270D2FBEE37AA2969C36
B9DC37E723A8B73D60AFB8854C757BE32D2F2F38FE24FCBBF2A6327629CA13C2
DD515178EE8CEF2B4A2526FA941C2E692A49D78F4F26C13F8CF4E28E0DFA566A
3BCE321747C63D40327976845C572CD92568458B8EDF7AAC7100E80C9B7E0D3D
CC20E19A53E43178D5CD0FD10FD32FA1999CB88E0045D82E587FB8EC399CAF43
C032BC31C4152E94F44DCC8522ADDA0D89A32B0559EA6A112D3033CA3E83A4EF
17F668111AA275F3CAC3FD6D11BD646F10AF00C7181CC57FC8A83BED12CE0658
2A16B5CBC04D89B367D2224D8EDBB258AED2F7AF1E7819A1DF905316C7438D43
66B818EC295E08FD7E7042D2D82C4B58BBCDB6A945EDB64BFD45CBE68115BCE2
FF897BC5921BB96BD824B1E16AC61E79C624948C2C100FF095D1674DF2054232
5B1EA37799AF0D8B3449A1AC8466C1CA326B486E1546BBAB30F019AADBB8BF97
98885DB01BE30D387C407AC33B118B659FCFBE9174C3054517A75B8CD2C35AE2
3197688B26F0FC78A46D1361EA39BBFB3BBE4BC27CA8AF2766EFB7E25556F868
419B39BCB159F76EA62C984E52581A39FDC47122209ABC59734406BEA89E20C2
9BB806A2EF0A6F94EE078C9CD251BD3C217692FD02C8DD057BFC92BEAC36AE25
BED66D92CC5AD99AFA8A9265DB616629F1E9EC3116E379F31FF8621A1C53BAB0
585ABDC5C0BEB8472D56CC7E0EBB98E24F8839DD278687A783C671565FEF8DCD
F06AAAB6744AB801A1407E21F657D28726CAD91B9D8634857DA6D74BF820EA12
302F7F59AEC99E9175EF7758072B9652D8E95C5FCA553259629C1D00EE1B73CB
AC5E01E58E91902F8D32649015B1D256299647B8F17212ABEC23BC05AF7D6E84
3A5F0AC3688E4BAF47AA74D30BA3DBA92DDB080EA3A1ECAB0A38FBF9E65665F4
EA7E64BD269A3F8023A224D442E21A4AF4AB4ED68AF473D7BD70B7AB3876621D
5B57EC83B22DCAFEA66ED239546CB44C097212C9635D6A587AFC18DCA934FBFA
C45B6015957BCC3377C0FE10473C56A41C047CA6BB8E399E9AF20701E839ED67
B3931D6A2A36B21F1BBA0AF6F3C15296DDB13A3D2EBE12FBCB654132CFB1030E
034087F74782FF526165043FCD3CE2C4C493012007F22779E359003133CC863A
755A4BDA05EFA3E54B3E9D810583AAB8899B22268633CD8B13256891A81EA22D
12F2455E0D4D6DCBAFEA968230677B308C3BE878B7871EEF128C4E3047F235FB
32FA59C45816D427DBBC98198673D70E3943719F6A9DC18681412054D47FF1BD
0BA636A4A94574AA50C5C31523B52641B228BD459386A906A0A83BE4CD515B39
D992E9E86BB80BA26AF9CFF1A67351895D5504F8A3A28541B1C2CECE3B674A20
51A9370574224A4F0897EE7B3A8ABDDE4C67F2F77007D5AFF619254DC3E865DB
CF33ECB57E8748AC0768D8572FF005972ADA06353FB128E3545FB345B5FD5F85
7C870376AE02E534D33CE7AB288283AF0B430563EA6E28068C43FFB62BD1F338
36883C0DC9AF3B12EBA6ECD5A8B917446AB3497367EFC3064C60DEF2D0E824F8
D53C5A4BA55A1F14C735651C20C1DC2CD2D3EA73BAB53FFDA817FBC6353CFF2A
9DAC967B1B020EAB46FAA1D424F2634E0EE138B8E17673F81096B249BF077615
ECD6EFC7C6270D67E4E70B4A0A9C6DA47B5568CE5BA481841A7DF3DC98FEA4DB
A205F4765FF40FF666386CB2AB42738417A67D3CD07FE4B0BDCC2A8FFDCAB034
91A9C2285F65189047E9F9E6A9403DB8F71719BA661B7C836EF616E2A368C4BF
96079E69FB7984B8BCD12B9174EA72761636192F8D61C8D61111E0649805D8DD
E0A2772C13D62713E8C0317D46AE0F72800638FB3A204FC5315AB7AD4E8BC7F5
CBDD3C1E3BE0A8D01739D0C829B3CBF7DC75E702DFFE0B7AE4306E44E57A3E4D
6215EB612B8B3A2C81F3D0F92E635253589CD18CD2AEFCAECE5F6F6758174FD0
CC9EBBE2FD4AEB4361BFC5D01DCC19B034C25609746A32F4E2A479EDA6AB6487
109BD645804738DA19C020824C3E6375AAE3740A2B48255BA5843989FEE7AF81
ACA1231E0053FC63F226722400C2B6E1AB8BE6A3CD059A8151A92D0300778082
61500C7B8F9707CD35427F36CF1A8D226857D519E941EF2D2507650E6304F52B
0AE34CEC934F99C14E0EB57B28237B8654A3551418D7C8A5FCAED491FC4D6BDF
7623612BECF407589D97B20FACE5C8BE3312ACB7E63D2AD8BCADCA9815E14ED7
74B6DA4F697F4B3D14C449239477E94FCCF5D17A795225B1785049901571482C
16F8AFA08C77B030D8C4140101C7DBF7B53A1167B012714B72784004BCBBE978
7B74B4D2A2B93D535C29AD22432F530B99DC97819037F1613B21D66F9B262A98
CE874EA0DAEAFE10D55EFA09C84DA58B53D4E1D3EBB7B6D5DD04086E86C84997
9BCFD43CD58AA973BBB4995E2809A8E028D4D6C6B2B847F9CB5F0E8765306697
D1EA46ED7D3459659F6D1E1474754F652D3065AD9F35F05E962B88E8F91E567F
285C2A0522F343C3B29CBE2E687EF62B4963B11385A953D013F9AAF5AEE8A1E9
C2BDEB81D62152D5E40B149D3241EBC68A57033CD6A6A12011F647F5F0D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (problemstatement.dvi)
@start /Fa 138[75 52 53 55 1[75 67 75 112 37 2[37 2[41
61 75 60 75 65 13[75 2[92 2[128 8[103 16[67 67 67 49[{}23
119.552 /CMBX12 rf /Fb 133[37 44 44 60 44 46 32 33 33
44 46 42 46 69 23 44 25 23 46 42 25 37 46 37 46 42 9[85
62 62 60 46 2[57 65 2[52 2[30 62 6[62 12[42 42 42 42
2[23 1[23 29[69 46 46 48 11[{}47 83.022 /CMR10 rf /Fc
134[41 1[55 41 43 30 30 30 1[43 38 43 64 21 41 1[21 43
38 23 34 43 34 43 38 10[58 58 55 43 3[60 5[28 58 6[58
18[21 26 3[30 30 26[43 13[{}35 74.7198 /CMR9 rf /Fd 139[34
35 36 14[39 49 43 31[67 65[{}7 74.7198 /CMBX9 rf /Fe
134[51 1[70 2[38 38 38 1[54 49 54 81 27 6[43 2[54 49
13[54 2[66 7[73 1[64 2[70 8[27 2[49 49 1[49 1[49 49 49
48[{}25 99.6264 /CMR12 rf /Ff 134[70 1[96 2[51 52 51
1[73 66 73 1[36 2[36 73 66 40 58 3[66 10[99 2[73 2[90
2[122 4[99 3[101 34[36 33[{}22 143.462 /CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 0 TeXcolorgray 0 TeXcolorgray 411 432 a Ff(Health)l(y)43
b(Dogs!)58 b(Soft)l(w)l(are)43 b(for)f(Managing)h(P)l(et)h(Safet)l(y)f
(at)g(a)1388 614 y(V)-11 b(eterinary)43 b(Hospital)1536
915 y Fe(Problem)34 b(Statemen)m(t)1663 1031 y(Henry)g(F)-8
b(o)m(wler)1356 1287 y(CS)33 b(461:)43 b(Capstone)33
b(F)-8 b(all)32 b(2017)p 0 TeXcolorgray 0 TeXcolorgray
1781 1604 a Fd(Abstract)p 0 TeXcolorgray 0 TeXcolorgray
473 1761 a Fc(The)21 b(Oregon)h(State)g(Univ)n(ersit)n(y)e(\(OSU\))g(V)
-6 b(eterinary)21 b(Hospital)h(is)h(need)e(of)h(a)g(new)g(soft)n(w)n
(are)h(comm)n(uni-)358 1852 y(cation)j(system)f(to)h(help)g(manage)g
(their)g(daily)f(op)r(erations)i(and)e(impro)n(v)n(e)h(the)f(w)n
(ork\015o)n(w)h(of)h(the)e(business.)358 1944 y(An)h(up)r(dated)h(comm)
n(unication)i(system)e(will)i(pro)n(vide)e(an)h(en)n(vironmen)n(t)f
(for)h(emplo)n(y)n(ees)g(to)g(manage)h(and)358 2035 y(complete)h(their)
g(tasks)g(with)g(b)r(etter)g(precision)h(and)e(sp)r(eed.)47
b(It)30 b(will)h(eliminate)g(a)f(w)n(aste)h(of)g(b)r(oth)e(pap)r(er)358
2126 y(and)d(time)h(as)g(w)n(ell)h(as)f(allo)n(wing)i(the)d(hospital)h
(to)g(trac)n(k)g(goals)h(on)f(resp)r(onse)g(times.)38
b(Our)26 b(group)h(w)n(orking)358 2218 y(with)k(the)g(OSU)f(V)-6
b(eterinary)31 b(Hospital)h(will)h(create)f(a)f(new)h(comm)n(unication)
g(system)f(that)g(will)i(help)e(to)358 2309 y(impro)n(v)n(e)25
b(the)g(hospitals)i(p)r(erformance)g(and)e(abilit)n(y)h(to)g(comm)n
(unicate)g(information)h(with)f(o)n(wners.)p 0 TeXcolorgray
1929 5349 a Fb(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 150 83 a Fa(1)135 b(Problem)45 b(Description)150
325 y Fb(The)26 b(OSU)h(V)-7 b(eterinary)25 b(Hospital)h(pro)n(vides)f
(care)h(for)f(animals)h(coming)g(from)g(lo)r(cations)f(all)h(o)n(v)n
(er)f(Oregon.)35 b(P)n(et)150 424 y(o)n(wners)27 b(across)f(the)i
(state)g(rely)f(on)h(the)g(services)f(pro)n(vided)g(b)n(y)h(the)g(OSU)g
(V)-7 b(eterinary)27 b(Hospital)h(to)g(k)n(eep)f(their)150
524 y(p)r(ets)j(health)n(y)g(and)g(happ)n(y)-7 b(.)43
b(These)30 b(o)n(wners)e(are)h(often)i(v)n(ery)d(busy)i(and)g(it)h(is)e
(v)n(ery)g(incon)n(v)n(enien)n(t)g(for)h(them)g(to)150
624 y(c)n(hec)n(k)i(on)g(their)g(p)r(ets)h(status)g(b)n(y)f(calling)g
(or)f(ha)n(ving)h(to)g(w)n(ait)g(all)h(da)n(y)e(for)h(news.)52
b(The)33 b(hospital)f(serv)n(es)f(as)g(a)150 723 y(primary)d(referral)f
(hospital)h(in)i(the)f(Willamette)g(V)-7 b(alley)29 b(and)g(m)n(ust)g
(b)r(e)g(able)g(to)f(comm)n(unicate)h(with)g(patien)n(ts)150
823 y(and)e(their)h(lo)r(cal)f(V)-7 b(eterinarians)26
b(who)i(migh)n(t)f(liv)n(e)g(an)n(ywhere)g(in)g(the)h(state.)150
983 y(The)k(curren)n(t)f(soft)n(w)n(are)f(system)i(used)g(b)n(y)f(the)i
(hospital)e(to)h(manage)e(their)i(daily)g(op)r(erations)e(is)i(decades)
f(old)150 1082 y(and)37 b(do)r(esnt)g(e\016cien)n(tly)f(w)n(ork)g(to)h
(manage)e(app)r(oin)n(tmen)n(ts,)k(trac)n(k)d(patien)n(ts,)j(or)d(comm)
n(unicate)g(within)i(the)150 1182 y(hospital)27 b(and)g(with)h(outside)
g(V)-7 b(eterinarians.)35 b(This)27 b(soft)n(w)n(are)f(causes)h(man)n
(y)g(unnecessary)e(errors)h(and)h(patien)n(t)150 1282
y(and)f(o)n(wner)g(su\013ering)f(that)i(could)f(b)r(e)h(a)n(v)n(oided)e
(with)i(a)f(b)r(etter)h(system.)36 b(The)27 b(hospital)f(needs)g(a)g
(new)h(soft)n(w)n(are)150 1381 y(pac)n(k)-5 b(age)30
b(that)i(will)g(not)g(only)f(pro)n(vide)g(a)g(system)g(that)h(do)r
(esnt)g(hinder)g(w)n(ork\015o)n(w,)f(but)h(will)g(impro)n(v)n(e)e(it)i
(and)150 1481 y(allo)n(w)23 b(for)i(increased)e(e\016ciency)-7
b(.)36 b(There)24 b(are)f(generic)h(pro)r(ducts)g(that)h(are)f(curren)n
(tly)f(a)n(v)-5 b(ailable)24 b(on)g(the)h(mark)n(et,)150
1580 y(but)31 b(none)f(of)h(them)g(are)f(\015exible)g(enough)g(to)h
(meet)g(the)g(needs)f(of)h(the)g(hospital,)f(so)g(a)g(customized)h
(system)f(is)150 1680 y(needed)e(to)f(solv)n(e)g(their)g(problems.)150
1840 y(The)e(hospital)g(will)h(still)g(need)f(to)g(use)h(the)f(old)h
(system)f(for)g(man)n(y)f(of)i(its)f(feature,)h(so)f(they)g(need)h(a)f
(system)g(that)150 1939 y(will)30 b(b)r(e)g(able)f(to)h(in)n(tegrate)f
(with)h(the)g(curren)n(t)f(system.)43 b(One)29 b(\015a)n(w)g(of)h(the)g
(curren)n(t)f(system)h(from)f(a)g(w)n(ork\015o)n(w)150
2039 y(p)r(ersp)r(ectiv)n(e)h(is)g(that)g(it)h(is)f(o)n(wner)e(fo)r
(cused)j(and)e(not)h(patien)n(t)h(fo)r(cused.)44 b(The)30
b(w)n(ork)n(ers)e(w)n(ould)h(lik)n(e)h(to)g(b)r(e)g(able)150
2139 y(to)37 b(lo)r(ok)f(at)h(records)f(or)g(history)g(for)h(a)g
(certain)f(patien)n(t)h(but)h(instead)f(can)g(only)g(see)f(it)i(b)n(y)f
(an)f(o)n(wner)g(who)150 2238 y(migh)n(t)c(ha)n(v)n(e)g(m)n(ultiple)h
(p)r(ets.)52 b(The)32 b(curren)n(t)g(system)g(also)f(causes)h(a)g(lot)g
(of)g(unnecessary)f(prin)n(ting)h(of)h(pap)r(ers)150
2338 y(and)27 b(mo)n(ving)f(around)g(the)h(hospital)f(for)h(emplo)n(y)n
(ees.)35 b(In)27 b(its)g(curren)n(t)f(state,)h(the)h(w)n(ork\015o)n(w)d
(pro)r(cess)g(in)n(v)n(olv)n(es)g(a)150 2437 y(receptionist)h(taking)g
(a)g(call)g(from)g(an)g(o)n(wner,)f(en)n(tering)h(the)h(o)n(wners)e
(question)h(in)n(to)g(the)h(system,)f(prin)n(ting)g(out)150
2537 y(the)21 b(question)g(and)g(taking)f(it)h(to)g(a)g(spinner)f
(where)h(a)f(do)r(ctor)h(or)f(tec)n(h)h(will)g(lo)r(ok)f(at)h(it.)35
b(Then,)23 b(the)e(do)r(ctor)f(or)g(tec)n(h)150 2637
y(will)28 b(write)f(another)f(message)g(on)h(the)h(note)f(and)g(tak)n
(e)g(it)h(bac)n(k)e(to)h(reception)g(where)g(they)h(can)f(call)g(the)g
(o)n(wner)150 2736 y(and)i(let)g(them)h(kno)n(w)e(if)h(they)h(need)f
(to)g(sc)n(hedule)f(an)h(app)r(oin)n(tmen)n(t)g(or)f(what)h(the)g(do)r
(ctors)f(recommendations)150 2836 y(are.)61 b(This)36
b(pro)r(cess)f(is)g(not)h(only)g(ine\016cien)n(t)g(but)h(lea)n(v)n(es)d
(ro)r(om)h(for)g(error)f(with)j(losing)e(pieces)h(of)f(pap)r(er)h(or)
150 2936 y(misreading)30 b(handwritten)h(notes)g(and)h(is)f(something)g
(that)g(could)g(b)r(e)h(impro)n(v)n(ed)e(b)n(y)h(a)g(more)f(digital)h
(system.)150 3035 y(Another)d(issue)g(is)g(that)g(there)g(is)g(no)g
(metho)r(d)h(for)e(en)n(tering)g(future)i(app)r(oin)n(tmen)n(ts)f(so)f
(it)i(cant)f(b)r(e)g(seen)g(in)h(the)150 3135 y(curren)n(t)d(system)g
(whether)h(a)f(patien)n(t)g(has)g(an)h(app)r(oin)n(tmen)n(t)f(already)f
(sc)n(heduled)i(or)e(not.)37 b(There)26 b(is)g(also)g(not)g(a)150
3234 y(system)h(for)g(categorizing)f(the)i(notes)f(tak)n(en)g(do)n(wn)g
(ab)r(out)h(a)f(call)g(from)g(an)g(o)n(wner)g(to)g(b)r(e)h(able)g(to)f
(lab)r(el)h(it)g(as)e(a)150 3334 y(billing)i(question,)f(medical)g
(question,)h(or)e(something)i(else.)150 3663 y Fa(2)135
b(Prop)t(osed)44 b(Solution)150 3904 y Fb(Our)24 b(prop)r(osed)f
(solution)g(to)h(the)h(problem)f(is)g(to)g(create,)g(conceptualize,)g
(and)g(dev)n(elop)g(a)g(new)g(comm)n(unication)150 4004
y(system)d(that)g(if)g(appro)n(v)n(ed)e(of)i(w)n(ould)f(b)r(e)i(in)n
(tegrated)e(with)h(the)g(curren)n(t)f(system.)35 b(The)21
b(new)g(system)f(will)h(pro)n(vide)150 4104 y(the)29
b(hospital)f(with)g(the)h(abilit)n(y)f(to)g(easily)g(trac)n(k)f(and)h
(\014nd)h(information)f(ab)r(out)g(patien)n(ts)g(and)g(tak)n(e)g(a)g
(patien)n(t)150 4203 y(cen)n(tric)e(approac)n(h)f(as)h(opp)r(osed)h(to)
f(the)h(curren)n(t)f(o)n(wner)g(cen)n(tered)g(one.)37
b(It)27 b(will)g(allo)n(w)e(for)i(the)g(reception)f(team)150
4303 y(to)i(create)e(a)i(message)e(in)i(the)g(system)f(for)g(a)h
(patien)n(t)f(when)h(they)g(tak)n(e)f(a)g(call)g(and)h(assign)e(a)i
(category)d(to)j(that)150 4403 y(message)k(to)h(indicate)g(whether)g
(it)h(w)n(as)e(ab)r(out)h(a)g(medical)g(question,)i(billing)e
(question,)h(or)f(something)f(else.)150 4502 y(They)25
b(w)n(ould)g(then)h(add)f(actions)f(as)h(w)n(ell)g(as)f(o)n(wners)g
(for)h(that)g(action)g(to)g(the)h(note)f(so)g(that)g(the)h(prop)r(er)e
(p)r(eople)150 4602 y(will)35 b(see)f(it)h(and)g(can)f(add)g(their)h
(input.)59 b(That)34 b(pro)r(cess)g(w)n(ould)g(con)n(tin)n(ue)g(un)n
(til)h(all)g(actions)e(are)h(completed)150 4701 y(for)g(a)f(message)g
(and)h(then)h(the)f(whole)g(c)n(hain)f(of)i(edits)f(to)g(that)g
(message)f(w)n(ould)h(b)r(e)g(view)n(able)f(in)i(one)f(place)150
4801 y(on)c(the)g(system.)45 b(There)30 b(w)n(ould)f(also)g(b)r(e)i
(features)f(that)g(allo)n(w)n(ed)f(for)h(easy)f(access)g(to)h
(information)f(lik)n(e)h(what)150 4901 y(v)-5 b(accines)33
b(an)g(animal)f(had)i(b)r(een)f(giv)n(en,)h(so)f(that)g(if)h(a)f(v)n
(eterinarian)e(from)i(another)g(clinic)g(called)g(and)g(ask)n(ed)150
5000 y(the)g(p)r(erson)g(taking)f(the)i(call)e(w)n(ould)h(b)r(e)h(able)
e(to)h(lo)r(ok)g(up)g(the)h(patien)n(t)f(and)g(immediately)g(ha)n(v)n
(e)f(an)h(answ)n(er)150 5100 y(instead)26 b(of)f(ha)n(ving)g(to)g
(scroll)g(through)g(a)g(long)g(list)h(of)g(messages)e(to)h(see)h(if)g
(one)f(of)h(them)g(con)n(tains)f(information)p 0 TeXcolorgray
1929 5349 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 150 83 a Fb(ab)r(out)24 b(the)h(p)r(et)f(ha)n(ving)g
(receiv)n(ed)f(a)g(certain)h(v)-5 b(accine.)35 b(Another)24
b(feature)g(of)g(the)h(system)e(is)i(that)f(it)g(will)h(b)r(e)f(able)
150 183 y(to)30 b(sho)n(w)f(some)g(rep)r(orts)g(on)g(ho)n(w)g(quic)n
(kly)g(actions)g(are)g(tak)n(en)g(after)h(patien)n(t)g(calls,)f(allo)n
(wing)g(the)h(hospital)f(to)150 282 y(trac)n(k)d(goals)g(lik)n(e)g(ha)n
(ving)g(a)h(24)f(hour)h(resp)r(onse)f(time.)37 b(A)28
b(\014nal)f(feature)g(of)g(the)g(system)g(w)n(ould)g(b)r(e)h(to)f(allo)
n(w)f(for)150 382 y(emplo)n(y)n(ees)e(to)i(ha)n(v)n(e)e(pro\014les)h
(where)g(they)g(could)h(b)r(e)g(assigned)e(to)i(departmen)n(ts)f(that)g
(w)n(ould)g(determine)h(what)150 482 y(information)h(w)n(as)f(a)n(v)-5
b(ailable)26 b(to)h(them.)37 b(Then)28 b(if)g(they)f(needed)h(access)e
(to)h(di\013eren)n(t)g(information)g(for)g(a)f(da)n(y)h(or)150
581 y(b)r(ecause)k(they)g(c)n(hanged)f(jobs,)i(their)f(pro\014le)f
(could)h(b)r(e)g(c)n(hanged)f(and)h(the)h(information)e(they)h(needed)h
(w)n(ould)150 681 y(b)r(e)c(a)n(v)-5 b(ailable)26 b(to)i(them.)150
1015 y Fa(3)135 b(P)l(erformance)46 b(Metrics)150 1257
y Fb(There)36 b(are)g(sev)n(eral)e(metrics)i(that)h(will)g(help)g(us)f
(determine)h(if)g(the)g(pro)5 b(ject)36 b(is)g(a)g(success)g(based)g
(up)r(on)h(the)150 1357 y(desired)26 b(features)f(of)h(the)h(pro)r
(duct.)36 b(The)26 b(\014rst)g(metric)g(is)g(that)g(the)h(system)f
(will)g(b)r(e)h(able)e(to)h(assign)f(a)h(category)150
1456 y(to)35 b(a)g(message)f(tak)n(en)g(do)n(wn)h(b)n(y)g(reception.)59
b(The)35 b(system)g(m)n(ust)g(also)f(allo)n(w)g(for)h(searc)n(hing)e
(or)i(\014ltering)f(b)n(y)150 1556 y(category)g(to)h(only)g(sho)n(w)g
(messages)f(that)i(are)f(a)g(part)g(of)h(a)f(giv)n(en)g(category)-7
b(.)59 b(Another)36 b(metric)f(is)h(that)g(the)150 1656
y(system)c(will)g(allo)n(w)g(for)f(searc)n(hing)g(for)h(information)f
(b)n(y)h(a)g(giv)n(en)f(p)r(et.)52 b(This)32 b(will)h(bring)e(up)i(a)f
(history)f(of)h(all)150 1755 y(created)f(messages)f(for)h(that)h(p)r
(et)h(to)f(b)r(e)g(view)n(ed)f(or)g(edited.)50 b(There)31
b(also)g(will)h(b)r(e)g(a)g(feature)f(that)h(allo)n(ws)f(for)150
1855 y(a)e(c)n(hain)f(of)h(actions)g(and)g(notes)f(to)h(b)r(e)h(sho)n
(wn)e(together)h(that)g(came)g(from)f(the)i(same)e(original)g(message.)
40 b(The)150 1955 y(system)35 b(m)n(ust)h(b)r(e)f(able)h(to)f(allo)n(w)
f(adding)h(future)h(app)r(oin)n(tmen)n(ts)f(so)g(that)g(it)h(can)f
(easily)g(b)r(e)h(seen)f(when)g(an)150 2054 y(app)r(oin)n(tmen)n(t)d
(has)f(already)f(b)r(een)i(sc)n(heduled.)49 b(Last,)33
b(there)e(needs)h(to)f(b)r(e)h(pro\014les)f(that)h(can)g(b)r(e)g
(assigned)e(to)150 2154 y(emplo)n(y)n(ees)c(and)h(edited)g(to)g(allo)n
(w)f(them)i(to)f(see)g(the)g(information)f(that)i(is)f(necessary)e(to)i
(complete)g(their)g(jobs.)p 0 TeXcolorgray 1929 5349
a(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
