%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: technology_review.dvi
%%CreationDate: Mon Nov 13 23:01:30 2017
%%Pages: 7
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: URWPalladioL-Roma URWPalladioL-Bold NimbusSanL-Bold
%%+ NimbusSanL-Regu NimbusSanL-ReguItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter technology_review.dvi -o
%+ technology_review.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.13:2301
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD3F78D45115A0F0D564DABAC8AEC177C91C2946D5B9FD8DECF1E26
FAE568E3CEE9DF3897D4256F3134B7F3A134993536AB81B2E45EF42240778A79
4A4F10E1AAF04B24CEFDB78D3C62F09DB1789801729BCF2F196EBD7415B504C1
EB30A98240A5DBBAD1FAD5AFA9BD1B7B08ED668CB7AE8D8FD27767696AF2A888
D2012CD5E72B92E80B1EB0FAC4FFE1122AC115B0E9987359D656AB8E6CE48266
18615F0F6BFA0F998FBA3EBC109801F114AC328677F7767018909002301A0AFE
9D416B32570E543CB79A87ABE184590223348E51452B505DD0522F8F04594611
58E05FF7F59AE40665B1C9C4B100BE8334ABEAB252698E633408FF890A429693
98178E8E9086980397402BA2F164CAFB78E4914D224B57B06250F720769FD0F3
D31C6BFE42F3BFB8ADAB12E05085C22882274BCE02E58CCB2DD80A97CA2CC3C9
71D049B3CCA668E5E7DFC7B15FBD608B0262F7CA566AF899DB068706113FD771
A03C633FB7CC59DC52C83F609BB496317EEC7597BC2C48552E6F3E76B34C04A2
1773E2EB42020B9DA1C53FA40FE42FA89CAFDDE49CDBAC5D23D5D91FFF4EE43C
79B2D1BE3072D6898B2707243F409731FFDF5CC59DD39D8D40759EE9B3BED754
A63D9D962E225BE4CDDBFCD51A4E1260CFFE758ECD59EAE9ED878D047D2E7467
A552F704EBEAF9F9AF6A649DD0F7E5D013A694453D99349FC4F65130127A3BE6
7847808336771B8093FF5CC9FE8D9AD16D04DE108727FD7C001FC630378E0843
451E4D9840AF87F800D3B6E0248AC51AE90769453DD157B162EC914D673AA42D
3DC00BB1E2FA5671C1DA26CAC3FCFFE7C6728D9E330928C1E5FF577B80FE1C82
074518D7466BB2B91FDE11773B6435A5C58CB39775D460226F20388BBF95B334
2044FBBAD6904EBBD089B189203DF723F44B7870557B23B9D45CF28667266402
E11621A5A623CAAD1FA80328613C1D1030F6CC9B504E1FFFCCA352431A0D5BFC
FCFAD30F86768E3BEC5E192ACC1FBF937035DB4920F0B8ECF0E0617987E8E672
F4865524FCC099290D716C9C1BEB9A81479EF18DA2237CD71F4CF359B4AE356D
1DB317D48BFC971B79387EB20F148A6D598FF2805240F62B2393161B2701068C
DB309F3DB39CA8CF2A2177502BC2879708341E84D32AF03079C8A53CFF146BC9
BA85094B7AD0D23F47F26B6BE853545FBE99F703A6FFABEEC41B415182F40F52
3E462687AE0F3B838C3B4527EA4929E4C6E6FE9D66123C78D762FDC1622DF8D7
6298C73296E42990B31A07577CB8A9AB3E9D95324248249AEB37B5B9678729BE
B61E702A78D3660E42732DC0CA8E68B4823E482FC5A3EBF6F30C1D2EDC39FF4D
BC037F2C19602304394C529C4783A7ACA621BB7A2850B9D40BF976BB3F13781C
6F65C0854708346913A8E0C73C256A2B140AC79767C883413632D88DE8FFE4EF
7005FAA7AF982C172A2E03F8F09397A487334FDE106450D2E633583994419B27
566260F6ED768BD87C1879FD06ADB7C99B976EE2C88AF259C11067EF1272CE4D
E2AD8E509B7F1E51DC0EA1314D41EC6841074A8E0DC7DF3BD0BD84389B4D97DF
A7B1024E22917F39E015E59EC31B3EE964CD0E9A173DFE09A8210577042DBF4B
F45B9D80E84C9200B574CA2EFC9F6DDE8FFC6DFB3D21373B5766BAB99BF06D24
1D07496805F58E624078BCECC9384B0D14AF8EF62A0A7347F6A3ABAEF099DB30
85D6BACC2E900088AD6841C7D22C0071F5BF6F6786D9CFC2BC8E99CD9A8FE88E
81759A3C57F31A1B749A92CE78B4069D631047678177F03AD7B8BB595B3A9549
660A19A1E6464D99B6F77692F226175A38CF69B612B32BC4A432F6142FC8CB29
49498A322E6C2DD254985D1DED29E1B72F8EF51ACA4F77E2C0A459FA2AEDE315
E9364411DBD79B6FDA788B2A4A0EE7735795304A6430A70EC98E981E7921962D
745036951CBEAC78234AB640F5B4E5B6787D5E769003941B363A7D885B414B59
1354D461B2681AAC169B271FC609982B9E69DBC55E6DD283F1D3A52C5BF591B0
A9B27B9B609B64D559B0F0A75EE969665E34962ECA8E4E071F214E6FF63A3860
6D791E652BA9425D440C556AF480C03BFCB416F0F3C758E8D4A22604726AE9F6
AF49B864CD07DF756EDB47A8F71C3BE0DC673E8C2374CD62184F41224E08003A
D66D4825C650D6B995593B67BB57B6D5F857BD4C118AE533F46E819D11CDE003
14D4E0DF2FB49F8BA556DB5633EFC8C67C61E95290E11A6BEC7C285F0092AD48
ADCAADDFE69C00E187DFEBA20450BF2D7051B1C5C921293446A024AFFA9AC0A9
FBE3771E8C46BD42E14DA219B27B514F98284BEAC44FBAFA2ED3C350AC0C64B8
24E7E38C93136CBEDE51AA6CF0186BC094CEC2F97E5005FCED9FFC797E6207C1
BEFACA6E743770557EDCAAE9A2E23ADE6D0B92057A04BE4F2F53E89DF89C13B3
0A85ABF31B62E3BE1E806C7855509CD57489F07108D995887AEA9D20B3C1E85B
4C766F93041FAA0DBB196B0A220B8E3A9FCA62D47023463DD07C26FF1769A4C8
A2518CFEEC51A393401A2C3E8EABE227B936313AAFB000437E042266D191D963
D97E95A2589E5DF9D6FADD368A715AC0D3B7A1ECFC649A61E39641465400B651
11C0CD77AC6662DF2F9C524527DD20505648123C0BBD2C7DB1F1CC74B4A64602
A7207A5E4B76E2E09A64136BA119E4F7B9DC42002C4C553EB9111573C1FFCC36
79ADC9A0298869ACCAC8EC6AE482EE93B3A900D0164240FB570FE1D7CF1A12D1
6A4EE7037A492C6E299BEFCE25597AE756DA5CA9D1FDA61E88C998834DCE29CD
3505992AD7680BD4723D09BF281CCA25DD384DCDD067444272BD8E263B7E189B
065832EDFE86D243B72B3E700F97E1451C4DA6A0946805D0E9BEA948830E6987
404A4ABB37B2BD32CF9286D250ED22087A14C454EDD9570EC1EF7BFE2DA4B5BE
5CFF57FD2CAC717013E61F8FF3A115780B4E2257FBAC3970B2B20819C87E85D8
16CA5EBC25D24A2FA55862DD786E2770228B5319E19372F8A8F55F7AE5824893
E3F2A4776EB709ABE1ECB515BA32E9A537E4183EA50C25F204C393931F99F40B
7D04BA3D5612F7522AACABC814AA2DAD380B69A047B8DA4F052F1D50AA8767E4
FAA063A02F0FEA69C9063EA1D43063342040C1351D1BAF3C46AC27CE1449920F
9A073DE8A77D3E67E54011D9DCF8C70A6E4AF6B269BAE0CA28563B02CAB57B9D
C5BF98B15B08D0B6E2FD051D5AA7DF9BCDE600EF35D20AE7CE47AE35A156DDAD
111959E0AF61865A3684B6E0FDE48DD0EC6EAC821F83722848601E71F3318F41
061465C24DAFD54593AE7614981A0678BB2138370763770C3BF284B76390DD9A
A7963A47EF2E39A813FC4891B49EF46BB96E974FC51702C2C33127357E9CE2E0
925A350676B2C4890EF433B6612A7C8D7CD3B041C16FD67CD878035F25FFDF86
EF1ECB8BE2E564A375F6820E9117E037C77F024BCECA515BD60076098A654CAE
2B7D54F8A7C1B4C40FFDAC0040D9EB9C436FDF8904A4BAC6FA1D90B17A57940B
DB45DBD0D04A282E37DDCC88E6B3E92C8F04DB2D952FF423341BC32B742E2379
30B6498C50F36EC39D1DFCE54BBBECB23FC1C7CDCA7D5229975EB19FBEAB936A
5CD8DDFED8FA29EF15E654020F34D2E4564D557FF2F59C5E6A27F6FA044B2856
E5573D30CBD27D95C4B672323894D5B24CDC33D18F40332E781289C284BDF5D1
E26FD6A5236B90CBA876AD485BAE73FA5299A6343F5838C666B61470DA712B94
7316AFA38D30B70C958A3C0D7CB61535E56121B290A62E6F51A1FA52F08BAE1D
E76D4CEDF6C1C609350E18E00FD0752A640EAB1BDC36EBE59576BE157F0840F3
EF427451AA0BD9CA1FCD7D86C31D12776C4CAA93CEDE2B7FF63FC9A763254F24
95AD591D39A5CA4B4ACE447ACF9876496B13818E067D3EF1DBCB5E4FC89568B3
5A3AA86DF0E2354CCF5C5EF4C9F3DF525CF8B66F3DBC506B313D823947D0051F
18B5373B7CA0A6537478517E6456B0EBD937AE2B584ED999960282C49EE6ACF0
944E02A74E923BA1B8451EB8C8663FBE2620AF8DCDED6153BF5AE98A02993C18
F5228D9C3519B73CDA023468630AF059DB826E567081D625B60EE20D1141AE2C
28F3C3D62F90C2221D7A8E39782ACB8A908C5E8C355DAB38E029492A3761D716
5BB086AF5244AC88A48C5DEF86D09D48A6D111C1B4DDED2D1718F457722DACE7
A51B93C9AF2FD3107EB16E658A5ED2AD984AB22B92C60EBC22673030FCD12153
EF75A00DC20A649218FAF36BF07045D62BDAC3AB80DB4844F2C3DDA83E0D3865
ABAEBE8A6A325CEC720FF99651B8EA2DB2812E7FCDBA672C3E6A26B4F69672BE
3616C49C07BEDA6A23C990FEE5DED4CB035948752BD90CF4641D3A1AB90C8C47
A8A338C4F7B3F6AF8E6FC439F43CFD47832A28C93F537B8F053390E2ED53A475
F388C614331792901E33FAB46F16E05C447E85BFB421A319D7DE21E91DC93BC4
29BEFF450B6951F120944F679A2FD2A0910F421C621232A49DE26F3F7182BDDA
A77C93DA2ED4351666F90CC1B24EEFC1D47A92BB56F0352BA829E167AB5A5F7D
6C95E27EE33AAFA730E8E2000E51275CD0A783ADE845BF88E18DC3731E91453A
73CEB92BC6CFDA2C4C8749702D9BB011C7D04A81D8A671BA39880E2C98150B2A
4EDBF125CC1C30D674BEEF419BE8E5B70A0023068437AF28BE161CF8FAA12AD8
73C74850FC8B69D15E90A59C5AD07CA7E3A6500E4D89B09DD5563FEF3467B4DF
7732AD755319FF7DFF97FA9E86D7C5F02F2250BEA09653B74753FD7BB4C479A5
9BAA3A105282DF6A35151D7C34EEEAB5D91E09884555A1C85E26A087B2C9397B
1FFE3252825E52935EA24E96E00E5F95EBCECE33C86CCB5C80EE1E1AA94D1F8C
50639747D4FC9092E14B0BA7554EBADBDDBD21A64F1A8AD69F8E5C9750C4C99B
979F631BD3814EF639E5FC79015FA7625F2D535767C7FCC48150F1DFEB71B17A
B6126C864AD7A343F782B071F59BB055F151B8486E0E1E5D62EE921BA1C11EEC
B26A0473B30C8E4A400571DAB6F722080B1908C5200EEE87CC6C676DA85B3AC7
8EB1619EA7E09A17E7892CC8930B6C0481EDF2724FDE4A5B2FAB1B41D31D0D0C
E89A319CD781504EA2CCCCE5C888A572A7F9D3FDFB32501CFDD650E0C997B175
48D1A3E777E280AFD236FE46EBAE04002C119C74A5EF039C8EC4523BAB1D12DE
774C78A0BAF50693838109D0DEAEA56974B27AC623150AAB3E8287C307F553A7
69F6124346CD79B5F21694D87989110E575F71214886E42C0E595681980B7728
5AF5BCAF6C0D9233E1D1F61B549704DFF82BF14931B22B465D1EA917B10B32ED
08E70482F0658D21297DDB8E781B16E78E2D2932F4590EDA5DF4A1E25783E9B5
CDCE5F2B1CA7379A8627F62C3D658462322630C2D4515FA048047C0B78FD1C24
4BB68376F4A6B72B91DCC5B8A7A8C3B3E175B1D22F687066179B05F4EB955747
2998F574AF99DF6CF36D15257F758B5D150CB3584CB2DD40E8B29EF1F8CD6F62
21B5CBB72AFCAEB3130AB232E69939AE5D6FC720EE76C2804AF5DCA6A0F79002
9D97FB8286992F49CD0A2D2644A1F10D20FE170CA56A6688B2F97A82DA55BEEF
A17485FC2D8977D3D8466485E76E3FB313B37C455191E057F5D6E69C678E05F8
68C2ED17BD1FE69671678BA5B3A01015244779FDED72256089CF8C3FB1769452
632D38F7E2EF4017C6AFC828B9D4E6FA617AA5E4D5A49724B7C251841AC84485
E28084F09311819C67296CB735C41F862CECCABBFFEBF0F70C0EDD576583A6F6
192952FD53DF52FBB756C7D21AAFA482B4A7DD0E27D8ABC8583B1FB0BC61C722
E20FD71907F2CF57CAD8667DFD674256D084155932533218338E38694FE57394
6F9445D28DEC20233EC224762E467D2C62B3B23045F09209436C7EAAA7F093ED
8AD1FF483D54921DC59103E42C36B213F9C7704512110EB66A0EA595C5436389
55925AB08B3BEAC8E02C097DF4B2A85C797DE5E7C25DD24D9889E0CA5E640AA3
6E6BE2E5186292AE697DD80428CAEB99606BC079F3A0B8B5F70D97A0E9B896DB
F8B707129C8244F42FD757CE24139474F1DC187D03B7892E8A8974097A0F3E30
FFE8EA6D1A87561E6E4CD9500856589AAE84BDB3DCE4EBE2C249E7CB351ECBF0
AB3D57FC926C63C7418B4BCFC127CCAA55742540433187CDE5C0831925ABCAAF
29E069A1C60A2F0B1EA9B65541298379A98F8FC8169F6CA53AC196D0D29564C5
44DBFCE1ADA35F64393E93E3AE7E97E9BDD216C1D27D4C68E3F319A59BD87CFD
884D20698E6DC6477B2D359A05F39571E4B523AE3C895912EA1E6C6053599475
4BC83945F39AEF223DB2AC8055C6553DD7903A49977230F1F85044E95BF43F4C
C39C1712E057311DF474799C7449FA8F5749DBB7A7355AD0AB8AB3CFD09DA194
14BDC43AA6155E2867706E51CB96E8561C64782374B5BB113B860B56CB0362D3
55933650EC8C92E3CD1667F35F9666BF24818566F026E25F3508C48A8BB31377
DE3B1B911616D9D83BD9B3617334857EA92C2DB592CF08B3DE2FF46BAC71CB65
CA8AD5869CC9FD7C4C194AE8D5D20A780293D479FFD5CAF4D703926F1BA042CB
A121403FACE3239AD76BEED158DB3BE2DC4BA1DC216B2D085F251E51A80D32A6
E6302E20A88B91EAC2D1F8961FBBD2560C2174032BB57DF31DAABB7DE1EBAE20
A38DC804C23244D5045F576D9C446DD56ECEEA07228F0B0DD14607112ED9EF0E
112CC860A42D5FB50529EA6CE284EDCD95DEB8969FD1ED07778DE2F62958FF40
9D37332AA4BA88CFB197C0A40AB5B4758AF32EE889194AB0C6FCBE00A4E85371
9DDDB1DA9475D34528238F35683C726119CC760DD7A81CDDA23EB58FAEDF9409
71FEA8BCF0734157F326A0C9AC332202DFEB04EBAA1CC102BE870E086BFFDB8F
DE34A307FD04BE442CCD16DE83E99B0F4A87D8D42B5749D9766AC956F58B5B0B
4F975E059C972EE14D1E7FFE556472E7DEBAFE008D7367459352EAD6B4A2A6E5
02E9B50D6C82C0B57F6B0404398E6DB1E7C694EF5199C717C8C05CC414EE0EDE
65BD9EE02D6D796E9C6D5613EE1854FFF474539ECAEBF49F8132D20817ACC970
06A17CC574E6D02180555C3095FD9E572AB7D0C13C6578611E8AD99341A3E576
154F231234B648B32BA57CFCEAB6A6E3A6D00C1C9B656A24515D104D18F15154
34EF6D0EE3E54A03B90556DB2C486CB633041D98B8D792DA3C3E096477F410E7
A303DF077BBD256FE9B411F0576E73726CC811FABB2D296C5D616001CD8F00AC
3022DC1AE865D0840524EABFDD96C37AD28AF1C3C5F56B4C0BE1F118D054A2F5
DC5F512B21F0518B9E3260EB81496D3BAA3ABFF06637586AF518565554C4D7B7
A625C1350893BF0B820A95DE4DC41C544552F707ADAFE8D8460FC48F3329A04F
F9BCCC871F588436821AF7646E0A5B0894537524606711423149D9F31063C636
0DEF03AB0E82C608AB03CFF2B0BBA26006FD498F7B8A680D209F321D7FA34172
CB07D301C31338A30B2DEEC39CFE18B2F8F9245CD2F5FDA66CC7875CEC5973F9
5A018C1688918DAF16B548189AD8068A5D55FC5333A0AFFC7770240FD125D4EF
D6852E13BA39C74DE51A1513B2EFDFAE341E5FFF146C3A78D480FBB740B15F02
D4717E3C16139F826C96D7322C7CB5DFC496C4DD4405547DCCEC62D67F7D04ED
14BFB32D71C74497E0AD8568753C04F9E8C4E3E41B1B7331E5168F4A69F1FAB4
8FC852CE7C53C0FAFBCC5F6542BA37152F2C34EF89C4C892A9E4F0A041247DF4
FBD194FC6D1ED8F9E0AC14D1C5CA1FEE4603A58DA94773BC1AA35B31C45EA8B7
525DAAFF7B70A5414E182FB7D57AEE1526874BE44B8F5E92D2F88DC8BDB5CF53
E44C832B9BF0E529D844262D01ACFE1A26E6C7F496EF2D2E5A6DE68916EAE505
776D90A2D1A68B51C0B83856E9927C936DF7FE8A81A0259809EE9F92F7666047
2C5BA5E78AB435FAC919EEEF9BB535B3BB2DF00419F59E7D9B9BA37245CA14A5
41F77604ADE5CA870961C65D9EE861F61D0090301FE39015FD53827C84050FAC
E29DC5A593B40E732D3FB96A73D1DFEC96B8B48C55D6D0B9CDAD690F8976A671
885087F49909A6399C1AC4D093AE96F31557A70C45422D1795581A3D76B9F387
D719B0005323B20AD59BD541AF29CA3946912402BBAA2BEE4DAF43002692041C
4FF7B281B04DC1C56AED7E3E83B767E4E968204B3BAAD1969883FC2C330B4F75
B2FB0D5A087CE736B14E6BB73F491976F265C098A20D5BCBECB3BDD3E0907D3E
933A0341823727FC16B9DA0C6C6DDE7E4D3BB7B830AC7CFB155A9C9190E52DFA
CB6495547922C9A783B786A3D5D0C5AC21EE34434B5EB5B995BFC4DA81D143F1
6110B9892219EA62014336DFD7D79CA86DC60A2CCED7313934648F7B62B09979
398052331F5EC24981C310D03C6340EF20A6AA719A576FBC7F0793492CA7BEF0
6D439417455C5DF4EBD8ECACB63331266D46E6D7F7EA561AB9F7EB03301D7B3B
E29063F022AEC92E52EF84F8688C860B050E0812114C2AC669D9B29B5D11AF2E
820DAF8348E3DE2CCEE6BADA0AB5872EEBC01DC90D8792BB447F2171E48432BB
AB96BED8C07A9CB1B755EC5E1B8A02D40FCF2DA924BF5B620DE38F5002F02D3E
7B31D9F386F774FFBC77AE08490A2C3AA8A9E31BC80848182189DC0F82F21CD0
C6E32773E3FA0A63C03DB348ABE792AF9648FAC371F4AB8C8393F296A63643BE
3A12E486B6E5B6D3E679A7B5A8CC8D2229A01DD3B6D30C54086625A129417765
AF2FB181CFB8B23F517368B7FAACC8368171CB3D67603663FD812CACBC72A2E2
D5CE9E8CE989C37F72E489ECA5AC88FEB3F4E9236CCACC568FD3C6321B99E7FD
62962C1775B1FA42E81FD60DC2EBD6D1F34285D3FFC8A29E97DC693C36E979D3
7D30D33E149AC29CCF86082B8AC66776AA4A613B77152BA69D8B0AAF3741D6C3
BB8A7A743B5130600F7A9EBF2FD426349C40750E67098665B3E230CCB32015F3
8908E4B20F2D83CBB78FDB6CD1FAFBC688CE7026803F091EB88CE191081DE21A
F12C1240C57540E73362D1F9A0904086EBB4A9E7C9D1BB679CBABE49EAAE671A
FE6FC58C092FF42C6D177A3E42525D290C4D9A6C64A43245F40EB62410681E61
0001264311840F91FAF4C4C43E5E8E02E1321349FCF43C2543AF9C4D1DBA6462
B88F8ADEF6A2F7DDE7A2AA7A5629DB44B919E2A7FADA3984CDF065D65E460535
6F5DB4ED03CADFBC4EAE3A07DD9BACA2C23AF631DCAAB68514DD570C325B5667
E5B46B778EA3CA655ECB6248982D43CF1487FF79D9763AE381D94DB00C64D515
0604969CD6B9C3E7748C9C093FF36C008CE70291990C201FA4DDF49EE7703D9D
FE30FC3F11D35789E6130614BD1301F1248952EEC7DA08433612F9747925B278
F9635F04EF3EDD5642DD0A220076A1D820075A2EBEFDEF19D1BFB839EB2D21E2
2B0068557EDD7E8F34C75470C6307544B6FEDA40136A0FC19959DF9D1404A2EB
ACF2575A2F30C6DF5FA2097AF77F579DA4E3AB7105C5B4C77C17370B26B9202E
70FDBB79E2F1D42FFB8C7AAE9E7CA25ACFF49B3E7509D2D29D0449BC7CFFD9CF
2413AE3068A03ACCC242DAFF02379B2BECB9CEC523E107F43CF0088B45FC024C
331274204C1E9595CA012D7174F75396E978EEB7BCB638D463F45D4F460CD581
94330D0FA2B075EEB8999AE47C52553CCC6465A318C7B26AB146C815D4C840AD
14A936885F8A2AD39A4249EAC07ABB4A2C47A7E990DFFAA871B1EB483604B6B6
95C88C555CC71F6A231446A9555339E79EBD2EEDF95AB3DCCC975AFFBBBB3AB3
A16D5585F6B937DFE5ADC3891BAFBC347344B9C64331F1C027E69B233A6BC54D
F3A9D8301606D669A756AD707F40B5E4157B29A1B7032F86ACBD88F88A6870D2
712521238F74278EA7C87F699E28F04FA753876BD921CC9830D768AF93535893
4908FF78EC89C3C5BB170FDAE7922D97BF0BCEDAEBBDA6BE7764CAC582CEA8DF
93FCFBEBC586BCB872E666A060E4D9241802B7288B90644CB6F9CBD3D6037A86
83539060782AFAC56389CA5AAA2F25BCDC92F98CFF9F3D5881095B96FBB30E83
372BE7151445216C26286A1459620A95758C87D68C62C2E180058433952B6985
25612082298F0E6E36968C8EEEE9E4F39F192B2A2CD3C1D603EE3527EF55A975
94DF3F6AAFDE81F65C9BB3C11F8E1406D0B11F7745CB40396BDD78BAE6679AA5
D0433A8473690787DF01663308A8F9E2CD0B91088F3DE113E86442C14C4F1692
6330A6CF2F05717B6A6DA0AA29EA8B96B90DE0CA87BD2E3FE287FF27B773081D
6642B2722A5D383DC3DE34556BE4A7005D97DCC398937149ABFCBE4A62B395B1
0AC189665735038CC22BE54D3F0330D6D4D62C14107B5BBB1A33FE2D6BAFC4BB
81A046D60B90189993C3D25705AC51622700E0E6AD7ADD6E0BE703E27E41B39B
AE86D5ABFB951A678B9FD0C56CE5552617C2B4E2F877A88F042931CAF75CAB6E
3BBCF090EC7CC3A93FB2A9E6996EA36D92DBD2D70B17284CE3F6FA6E71C3E1C5
8F8F3B1C647F00D147F33C89E76E4E8816F141CEE95FC8726ADC87E473C1A8E9
75719C13D0B931DD6FA82A5526DB59CB617F9DBA0ACB6E42D82C460F5522FF5D
4604DE8BF1664BE2611277299656A37ED83D4DA7FB85DB7526FBD9A0152EF4B0
1165E5F2EE5834F2C2F487CA8BC069E60E68EBF0290AFF7D77E2813E25B30ED6
B92B62F1651CB12743FBA7F80BDFF45A5C9C3240CB047CC23B3FB4762E5742B4
88416118607F8BFA186DC0A15E5A7A95BCA716EEB7D089FC50CC4816213191D4
EDF853F6D6ADFF67656FBABCA9841C59C936C9825E30E3ED35C779D61A907F55
CD9DF168F864F5F613DCE3811C534CC0AB36283E654327D81B9E131EC1F22636
5C749CE68B2F2F57DC0BEB0CD3ACC12BE72EBE063CEC68FFB3A8516B9A52FF96
083C1344502AB5FB46ABCE1F57F017B0A8CD28FCFD7A8F18FD4AE0210D6C2C06
62DEA4E1A01227978C9ABF2CA3F6BF90933A4F2969C25857EBD7AF81C215B00A
4E583588848418D342A1D4D0259818FD06ED79AA77C59E4B75B31EB720411FC0
13394E9A848702BF442D0F70FD30A1DF211A3795A9C98D8732EBC389BB647B90
4716794C21725D8F5B0A803AF98792D9FC9343C144A726004B8A4073368FEDC2
CB48F1DF34BF6336DE606FC20C11895198870B881BBFE2DBD53C0DF89B963359
55749D247EC067E191DE88CFD0A4F1DD464E25453351B08A09704D45B259D7F8
AD8F8A00E390D5F6F47CE1FB3E1E056247EAD510229AF29335A22D1843427153
A3ACBB96FC713CF30ABAE4631847CC2BEBEC083CF0C05C0E30F0B34457AD4530
EE68EB7338E7A3A97D8DF49C859723FC6BB43B7CAC8106C77D205785F3B25092
8C75E230CC48F8B90151A7578051855E379F4A7EDE97DBB3B270AE62BAF31D7A
021FF5FC228787DFD54EB5BC4501CB1E5F4CC8301E6AD1235AF7930C066B760C
97EC8F6B00668612D22789A74F3A0D4B1E940DD82659AC261BB494DF002CBCAD
24E5C2541FC6EFBC9DF203DEAF03E1A561F77CE42E7C2D63C87477A5962E4A69
F38FA95396D71D358DED2E819A887FE3670ED1EE9266472ADF32D718BE4E69CA
373169E2D360575B1C0EB608155D42F884B4A0EB462E423410C34A1D83662892
21B88187EB148AF69215A68B94A30088FEEC79DF2655DFB03DE8115FC1E42587
858922A5FEB7466C509BB5BC7D66EA925DF47B8343ABEF68745378AF892C68B6
248E69690C9AE1F66FBAE371392DD0991D792252723896D6D4105E43D207AA80
52854792C3AC196BF0405E05FE5E81A7EB8419BD2B190977C8C0FCD1ED2F4E98
B59AAD06E09E5F1E29B150EE1126EA8CCD820975F8CC4CDA46EF8C4F1EE17B3B
CD49A9B85C1DD123C0CA8C5EA2A259C419B2F978E1F4C7958A2747AF7ACC0E9F
5B34A0105D03681EBBA88CDBE87590B7DB16E7B1C0926FB02DA992EBCA7DB813
D409D20109CCF64B31CB5C2D1644EF98C958E130CFCB54F3360B020BE5FD7DF6
494B041CD5D33E6FB38465455CB336AC63334EE679CF3B9AD41781F30A5EF42B
04A1190B5884269D9271BE468AC0E2E6DD2FEE9F11D5912B7B2850E6EB4E3AE9
244EBAEBAD35AC7918DD4F490BE4C5A42696457E3F49734C4B5E51C7DD49FDAE
75FCDEFF3FF81C94BA66EAFEE2C6E3F1871E8ABB33397E62B13975D92183792C
38BE21C113707DC8D1BD6C1767A6F38278897ABED09C033D1CBE1401143D22EB
275D822B9C53ACF173441D317884684A5DC123E6C6894B6C00F8F4F6193C0CA0
4CB9750C5036965090789D3B90999FE509785E7712462C9E603B60608D70D7DD
6058B395AE725ED9019232C234505BBA2AF4023F60BBFEF460E8B09F18BB7291
3812FC14C81C578CBBC23C7B47CFE64F10B7EDEF1FE75F623A1C4B99C4E856B8
177310964BF98E3299560DBC638C18B1B45EA6127CB79D5ED5831866268A8C63
765AF536D13A717D91EB5B8F0E20A4FDD0F854A8430F9EA8A70166EEB71451A6
BF9B7D75F16F8CB4EFE729E102A5444626A25A0D897275EC81B0B49A2BFC9AEC
04569641B3C20EBDA3B87285AE27D3DAE73DD13D36293886B348E1712065717B
85D1F1223FC31301606743E08E35657BB121D124E270C67F1868C2FE500CFF85
EC69342AB07720A199D68534DB16D4360BDC79EE357F953C701838716EFEE2B8
91B74EB3C3EA073C4787027050773F7D4A509EA7AD0D2111E416FF8565267586
592927BB426D4E01F2244633862B102690C83ECE81316518FB78BBF223A60624
9F30E55416AD68A4C4005D26AD12308464CD6818213F6379899C514704EDA860
67E126D3EABF3F71E88A5FA89E5EB76914057C67600CE6AE50D79B44DC75DE0D
08D9CF9F5ABE604A21280674F5C2137FE13E0CB7A4566F608E0157F694C37909
5BB6957ED41C4946C2D52923C657CB78716FEB4C2C21631D59B961602C8A4804
73826F762E8B958124E20CE31051EADADA0D4A422AD1374AFFF084E3F644E187
9C37A1E4CE692616152E8FB0D17159B13CF2EDF7B119E13303A40596F048A31C
49094FD6377BC0C6309835F84E7D62BCE26735CC4CE79578BEC6E6CCEE03A6B9
AE1AE673AE78881F6DEE2625A680F3356FF0514C109D673AA58E7371A6A34DC7
DA5A0370F0F2D6FDB8AC90DD4C9DEC6CE2FDD0986C76336D808BF4BE4D3CFEEE
B3F00F92FD3A44AD3A6D7F87DF2BD3338F89BE2624BE292D89FABAE142923245
5D8BE0727F924450B7A5278508BCCD47E6C5B05B7FFDADF7ABA151CC237C0FDC
2D68D8904C9481CB7B525BFF347744AE6E85EEFE74610AA79831DF5EA9FE72CE
B1506888F15CC1218BEF14B148B2B5456B6CC965F3BF81EA6D504DBF0944CFC4
A423BCE1E467226AE0B39365CF469925EDF431B62C19D3A6401941DEA15094F4
380B740722FB2B181059096C657BE453A22AFB28D18467CC43FF7689AABF7713
E3898334BD99CFBE66C4FDBDD9B9180627931212A109A6CC8D6FE62BE6F89D50
06719D81FFC9FF3462A4C0F771593F5CC541BE24D02AFF56B18DEEEB89908D55
ED7906C5484FB0E9D44FCF6EDD85ED16B267CF579743FCAE8FABBE29ED7CC4F9
7EA3795353BE25CFD3D05E95601049B03FFAA653F82E2CABC8596EE39E400A6F
1CB18C8409A794245BE7A3DC5CB4A6C496001027372C9274BC2419DAE45E1DAE
BD6177B43EA2D6D9E95F9EAD282A511B44EEDDEEC3CF8C1CD3FC01FFAD306E65
B71DA25362FA923A1C770213F5546CEDD67E0CB859485583F682844189D0C9E2
1C9CA0416C17F3FDF6D16A395CEA43B9314242D706B380EB0EE95F36A3ECC7F9
32472CBE67001B87081FA67D4377783BD5D88E46E2668B96A0EFE7944D817E5B
C73377E7155A03A55E587532BAAE9DE070E73A17613406C711B92AEF8134F99E
A91708D5756D66B87C838592437274AAA30B1535E3FB56E88BCC646F39372421
5F535FE991920686F6574C8F67BC3774D44B5FF7010C93C6FFB55D0FA449D50F
D591E39B6A5C032629C85724CC1B73E3AB241E4E95C8D83382142D21572E18F9
A47F8CDF87E6666CB5E72F5BE5CB4CCA91AA2F7760754D8ECEA334EE26725672
0D6CE4B05280FA712230610C8D83F4C9F5CDE041E156D38BE5D5DAEB02B26172
1845AD34384F239A820E20864EA841182EDCF0999AA37879A65DD2F8F54E9F7E
A25DD2FF27D291FA5AFB0C215B9E38FFD92624B0E9C27A27B59664E8566EDD89
0ABF52B03EBBD31E2C5929BC1BA47AF05D473962EF4BB086640B12E95FC462DC
C5CF4D2C399068232A1294A29DAC701F82D7956E57025E7B5C7192144B553769
823BE18EB50CA7FAA2F815EE93C9E7F43A6BC18B43F57C4832880AC41C3C5F80
6CDD64A34CB4203DB0A98E40A9372824884E391DDBC99A51A0D075B9E592C1D6
151D1ED96373D0AA761F9C4B189830EE8D1475703B18423080BB2CFC8ED5E4AB
1186D810025F63FA10B46493E9849967F12EE3DF3BCD0239BFE22BB8ECA12177
C7C7E607CE160BD216209890529F382C932FA279612164BA463DC07140EE2370
1B050A96023009555378A4483D1EAF9CF14981D7AEC1634074EBEC25F725FCB6
40CB4A217669C30B543B1FE9A5F7B3FBB7159022C4F80A9A6AE4D3398538D919
BB73128443F23612B6E3040F6515229FCDB2A6ADDA63E9194BF16CD2D5A59260
473DDF23A85B531324DB9A2B30D4CC3DCF6B0746C1339D7FE3C1ADFC392ED586
4133A65221802ACDF73DE4C090240CC0667E2ED796A856C96638ECF1BA090DCB
C0B3445F20AE69B183BB63329F37871E4D537100C4D89B538E492DFC8832D5EF
2CCA3F99BBC41B415182F40F523BC9C51B55E4B99D27A83093730BA69532D86D
D4F2F27CD463E537B72974527BF071302A5B32E6F3D5BEEB8A2DF8F6FD3AE333
BABB1309AB3314985C5064F395EB02341C42B5C31A3AC1A26F59B1E1A0685184
75EDF093F71337060BF4040641A572BB43593818527039AC74080963FDFBCD68
4792387AAA48CD3D9A87D445CA03234AD544235D8AF5B205854F9BF1F07AFD65
2CE63CCE100ACB9E0DAD6181F82F434EDF67317874D7B2ED2A4995E08362A8B6
0E85AECCC56074FEF94482491DC499382C93A60D098E0FE2568235447928A5CC
0AC171FBC47998037CAAE89747064C5377945680904224686EFD2C717646CFED
9066B427CBECC79D637BE3D0D98B8A0F2CA6D16F64C3CF84D14D70FC76799A57
B8009493921B84A6AB4BFE41314FA52F003645BE1139A5F3332699713A1D0E26
C392220832FB00C79B93556A1DF4CEB57A1882F307F0EE099AF080659E535DD7
2842FD7FB86459BD0F10B0796C113D22152BCBAD4DAEB76731EE262D684627DC
8F839EECED8A0313F0AA2AD1F300AA4CB2620D7426002161F983AE95E542E87C
5536F0EDCC75AF25592EB7E7829E4EFAE3C6BAD0D1A5CE858A863A9AB484C68F
7021E9A1E1CC9750DBB35B5A632ED8AC2ABC213F81757FCDCA8EC6F0E9EA338B
249D34CE5F96174DE5818862B948215A40A87CFE2F881D6AF97D9BCC70D18E3F
C72E8A2CE3051BD437DD2BD1B2F366F2CD09BBEB1FA1FF7EF8999DBA1B10FD88
E772B497BC5C493F0DF9044517835C5A18B6EDACA49FE842B9179B5CB596CE9A
764D8FB11597FA64C204AA8AAD5CA1B30A7F6A0635F4D60C3D5A5D5AA54D4566
C36A1DE47BBF60FA142CF8E49FF59D0132EBA0E54724514A96DCFD18E46AFE62
F4E10693029CE085ABDC77E8EBBBFC63669B0778314EDF4F4361872DFA2C65EB
44D5CB662BE0B2807DDC74CDEFD3E5D7C8FE54C9A6EC3722200E4229571B8DDE
C4B23A97D080C2641931E59633708BABA1C0C2956DE7BBE53504F2B08A80874C
F0D889281F4761B0DA07C7AFF39097AE400B8999F052AE0A8CF6038EB3DB7F33
C9BAB88C180322714B666A2F5FCBA48BFB38EFFF20985D32343A81099DA63D30
2CBC3DC51217D4A4CC87B5398776E612686CCD91C077DA5905E8B396E749AD4A
357A9FAB35DCFB3E4BEAFA1585B4ABAAA808B7C5315AF784DA0937C74083F42C
FFB4D070311E8FA6595500DCA48E4802C8E4DA4C7DDF1590775AC2166849D5C0
346A43F8D80B4839668C824F6336D430519C2A613FC95D777C6F2508D429C625
8577FE6067582BD32430A52F8A9957642C677B94D8D5F61228A754FC694EE1CC
DB9201C3AE0FBC304E6157804785C5361EC052773C282975597CFBF6D1652BCC
E43458A67354D479220D828688A6A03E80DEE3F0D3A776F8BF6F046670BF3272
A4D03D6A518F3FED0B0E0857A05A69ACDE989B3FD5A3840CE2CE6486CB6BC760
4D8438A0659071C8A5035CA40C63F7E5C48AEA1FB37AA154BF47FB70798FD29F
50BEC1BD115776BF0430FD9E381AFF1238CCBB7E48A1B1BB474DFA01B0F4CFA3
A15609465EF425A6A412DBD0725908B76E47EE44ECE830955D10D3EEC871AFD5
7FD3DF1D9E409FE5530340F8347DB627FAF051FE7E452F3A888CDF0C93B874F3
F22F169A9AD2A517E036175E6D4F5DE3BFFCCAF634AE7A1DA162EAB5D1BCCDE7
4BFC2C993AEAB20EA224ABA4D376DF7C94218A51887F3881C8F1E9A673CA957C
08962A3BB0599D512E8120C9832B68823192E78065FD67C00111FCBCD1B1310C
75AC850F341F510ACA9F7EE84A30ACEB4C36B5E59E3AA4C8B47CA7BAA05B3F8D
B5ABDAB00E5722E2A8ED2E74001D2FF527944E7283D8869CC6930E602A64A1FA
91CC0354EDC51768351853990FD8153628B292E4B5B3B7D889C29A9C92393330
6B66C43E2EE403E4EA6C788A6D156C470460104C978F4A7DB5F97644E7D2AAAA
47BFC5A88A53C4784C85AD055A30E8B6F1A3C9DA8C4CAF98A5AED4DFD9B89820
B2E61735E237BF1042155BE10F056538DA09C189665735038CC228D0E698F31F
12DB0007FE6521EFADF8B1A322119C487AB4A715E0EF128E085E9F64DB789053
3FD8C727765354CCF9FEEB521723DB349612E6C35BCBE54593D6130DF667C8CC
A89FED056BE933781F5FB7061E41E35F1C0AB793CA068C676090F93D6A7C9394
7F0EB14680A3B9650D6C2163B73A83DD53F4D15F219219825BEA068392E9EC13
AC072328E1B32287D1724301D3B14553CB0D9C6CAE3D2D13B6009EAE101A774C
B61844FEB21466DEA111589CF8DCDC48E4F63B4D8BCEEAFEDC4E0DA7BDECA4F7
3DB4D84D7FF9FF20D50D96B41727A72FF76E7DE651DE14A8FEE68EDC00A8415D
70BD5463DC64D0B5DA53249395935EDDA7967B2433B6BD77628D7DC92221438E
1C15460ACAF7A943A90C34D2B74537CA1B5456842983851FC92621C2124A9CC2
E373ED1F6F3EAEBD1C8C533E943977A64CEC09D678C2C287675D73154A460057
914C456336CEDC50294747AC9860D99A71E821D8F966478C97F5D32847C31C1C
86B8FD8EF3FC186A8EA4C9BE51D592FCDED36569621C746CFEAF186B9198AC67
4D0A76D7A11670C28C42B4F0D4BDE28886E9CC715784C7BF7F0AF6DB24367BEC
8E7C6E53006801C01DB6540EE667071CA1862051F27E58924D1BBB4D7213FED3
D8F19FB7B423041482B0B05323A71396BA0A0F314018423977C9AD585854C18C
8769792D5602695367F970C99634BE71947B7F69127488F604E972B742BDA1BF
A3919D1AF60386478AE1B70ED89D4C85E01BB799A33BF68EEA18E6E2C451C626
2AF180A3D7E8EA917D15C635FF2D186730EE8EABBB95F16A196AE7CD6EA69488
611B4C5600BF38AE514B57CBEE38464997A04AC9CD59D4389E5A84930FEA2A1D
89133341DF01F1BC0414FC98F0F035385A1F49A5C9D9020BF62AF81F40ED4AEF
84057FAC50C227D23DCA95729794727C7405DFB32DB77E1DA2E2F92EB1890FE6
BB060A0F1F939114F05719FAF20F60E5D15B630ADA5342D0CE252B637ED19561
508B1E19EAFA4C676576BF1DAAEDE320A054E79BDA1FD2D967EB9B7F6B389EE2
2D1C0802FACD28FE8E77A4F13ABD480EDCD34370F71F9BFE330C32D011AD6566
9C1ADFD821E84706606D82771975AB24DFF6BC7BE8916E10F03083BB89F311F3
8E8043FA363DCA07A1078FD34B0343D48E428C5E1888B32E0B820A95DE4DC41E
33379ABF670F1C9F40AFDFDFE2670577F8EFF6F94F15C971AEF113C74CBCE6FD
76D921D0A902F21C5F507F78C630FF867B79A86CF4A5D26EB4017C11A63255FA
E12BEBDF403BCD3BC89209CA0790C849D51FF24C1CD5D8613BBE23203D233D9E
06D3FAD451B9C70A9B90D90E2E6D46E5734604ADBFFDDC55F549333C2EC7A5FB
CA8BAE0C5A3B12276276C95F7B1735B4DB1D38B48B159971DD315CDAF8B68686
1B3EEF3157EB920655B93EBBAE2BC134E6C5ED6A0EBE098275EF106518DCE691
3B5581A0EE56DCE2545C3AAAA9B441F5418A965DD3DD2C6CC997DB0146AA1877
89211DB40E374E370D53CB983F9BA5E7F8092B30E849ADF23F9434888D25B356
6AB8F3172250DCE8442BD6A49A425CAA465C3DD4048378BDBE5FE4E2ECB891EC
28127E0D0036E62CD1CEB66042DC9156BAD856DA51973ADF81D7EC9666F7E74A
5A1D97174C8AE0AB347956135E794390D46DAF26CC52EAF2664C27B00C6A7067
B87E52D9623713A2D88CB67CECA9DD2507C6CB6AAC07B748DFF2B535117F74D8
945AD99BE47CFE0733596DF0D1A7CE8684137D59854F182B4BC38A0CFC0C59CB
5DD1D850A06FDC706A52892457B6F0EA299D0CFAA81A8BE845F00CF9C96E4C6D
C989429D19F939C8C597C39AF5E9C358F5300E46BEF252A80D32A6E6302E20A8
8B91EAC2D1F8961FBBD254ACD4932A5E64E2E417C6B64D84B19F7C2D7C143E28
7C1F6400FEC0A6D60143CC3D55F1DF6AAF7C9D25D99E45005890374D2051B800
629BE0847718ECA5DE4ACCF88FBA4AB7F085A9B20DB623915950B4C87D72F27B
03AF92D451034112F40E1BC647FC0AC8E9FE256471C02ECEED641FB6D443B175
021256F3966FF0E7573B5CB3278E3352724FF84E69C3C34778B9BF4871200746
A11B5A3A4998F239E2A4F63F6E664D8CB040CC57D8112E7C1752AC69AEA68077
A7F1E5B426F180F8F5C6CA15CF535359773F77B922D7C1E3D9136AF1D8BAAEC2
E587E80A92CFA4CE3F5830FC2C9EC54BC8CBD9A3AD073BEA3E0AE6D94408A4CF
1FD97513B99F8829EFB64E27B1DDCBE123EA4F04D57BE4C129CC139E86E113F0
56AD8A1704DC1B8A12C97DA5C8215B4045671DAE15FBEB3FDCA03E1BA6C82B7D
791D478411230EBC8CEE61346D56D6A068F417E30757D119A067638F0F145A27
5842B919D51453A618E6914162970CC6824AFDF4D153F4DBD75E341E93712FDA
44A044F077ED8F81DEF8E67701E81A6BA1CFD1A3C93B0DFFA5D4DBEE10DBDF09
83F3692823B45786E033880BD0E29CE2CC4F1023996700795D352C450C8AD74D
636A9F528AE25E5C68BE8AC8FCE03088A4487436C6196DB499644598359C85C8
DD24076679FF6E96EBB07E1339120F6C313352129222F14FDB8CD43970A35974
851F0BEC11F8B44AD0F7A9E2F60CBF3A77EB4228A100114B8C8D2B8E98FC6F61
855DC608B4A3937949E4C6C6EC4178B7B42F2AF65F1947C10DE60A539D5332A8
C2BA12F47F8C850200524741D3B58A2204F1CDC194DF7541D34DA2E173155BA6
F21E3D5229EA52E18E725A2BA41ABAC6A84599446A75BF8E5CABE2635D7ECE54
A5B0EEF6E452BBD7F7E34EA0A73AA424CCDF8EB9AD5FA2D12C36E851FCAFFDBB
0C9D75366C29D37472E3EF0135D7DC009D166A9F794F1285F29B236076CB59AD
AD2E351FF7DB0293CEA029D297CBA557AF73E8FEC1F24A51C02DE83A16A9BDD7
41EC0598BE731FD19C6271A2250842801B6BC055756F1B9CDA39E4D3C363467B
9CD62701E1C3B121E136AE5A0A8E277F0620C1B7DC05E95512CEA1679698404F
3F7AEB231A9B275BE0D05343E7875B078BB8E0484D760FB9933A19B02BFD7540
2274036777B0644E23147C2CC078C21E326B05E7696E5A51658504CEB177FF9A
426A1A86E9150D3AB4ADE55206A841A86A6EDC0A2F6407B0B5472A0014C1C7F1
39E2F261BB8CBC725B21A211844431E7B20356B24DC4F9A87DE077362AE73F84
4435D07EDB412D825A772AEED704708B6A6EF697CDC6E0009D8E720831DFB5E9
DC2CBE611E7ECB495F5D99ABA138B80541ACCFDAC29ECB6C8BFAA3C3881BB53E
E3AC08CCB3362EA99CB388DE00EECF1BBEB1CA3EBD18F09F831F2D87CCB086F9
99FB81AAB4FB2A48DB682E4FDA62D54F2790CABD48E0DD5BFD457FC646F513E5
120DC7E4F28B7240FF348C0EEB05ECFF773DA18905FDCEC0DA5A15A341811FA5
53860A6AB9F8DA2E2EB6F8940BEEAAB3BD0225F9B1967236C796F5AADE062DC9
724D02AE983D044C38D342212DA6A878F92D03C1BAB828FBF07C95C49A737D53
0FE4C51B2694D8CD80C4AEFA58AA86FF80AF584E040F89694ED4CA2963BA58BC
ECD94420AD18858E5DD46C165DE78B92A39B162025196162CCE259EBE9A70FBF
F19CB808A223E7EBD85B2DC989B3E29BBB9093FDB9993B6C11F609EF2175FF98
F751839B30CCF2C87C6E998B14CD579977D630CFB625D654A9F571EE04A2CFE8
84828CC00DE06EAD937378BCBC7EB7DAEF484B8E18C17FBD1F144BB2A03596A6
D0AEC64E0810309633EE3C99C465FE539CD056365DAE4FC1DA3DF1ECB7AE338A
026F599DCE34BD50FDA2780895391F8E8A723C50544575DEC44A4A6C40CBBAE4
4ADF9B92E04C2D5D1D96A74C651E902813E0847222F1E903D8B81B2CC3787F66
E371E53456CE3295B714522437760159DEAC235C6522039180614B782D5A671F
04EFDCFBC60D1FA34D38D0DBF15C57A130B12E5493B943800DF3A8BF49F0B5B0
2FD4D50FE0C8B5D846B62FB23BD6B5521670D3501AB1545BA3DF76836F514E0B
1EF5FFF2C468880388447AD3172BEB98463322233B284EBB60B62D1DE6C3D804
95F251B2B274C27AB8F2EAC98D742F63A1AD9C980FC6F26BBCE1D9AFCCE39F62
ACAF8444AB5812E029ACD6086B8C0DAE00C6C757576EA0E462E47CA2FC9E5097
76B3CB8272D1E21C7DD56B051BD1705A77BDBBEE4FB5120C54BFBC264FFC10B8
0A0ECC7AADC02DE049BDC5578B4E507DBCF8B9DA39F4D366C1CFA0E991851540
E602D59250E5BF7C820956BE5046600477766B5E78C14298A5EDBBFB943CC9E2
0CC7BA1156F4A34A3E30F25FD138EFDA9B3A2D4753197221FEAD73BB05A1CE43
05C3A2FB7BA95475314D8B3C3A158BBA0810015A00DACF388EDF78DC47FDACBE
7721E41416384A028030B2422A09F093C2F2D60F8105103B2EE725E53F7FFFC7
124E560C41A0542646F59C24341C0EF8D2870A81500C457B9FB34B42E197E4AA
60F737C9478189421E92D15575ED2D06E6E8DE129993E76105ED0A580595986A
9B7BC6D57DA14F565673534D4F0142E06E68B853636296975A56D5C637D5110D
238A017A6B06B8079A5D498E84FD5BA282387362DFE18FA3ED3A79FFEE581C9E
C5997687718B3F4D0E1FA59CD445B8EE0EA1B22E16AE0009F0A32AA423151D89
158BBE2639DD65A316114C5C9227FA88CFD92119D251D8E38FA38CF9B5A9FE9D
9B0BD9CC9EE33BC7BDC0FC25A7329748EB92925841C21E99E5ABD91F1E71E6BC
2A11D6F520B7C6EB672ED1E0E4AA6C193AEA979974BF73C50987A57DE89FEE0E
61BA41C54AA140F69CCB08CD8DA62984A55C2B5763C6A9DFF51A6151A3D10CF5
A40F0AC5370F7BE00BEEAE93DB98DE23F556C51E446CD307DE389ED82C9663A9
732EFE80C41AC40235C7389EEAA8138CEDD924182C72552907FF630361E78AE4
61405AE1407ABD1633EDF699B3651E2C1B6985B783B913C29FF24ED76A04F56F
58D7693A631920891DEBD4F8C97C852A66999DF299D354C8492DC507A47834D9
27466BBCC68230FCFE50B64F50A7E3A67BE6D5A7B6F31039EC042CC8F25AD84D
49F455F6E3BDEE6ABE57C0153869EF2B04A986438169959666F4CF8166F0FA07
055A3D679CA9FD6B0E948B2CC6B210606AA9699F02793FA0819B7147F3DE2647
2271B0ABF29348BB3CA81657CA57F80AC9DBC7FE32ACBCE3C664B0FDFFEEEAD8
4801EEFBCEFBF46FA71DEEE3070E935BD8F06D362578D06579BBCE87B326FB85
113CC629418682AAA0756F929E2F0754AB827AEE39220B4F1288E74ED605959F
DC21DFCBD5FD9E0D3B0637578EB01DA3667621394FC0BB1265769E5A3EA24719
C144A6071FFE3D67094D7D1B2D9A1AC01AD246C8D18FB841C74818D2D2296AAB
7D8607B409619EEBA1BF2CD6418D583E0586885890F8C0ECB1E4A610A576B266
97F65B527B993BAC9AA4C832F7AF961517E4CC637C03D34511E66E46DE30A46A
0AF64080F2D57D71D32E4919625F689EAE33EBC7B94992E6844A31447DDA56EF
A8790D26443645E03950F157380BEBC5295E8F49DC64E5F7F6E6A094EE2FC6A6
FD5C2A58152EC32032476536D55E39A7B69D5C42E3D873CFDC2C469C8CDC4058
BC04339627A3A752BAA6EC01CD15C03E1967EAEC413C453E90A8A3319D799A45
F60059C4DDA919068C42DE9AF272B86ED2B34D19EDC2D37EA942A67E706DBDEF
18DC0C0804C53650EA38289D9929CD31720FEE80C43A6B8274BFB5D47CB4CCC1
B9546E4154349700EE2904FC30BD1732B9E75E499A4499D2B32147B138FB0AB5
8B1E33322841DDD7DED6EAA5C4E9FF3A085BBE8E7A79D3C0289CD3D29996FCD3
99B2F36B62F271473C8C63DD200FC97A5ACDF1EA494FCECDEC940686BD978F3E
54A9779BC111A4E869275CFCCA637A6F732C4B4D6E3A74F2937F0BFA762AAE7A
3DBD92098189683CB2742E164B3BFF9587B9416E7367C72E30E7E63E47F84FF0
B0B251A05A17080ADA886EDF5AACC5597328D43F8AEC60B2019ABDFEDDD83373
AA3545C7B36119FBFBA42B3D8E6CE9FFE421AA234F0DEAF6463A1B68136B21C4
EC0DE9579AACE5807F35454E17302F91EC78CD644E754366FA5600676FDE207C
60068D10F49CB3C8DDA06F5872399D951E7D043BB71D5AFECD8350168121DC82
58596FCD2973F9464FAED3C315EFA5D2199BBC902A43595DB07BBD6C3C56396D
D82A396B881DE9C85653E2CBD52713E0F0954052BA13F07D41176E5207E8A4DE
6714EBA1F3A829DD1CF73DBDE9DCBE2EDD2842BFFA459AD15340515AB0541311
42CC1608E30C2296B8BC44191C4DCC87CB2328CD8ED7FCCCE28239F877D83D4E
76D6969F7DBF7806C7D90F8C24B4740357361607817E9F2261AEC80F7EB3278A
2D9510C59EB0D812D8E1177725E46A7B2F5ADD7D774CA38772BA540AB8D2C2C2
559D70A1B8380F4DB9B568BF3998888C78F6FF5DDFB34D07FBE5E77ABA525CE8
EC8794D279AB3C00B0C9642565F4A852296C97502D853DF514A440D8A16A20A7
A7595D328AE9D4235979AD34505CE8F07A904118E805BED192D2C01A105D642E
0BDF16938F604170272D51D2F1FC0D7F53ADCFB5BABE0EB9FA93D33055835058
116E6CCCCC0D32A600DB80D9EA946CDCEB8571D52BB19D42A32A87D8B14AC2FD
5669D157D563970FED286239609D959B3A2821934FD8D8B47CD8615313E7456E
13F453F6516A0B0271EA4E9CA32F36B2ABDB148C0A35CB7B1855EC58E944C68D
1CA8E589A71B592716080DF718377E30A07E28BD2798FED65A71391AB3DBB0CF
6413143592B1BEC3E4B945731924DE05764E84E2830DB4F2615432F77403E67F
994B9D8C067735877A98371888AC68DE36B34B2F18DC1D09CEB761DE933AE8B3
7AF11F67EF792A25BC49A7F3B5D4DA3A4477F45E556EB9660E55DA741DBB5610
2BE2B1751FF014539250084C6E4F21AA571069DC8852E8E53E2566FE6F340A33
9B9958A15CE0C04D21898E255B43C9341E55BE4CFBE28FC9C82B059685F34F83
A08AE716C3EF504A1276527B9A830D312174E354B948B931356B9587D9179E3C
A69439304816539C44F59021DFFBB66ACDDA466E44B3AFA68044CD668A1FB17E
594147CFF7F61957E018EA9CFC6E0E14AE181212728EB724744CF4D0C8B902A3
FB14DDF4D3D64B896711D79CEDBA8BEEFEBCA1415476FD16DE755EA44DE45ABD
11F26EBBFA30836E3E902FD276FEE77045F6CE408CD8BF425716F8E8866E5B27
40C1DE527DBF6C3EC79176328FFCFFA4EFC91B399AF691E6FBFFA3B0AA16A8A8
F3DE281DEA69B13DF7A3DD35E0E6315073056F6E33C6AE54402785185707F3CC
770F6576B0D4545706EF2222391677F36E74075D9D7227444C991511A7794B5A
88A05B872B405D41AB78112ACEF9052643B43C5581A503D02DA3B58803B03DCE
13E815D2A4FA25B58E7BEC2680A7F3152BD8C2388DA193608025C0F92288B04E
B8BA4AA29985ADCC839FB028C7FF247006D06335DBCE0D1685BBFE055CF09F3E
9BBC39C349D93325CA98AD636E7D73E612679472AF6E0C16B45BA5F1550E6D07
279D20E17D6465B947062CAC0CFA881D65F8CB127FF9A953E4D74257CE44F844
170EA9248F0B24F1B3ED0F50362A3EFF9E93534A6EA0DC6FB63FFD8429E5158F
52C138210B95A0099E68E638965FC32200E796531DE473ADB60050502974D11F
A96BA8D2418453A5F1C325780966021328F585A064261CDD2AAEE7A721684BD2
3D471EEB7524F8520094A1942310AF7DE34999FC3E875490D3CE842EC70D2848
8630E0EF4BAB78C49ED02C236B3170FAD4219C144A2E39AA7E85FDF94148B508
1F5E42693FAC8EA0F6F938984D5015287B9553436966C89FAD0F71042C753D7D
9093DAAB2F7456BF42BD1CEA03F5375A894BFF3A65CE30A7E16CD81972438FD8
981FECADA94BA97225E99677EA1AE511C7EB6F4DDF57865FDB2DF877D8876188
AEE1C0B91EE4FE1B08999073C93FEE27567FF61951AA6EC63A1CC1C5390723FD
FE6BED5BDB04FB5A8668B53ADA042D5CB4B41A82D261C3FD848C003907C09C2D
9769E55866523EF8A8B78CCF2705B56BF80A03D7BF8F6D0D96D4DAA81FBD8B51
A4A954B5BD318239E67CE2902AC2980E5FA979DF1393BFE1AB3EDFB03496321C
19F2758641E2D9B89242C0C4B40B9D802876470A904BB310F4027C0834E034B7
A1D10EF04E9C1D1E6EAFA5E4549C371976C5FAE1625DC9F0FB9C024ED76D1FD8
8EDF248E7B04BCABCFD9605D43729F7934CBA23B5ABADCC34BDF8B7010BFB2D2
CD5539D40BCEB41F264D0B6E89B8F3964C88A29A2F8F9AC42053C3C5A36DEDE9
349D23E6B210FAE34783439709A6476CBF11C9EEB0F6276A502986275290F09D
987AC395EE75CF34B8411EA8BD3F4D0954D767BA1DDFB166A5B975E2E8FC27AE
F7443895AE423542D8B7CE8BF0AB74E5987D9A380A6ED20B01EF3D7F39FDCCD8
FFFF8CBA22CBB742A5F3B4EB52D86EC82504B2B27CEC3EEC7192A0DEC6092A86
7596E86C4F3114B33656FCBC32216718444B73467E8BBB768CE6FC483923BCDA
D6AAA56249EF9574EB4041B076A85946EDC07DE3D586F1D6C9A2F69C1EA21729
967AE4AFC8DA625292F0E0CF273DAE91E9943700ADBC43A83DCCEB51CA418FCD
8080F8C376CC6036A9F1476709AFD43C65EFAAF0F42C420329B237C93D4C6900
ECABA33E5B5599B188AEB7C9B122294D68D4C5116AF2A485C160E4A2E3501134
EF4190F4874CF2A38C725F6AE10A7FCDCD890E937F0B5E031B7591AEFDD39D21
8522C9FF96A2FA72D1F0C28705FF39BC7A281ECD8DF6B0748F4824ABD8B12297
8876A91F56C03889E9EC07B2A136BCB4A08C648E80A1108D934E22549F88B46B
CAC212F08C360EC08BDFECB3B2F880381DE79685612E02031058A0472CE2059E
67C1F6CEE34913EEB6EFF551FABB42544DB747DCC40FF8A62E64364D24B4F379
93FF43D1707CE00DC19F477F1F73AC310236D150B10A7A090ABD457BC8AFB904
46BDC0BDE4EB6C9BCA93B5D4F847057354521E2CAFE49D2B6BDFC65553FDE7DA
4357E51347A0B792314BACF8E6C0AAD7054A492403C7A45E089A6A844A032A44
263A8C70DC3D14ACBD1BE9CE8465640308E011133DCB9E63161226917CFBCC4F
8931DA3107F9B33D32B4278182BF6446C8FC2C4B1CCFF424CA431D9E79C5C90D
E4ED58C70B22F24E529738A30A7003710AA2039C62248434A57649AE710A51EF
F99A37F4A4A2FD57321157F8E4BA84D905DA1D90643140C174A6153022105F96
8F4E0F5FC720C82B4ECBA679E67E6C71F419CEB8BE377A715A9E7AD55752A4A0
1390A8D2B0D6037CA19C342D483D4B2F16C4340E92B1E3F93063DEE410B8AC99
988DBC29E88B31850D0DA0DD1A1CA0CF6E8CA5976B268297AC056B397ACA9B9C
9C9754A2500C98A37F70B63A6531C0FA5EC4A02A0C6AE4E8DDE95C5E0F31FFBE
974DCB39A2A40B51ABD30079F0A2D5350F57C825F988B0A11D1C620E10F782C4
66BAF9ACDBC0B0875AB729C6B1DF81F3959868783634A1C598D8EA1F60B962EE
D803FDD92EF87594B1C1B25F0D86E0ADB863EBD65557B12AC5ED0BF4F431296A
F2E7FEE8A9A3ADD5BCD7FF417F22535DBC1B236088E944A6A048FE9921630F9B
CC270FED37EBF5C2C0FD22D46E7681E0FC69B78950235D5BC5094EEDD756179A
7549370716BED68F5E3A027390810CC8D93F7D31C2B2B35D6487F41A58152980
A2764B36AE28509C56815FF70FEFA19DA335BB3890AED98A329E53A1F6009563
ABA1A893023A8B0C34368386BB33E7EA5363A845EA4BC4A3CD7D38C9D3F6DAD5
1F30D4A2B9ED08F51EE2010BF44C98D40FA049830B80642C0E96B57C00B4B41A
D7F8B71A32A9C8CE0738C96ADF8F5DDC3BBA41CEB4AE0795EA37D6695119C3AF
EEC274E83F275860FC3070EAAA83D991D68BA855D0A572EE6372064E9F315C7E
D9DDC5950A251FF1519DFC606659285EC2846174D3776C12E4FE10007CDA37A0
01D9E4809E0C046DBD4BF76BDF46EA95787854F05AD7E7570DFC67CC080B4735
0ADB4D23A34F0A59F6DD8DAF6F7886C642A9FC208A56E9183B5D71F0AFB8C98C
80BBE79C651394CCC742D0487210331DE9B4BD706114C96EF797A6107D84B777
C471A486994E112AA6BAAE0DBDD0BB9FA539954A80BB80402D3606096B334A7A
98DBB83B0CB0C607A668DC97028A95D9E19FED284E10021FBC5492D4B9F99640
6DD09E163AE2C3A28E2A9B46D470E9D5F8DE5A40FA356492781F6B9A84F78CBA
AE97EF617AFD4860B9B40C0D638D3C498A422D36BD57F9D5592A98C001C44F4E
32BF2513F5ACEFDA4E1ABBB80A486878FC963DE59292356067724F04A6CA3B60
961CC6BA601B26F3E40ACD844E3367DE4D31D92625538C11E54DA06481D9D58C
17DFB496761E1598B303E64C64B1D6CAED632455A34108C8D734B23A59B75330
2770FB72FB1AD89739075A32CB24D51C5B74CA0A937741AF4424C18F9CE9A014
2D5FEAC21133E163ECD946A77EF8FA1BEA7C060DD4F7A72D9BA31992C4DC9B7A
8A52F03E98A0977372660DA8BE3C573764CB43E77BDEBDA226EA564DBB849929
4BF0969DCB8E2E492FE4959D32FA1F1D5B4133F3B0E61D14AA6BF56E22DE7B41
71664E10F9D9E6EB1F858AF4E8EB103FF569C134ABD018F0E6B5A624E145DB59
EB2E531D14C1974CDF4B10C311743DD9AE492797EF822227C1663EEE719E0FFF
61A395B7A616A87AD7C0853A0FB7756504D2041929470EEA94C29A37384A7F27
5A012F482FE4E53A95A214A1B0323FE9172C5AB0866ADDC2CAFCEFABB89E1A8D
2DF9C3D449003CCB534A9D5D60C9A8B9E57E668829F6B471B01B3F94094890FC
AD1A887E0710270F784B07C5A61B1242F8F35242E5CD3429CAFA178135F9BAE6
36BE15F63F77A4A4E92DE03AC65C7631CF84E842D002315F8F1FA501A9517242
6FE82D11D21C5E99BF8B38504301655809349A3ECEBAA4B558A33016149595DB
67EEBD7CC8945B1B2E480BCC9A3869924E7AC32C14A895A5D68AC421347A1E90
7C44FF35BB77B8D66FE7B3BAE99C01F21CCD3FD42447B49C723FFFD169F32A6B
88D5E98317685D14CCC9A8FD3A1354B7A8274396960D5E62E7CA06A9A18CF29E
EBE96FCEF4E54EA144F4DC668ED50DBD78170D09BADF5A8EF0B201E766D78BC8
EFB05B43DEA0F98B7ED4A726018DE9E7A59BDB297113A667B6E18F72518F0249
7A208CE62BF18DA241BF0126D0EF27FC323C2B4A73D37A5FC3354EF2F83AAAA3
F4F68A8E2B47E131E5C515648336BA670811F1B5C9F67682669A9883E72F6837
10CD0D66C6254381A5C8AD5C69807BD8C5823840A4BA5A137FEA87C0F9D060B3
1C8A39AE64B3FEB09ED14291A340CED81849ABD7762E030A0A718C61A9EB590A
3804914D85FAC0FE00F1547F39EFDAA6D6B2A0F9CBBC4088C3DC249BB5B6C4FA
1CF1224481E689A4A4CF3B374743DCB96E3B76C1D276C1065C88292D08B16B9D
C1E4F76CB96B43268983F1EFFBBC963532BD0D0468DFA4C01C6AC1C36C72AA60
D2750F426C8FBE5288FA9C2A980575F1B98538F05A4B82934AA3A2D4B3BE1734
2F4B7DFB22ED32CF0ECD9E4905F5BEB3201E4DD8A9B7C73CDCE05ADD16EEEB9F
8612089BEFB83901F16C454050B60385084EAD259997C6B6C9BA4033F803F0A3
6F6ECDB97CDE5A7B2EAB99E535AD9958ED85455437D53DC2C29C87A93F3EF0A7
316F5EDA7FB502B70EC670E711E2A331FB912F6EAE8B25D4B10011795F371232
4006585641DE0552DAEA33F1D97B27B4775432331C2B87F7879FD19DD771974E
9FCF6BCFF6A26B2F8D77AECDBC444C17898C1B8AF85541419D363CD34A7BAD4D
E6690C297899F98B381EA4BAF717ED2A4C5466245BAB84CC4C1D1A0777414C65
F7ADA09BC70B4AB5BF75D11B90F697B941C0F2A7118528FB3F14C1C48AABD1A1
444E2ED2AB394E281A0645E7C9D6102F1D3AE812AF7C10286721099EE89F5F59
659A7343149581DE2285BDD64A3F13AEABF83C8A1389AF232D0D726339FA1C99
0616371BD71BFDB818CB82756D8AF2D0495EAB1A64146F2E713F83DB610456E4
CE7E0420FEC7484C65462E39600865859A246AFF174CE3E40FC3B1C53E515C2E
FB11828E46D8ABA68F2955216351CF7E1DF5CE2C79A6BEEF1E5CB9D210104C4E
A01BBF80EC93F7FCFE37458E9CB661B5E15D370C9803E0CFE8A6ABCD39778901
8EF3D6B2EC6EE03EA0577C7614C802997736DB1CA8428459C338D4CDD875C7AA
8F54F884366BC85D5B50DB4C4C2CFED8B67F8125E38089D480C557D3326AF2F0
EECDAA050CDE39FE83DBC1A06BFC4D0DDB9B938098BA23C4A857E6BE32D0AE6C
CFFCCFC1E976105E7352ABEC8F9142F0C519F3D706AC5D117B288FA18318AFD3
0B92897EA0F71B78E0B2FEAB694639E953D9E49DFA036C9F6325D6585A7CFF1F
EC5E2E5FBD689E5FDC0BDA92055CBABE25DCE97FFE6683D5B1B4F12269422895
E361AA2453D7BCA8393FC9961CE65E6EB2296D1AB1CA47682414F4DE32F8469F
C58AA970FF59383ACE9CE39943780EEF3842C837FF0C9C5784B61CC12BA8BBB5
3126C9A2C7BDA35775E8E3D21C88DD122033E1404422814594E75614C8CBD345
91577CCCA763AAE957EB5B515087853E5F067FDCE3B0EA3A208DDE7AF3BFAECC
8CC931261A5B7A1E9805C6F601FD1DB44F1F5927AA3F615DFF07815D99E2D031
FD4207BFEC9AD4A85A734B9952D7B1F408ECB7C5D543843F35468B024CBF6EC6
A03B1EE47316C8D5A29F527EC1DFEDD47ACE721F7C9DAFB6083577AC19299A51
98F2AA9D735B0D841D14D433788D194D2ABAD7B31618A7007A5FDBAB84646516
7A86FB71AD45CE4F39A0283A44C701B0C580EC84786944ACAF5F96032F5FEB90
204011EB446475D47095EB1A1D4BB52F485A12230892CD27A75EAE267C665C9B
5CA22A736F916983F8BDECB79F06FECD5A98CF50A7FE823619AC0B32DE9A5A09
E206AB3D323019CA6BF71073E1A671A22145F574ED2BB3D9DF5A16CCE264EC3D
8E04467CF2867A129E0DD461138CD5DCB7CC6497E22511D4A218143667B85B63
3E61AC06A85FD553EE8057104243054ACC6E0FAA387AFB03A519A479695CC6AE
4288A49CA23BA88562DF28FAB773EAEA63F8A51F040D675ED79A4B5B763F5C3A
5A8C2979DBAEEAF252583A22824B4D4BD9D66A5A37D21AF268460883103BBD38
F5D7CB87D1446B6043C197C8C35F2058E92DB07A5FA56D89BAD08521653B48A8
E8BD9B63C5DE3EB21440D9DC507647DB5C21ACB801288C697DF3878F585D247B
BC4B40EDE7BE2073B2932C0904F3E82E2C75C6445A88FDE90E1D70D95302EB4C
A560385A2369906125B76A6AAE5F8616D2AD959449BDD74166B19FBE3BB93A49
E6FF8309EDEF52E469DA33420611AC04D23BBA00A7FA0C5F1371A4DBEBCA952A
3A3B0C9E8022E9AE714121665B625BED10CABF099F7E4912D8B8FCAEB5446438
28C719AC77CF4B3EB62C140C17D9464076DD4C1199FDEA290C678A4C1488BF16
286CC68F6A391352AE20514062350B7C5CD9546C9B561F923BA862CD3D683024
D76FF83372FA24B43FC2231C1F9CC3D24460FD86CFD0155FD038CA31B24FAA72
FA92A4D37E5E519D68DA47E3A465B18A90F0A33F83204EF4CFE7785F59B7289C
27C8EB776D4AB1AEB0C164013F3F310A4D0FF1534976034F8C04BCF0769F6D1F
7938AC551EFA60D6C0D4B092973713FE5CC1360B27347D1FE7AA4AF550916A72
DF4665EEBC80DE9E77A6F50D57A1435BD1B90ADAA6B1323D033107F84CA26CAE
D8CB2111B9AB06ADEDE65C3C1CC761FE8C805163A6957D55237668D00F326281
6969B1D3355973809E8564F9ED7BA3EA85618EDFD070F06D202109AB07B08EFD
109C63645CAF3B5D7C05FD933252AF14C2AECE5819ABADCD8E99C7169A7C540E
5FA7059E8621238AFC1808C1543E5FA11CBC511C3178F894B9F1B5DD61F43DA5
E31E226BD20053A4CCC2310B421CF752F3CAB82946D595384D10CD366D54A0F0
B6BFD82AF27D7AF19A43086392DE9DB22801A968E08BE6CFCE9D36710BB3732C
2C0A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/UniqueID 5020908 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662AA0C3B597123548EA9580E54EF1AF866B3D2246EB50B888ADD050680A
40B0DED04F57B4CE47288EAC8F6969FA29AA6B28CE5FDECA6909DE6337F5ACA0
2E982F9ED1C700AE0D0BB9B61249DDD8BFF65B53B51269DFB0158C60C1489AC2
AC1DCFBED577038DE80F87CE86751494320449007EA922B5924F53BA2402843D
BA09637FBDD85AAFC17A8E9B0CE1A9508F0F8E5884AAF083013AC5189718CA0E
705F28AE75ED2CC22B05B89ABA446304EEAAC280A94CF9C9280C98EABA19973B
B596EEB41C7FAAB530481B448A8CF6D526BDEE9E8866C5568DD10AB87853A39C
3B61627ECB39D5BA7F8E095B9F852E5F33B0545269CC9F0661D553F814511378
EBB3037BB0667F0382E4278A7F0FA073A6AB3EEB512FA661DACF8693BEF31C59
4F7D0F9390F99FFDF77D85D430A5383B428FC35C43EC628F59BBB3BDE1E3266A
AACF6605C71D7F13530C884868B786877240EDBE8B6209CD78FACCD78AB90162
7FBE024354EE7C3106049D6C9FAA13FD406182B5F62D26C28668CA145597150B
847315C78C3871F7DF0D5B8BBD40BB58C84EEBB414C741759F68C2C9292B509F
C3F79A0124BF8CAE36821711979AB941B3ED69062C3BF7A07119CF1E5774AEC1
2CDA3F68A61B0DD5FF9CA582782EE80E2D289A653949F11C130F37E27A62B17E
62CF33D67D8CEB212797BBE778DCDB2D0F6726BCF115DA15343D86043F15602A
346C1667DC625491A42A8BF5D93FD72804610E4F730DAF2F2D5AB767C320C625
43E266E613D62496D758AEBFBD494623BB80B90C04471361C9C6C67A8FD6A0AD
39AE434D463A1F19FDC6DCA5DD36E1C5E6936F918FA4340BAA063C6C8B2D9596
B95E63CD7D1717AF26AF23F5BEEA4B6FEAD03CB42E9B8E0EE958725486FC8999
043BED6E64D0BD1E9C51FE0264A18B16E899EAB7F8DFD827883779644A3C942B
0D7D8D298EACD96F05A0CC4CCB63E376B4E43248794E4BEEC056EAE4B9F94300
336D866A6E4C83D0AD28B6B5BD224CF20C785A60A09A1E25B7EB40D4BA42B216
990ACA04231A20ED1C32F029A8F864EE7CCC23786B6CC7C0AF9CE66EDE54F996
78C3708042ABAE0FE77F1BB736F6CDBEC9DF77C87EC1357537A50D9811DEC733
B81B8961F03ACA5FDC7D9BE51EA4E8B3D46727F17FF5330C8E628F55659D7F09
1BE655E470D2748EF970AA53A4157DD01B07D0EA7F624CE1149EBF26B03BE93B
F15CF067F25DC0E555E0CADC1F548A46103A05FF729A71670117252E5DDFF571
0CDCCD95CE96B5F2579C418DA0C29715D6B13BC615B36017C2327369231A0E54
0B47430E4ABD99C86F6958834AF7BC01859FEA4A31F41D46DE8BD4C3861A2C83
8D3A457DDC7159301B785D82D6C30A0D0DE20F55F55CF475A05CCB899B757A6D
C6D2662BA1895D1ABF4DFDB9797C4474DE88C0BACCB45A0C76332484EC636B9A
1242AF641062060452DAC8808AC5136BAE070410145447D9AEC13FE07903B8C5
B99C0E665FB9AE655C1B7CFBC9F95DA08095B41547B3C2878F972AF40B2ABE80
F73C900BFB294B92DBBFADF0660C6704D888C34271A97BE2085306ED61C1F8DC
75F1856F5E55405DAC7D80D56D8547FE6005FD59FC0FA2EE5BF174809896079D
78312A88B6D0E06E09ED4EDCF90D1A4C43089BE1328FCDFBA6D27519D0C37098
3483B86B2D43AC2DAE5A9140E36DD283E19515EFDB395AE0EC377E7341B53583
0225A5BBBA12344A536FA0DE10564F14288A54D654C3353B81F3B60ED01B8D97
ABE4D631BABBE8B563636033CBDE356D3CBB99B217ADFAB890EB644E5EB55004
A425E4A1F781A998D6279322C3A53F5084E06A66817295F1A6D401C4083156B9
DEA9719BBFCE395F8E831D2E4392710B71CEAD6961A7849D87D5D0A37AFBF2F4
8A4FC1176E3209CB20CB0A7E9BE1DA5486B983675005471CD15DA7DBEC804071
0A02B1A96266D26DDE578C5996333B57598A266040D2F224AF77B825FEF9AC21
FEBAE265A83CD626538F8B470EBEBF592B8E085EC8B1A481733E3564922DEF3F
611DDEE9F2986613D0055F2B0C16C75AD6023A12E1D79149C0082E0A7416DD01
2A07873C62DE3C65B599089F90F2574862A28648A0D11DD3392D7B7EAA2BDF82
C3C05171B9860BF9D07193F0B51A19C840E089D8A9AC18DD9FCB18C4955C32E0
BFE0F183AF58A4BE6B5DCC644A277B6AACBB5F71B3C8226F06FCBDD19CCF31EE
461D3A69D88579DF5E00D626CCC1E985DBAED11645ACFC470D5260C11538349E
CF80BD35482A13264D969B2A8CE1D62245258D1D8033B9578FE6838BA3964FE9
1CFAB4337FCE106EBDF8371373DB98CFDD47057360C19E42B309CCE34346EE8D
24AD6B087CA7431B6A5EDF6BE7AA5BE2198117C8DF533AD98453ADF736D0F34E
130AA51567FD2AE786A718661E2F086104971A375C0D65448BD7360D6C67130B
97321EB22E50650B67605E12D3BEBB06E73B7249B668E1E939F2B21C430B17CE
0A6809653CA237F37ADE2FBC759ED994BC5E8E0606F53393BC26BA1475E30D53
BE80C22AF253F3A2EDEDEEA1A22C13723B151513EF97B8F949C489F75BB9BD49
055C7D4BB32407B03D1158E844B3E110E548452E2286B0D55271F4EDD9EA02FC
AB5697E147458217DB6EFE807CCA7E6D7DF3391C168C86480FAE64A8449FC5E7
D7F843C542BD532B9F10F4B82996E587F7A08282D527F9C2F06B75C5918C588F
3E7545DA30AAE86825726DB57201E31EAB39B9546F7820BA015D8F05A4DBF34D
61784D050A462F3D03997C356280831F572E592565D3A7E5E87176574CE31F4D
908EB4178F40AD2D130808F433416041FF919D2ED457397797500A9B31A5EB38
DDBBF6397AF2523E0512B77F893F5C33A907FA0DCCA59B82A0546E75A300DB5B
AFF3266507A295D15F1ABBDD153BD534DB8EB5B545FD215D3DB5402650DDC636
4A1C7171A621F3049D87CA02FFB112D22511A204590ECB9CC3EDD5F2B49B9B99
7B61498B3660B61576C5550D9675E9FB882F1423D01FB8C99F156ADAF3824026
1349775AAEF22D105AB9820698D420E79AB12B25F2B381F3979C6AF3C94737C6
B7F376760F3516551E7388D06C563DE1C0D9985A3DC38B7810B6B364B5C484DC
8ECFB7B490063FD87B9B9785FAD669D0129DC539B74561F8773FDAF8C7E9DBC7
5470CBDC08D0D7062A4F4D775CBB07EB7DCC3990D230129FAF24C8063D137493
5255BA6B767C73FF619F3FCBF4FAEAFE55B8304DE67489D28327DEE63BE395C6
13CFF93BADE73B281F61BB689798DA8CEFF85EB030D1CAA672068593E509B1CF
6323F36CB82036AD3C955599BA8CDF8AF5E3962949D4FF2058CACFB7D0055FB0
8471DAEBD4F41696C27B26174D8C6AB53C2898B7B2CF9CEB997B6038D91E0520
89EC1019A699BFC0B88D2B7EC401EE1C1E40719492577AEB487F08D2101892AB
BCE3658B140FECC0757DA856FAA43AD737C80296E7F390519DC7DDE32DEB6AA7
1AE1A10EC2CC2AB71E33E38371302C0986A3158C3D646E5FC5320963AC68B99E
C3CCF9EECABED809A010A45F2C8FC6AE6530BE8444C1B41A90EE450929C03E0E
31E797C97607C20BB1A2887107C1E9586A8809147B632F602336A9303980C051
1FDD056D3217A203A67371DF9DBC188843B9F3C1C7AA1500A7B415EC9DCD1F80
145BAE65A1F7B3E191E034EEDB8E0399474BFD9B8FA5F6C7E1CC687D462098F2
3D808A96B8CC8CA73F8C5E4B557AE3F25F1A6C2F44C7548C6FB5F2B4B89F8E79
74180C9F850943C0D6260B00EA498ABC95969DA57DABAE8BED7AB8DE8C7DB29A
A53782A09034C1F9B1FFD75EC0CA5F2491A4A5D59BE367F36E53144E33F308DC
7FB70C93E10C85272DD11EB5A8D4CB4E69E711F4A9F7D6F44723FB81EAD656E3
14513BC19C978BE54AD579294C018FBE64A3A7B31A9B1E9601A7DC91000D1D53
09F138ADD11BBE598F7135D8D1E55CDE995F020A6843C1CD6847EA5F957A7538
C8F718DA06C27C4D3274996AA2625BFA05D75B6A313F42E2D1D8BBA8BB3BA531
694A8293C30AB32583C84CF7BEEB0B7522D670E2DF8A8D68BDA5DBD5EB532FD6
C9BB96F62C5C2963D1EBACEC27576D971C2DC6D490F6F0F141269A875F3EF285
CD07CD053F6E13C78E2ECE5FB346DBAD2E394346B8EF1ACEEBE7E3B5550A2AB5
B1C2576E6575AC7661AB57540AD2682477CFB7FD0CB6CC6F175074FC77EC7E42
66307EE5BDE166E2A44601BDBD70E64C18B31CA1B4C71DF869457CF63F16959A
78FA502DE84184401EEAF075A0132C7EA47D3CCE24B8EE6B038F214DB112D5BF
0EBDEB17214B6EC6B32BC4B6E5406026A13C54710A256647CE45765A0DEE2BCD
8A6F2F06866B528753667B17A70DB3388D91AA2D42670014B3FA113AEA2A419B
95D7093CF390DD376ED28C5959F9E0EF2DB1352FB9436C210ED16DF433A6F335
14AB7D944A02ECCB11CE14B647A669529B2EB3BD2F3C60E67EA9F87C3A32856F
B12D524B59C3FD2F9D41964ED0EA3689C7DD42046C70FE25670D268484CFFBB9
550EB22082CB7B5B5D8F1CD2A8873F55D5154DF11426C077C17C410E14C49DE0
A6632C64D59F2273C490432DA4F3BC2FA3FDA1F3A5099B5ACE9353B01ADF48F1
C9801A67C927C44D5F5DDC54A6B9553468F8F5163D07E83FB5C77C5D8CE156CF
5B9A0BADD40885B34DA8B51ACBBF15F4453B7590DA513FC3BF91348837C395F0
117E7261DFBCD4FF6BC92255982E32FB9176F6ADD9F34B37731E0035FEC81568
CF5160E06A7D071DE9538BBC9207BA6D05AB2996D5311E568107D7620E7FB3A6
871183B7E7C5F8EAAAA6EFED0A901D0FB24BD9E3AEFE0BB8EDBD94C8DB05686B
444014E604BA5491763F9F18502ED255A422823459E3FFF8A3AEE4D4210F8855
DDE248560C78174DFAD03F03E0BA8B3B09D539CED2E99A33B3479F34DC2502F0
099E1B9FF874C9847C68774BED30ED858700746704C51DE3170B9B0EDE2A93A4
DE7A99C8D7332D139EDB9C366C4343921E11735968B15A92856114270693D6E9
A3DF7167B580C3310528B24C92ECC0ACAF04F11BF7A1D966FDFD30AE4E46ED8C
0C052C75E0D6D9F89C2B88BE62261D81DF91C4860313EF164D2C47D30E716A9C
822E325486044B3A8EF83E0768D4F53B4046050FD9A07296B383B39D1B616983
782D9E3D3D72BB003B4A0C9D774B1135194BC1C73B3B1939AF0DBD5173E25E6D
9F63591F45B45A0A9F35C0BF3FBE992EFCC0BD99230132AA7E4188182CF55954
F1302E1BFCF6983868BB7FDF9138408239948E6E82617934C315CDF94B0CAC9A
06974AA534AE4DC9BB953FC69312F3EA272E602EFE8DE18E05BB1EA43CFBB805
F35705AE3703F0DA2EE3796D21B71BB1742171A1674A1B37C7B23DA3485EC648
279746CD862E250DABDD4F6F3446774FB654C07C4B9050A16AB827671047FBE5
6CDA83C7E064928A77B3D9C9A1B66AA1F3F0C7C414BC535387E6F785F345B7C2
90BE6BB6C80D2A4A10A4CC127FED26EC0ABF56662DC135D477AA42F18E39065D
67DD8C9BAA3B6BBE0E9D56EB7CC584D487E733681967226E2E2EC46F6E3E45CC
76EA7D06377E130F39EEEA0B69B1EBC8749395C8E9F3BE781CC8D11A4F58BFF2
FECDCBBE246B976707101FBC4764255FD410D6BA9F3822CAB64A98026255E5F3
195ED056D50EAB0B508A42A9FF62983519E4A10523D0B4AC91FD5B030FE70D16
8AE1C51159C01217BDEFEA1E0E90192996B78C3EEE89AA47BA3E117D7F6E8004
46E4EB6E3E2E62BC21CEFAAF3FD966770CABBA399D0A0585E08DC36B8ABE19B1
C3CBEAC45ABD24725D84058FC1C17BD0E95729C2721F878D2BFE4B4C29399D97
5C373F1BB7E6375FF6908D9591C15B3F4FDB520E34C9C513826DEF08A6AAF77C
01EB27EA837E54A60DF174B8653D7181B642BCDE3FA20B0988EC61A3834551C2
381D77E27509A228A6F0E891D8195D49A5B7298748EF8978D9A0D5C8D00ADBEF
FEFB2F3C56410176BA93D69681DE9460A861B925DF567116BE738028E528C92A
7D7DAAC14AC699C95C4F811556093A53D92233F07E1538AAE590661AD45E4651
EC68AAC18FEE1C86AB435ADD22C0AAE985FEA4D62348E6493A29C4F69D6D4F89
A8E10271A68029CAB3E65FAC48B96DE7E85348269069BA758F14A411A9B200C0
71F6A63F37D7677FE6EA9E16DE869DC3727A1F66C76F7DAB61BA51486ED301A1
442AA21E3FD76277C7B00BB7B7C795CCC118AA1773B75586C7E3DEC3E3330630
B97D84E04BEE5D2624C094F1DCF0741097F80F29A954D3BE9CAFE4BEA4345DE1
33A28404EDC6EB55875DC03D1839C2FB2E48D51B6DDA07FAAD885004CFCAC09C
E96A14C166A1F7E64369514263D87862DCE39216B89D728210ECDA28F3917004
8EA77AC7549E433472919634EC8DA11A7B01B8168C34612373CFE7652FCF27E5
53A429E2557A449E6C506C1E04C2C7D4AD4C792F94D4EB0C1FE9D461DE972735
4823D5CA448E61ADE81A1C4F33AC2C670BF35D089BC8436BDEC706089B794A2E
1D368986635468D75C13D53ACEDBE37CC5CFAF3674408E2BB7389A91A422998A
36A1A710C6769BB70A9B66C813F99D8C1965BB2E22517880917E0051918C32CE
6AF1D07512DF81EDC3DECD2A969C88C7A10FD77ADF47A39668ABF5E1DC68C087
034E31C7674A9D73B6D62F484209E0C0253B9AB11D02764DCA640EB954BA96DA
06B73A6BA92D9C8B65510ECD03D1A5D73FCDE7C09B995CBCF7D215B60A105A16
F10E586D4E28FA256027EA6EED832A688D53453D3E0C4E67368122D7C3CC78C6
7E274887C98CE0F986A6B4BB3218F5C17FEE97A21ACBA8D7224701D18F0CECEA
59A7B3C11FED0F3477D2CAE6ED387E43822DF3BBDFA9EEAD807BBC0E1F7FFAB8
465A766EE59DE22493962E7CF7CB201A694BF0E4092133DF5DC12EE159E3262C
AD95C89ED2A6DCEA6F51106DBA4249AD78D7D3A587B8A86CD281CCD02D0D9F83
67DD3E5DE289AEB78E1ECD86820299CDF04F1D5223F11FC3EA50B8F63ECC8B98
FC53AB66B43DBC6590816C4ECA6AA0C7D9261A592153CC4281698110C6C17E38
61D29811D0FCFF8619715F928D04F1ECFA5AC4D07A39C6CB9CC7E5F1C219ED87
AA79D5F1FE25DB774EFE7A6B32AC2176D8D74FACA91DA39B4D8B83873E0B55EF
E0F18810044B9E84F79B4801D59A754FA9652399A2DC95E5A3CB01E22C5A1195
F5D81808C26FF9E4075A313749F4DFCC9419411DAF9A72C9B1770B0DC8F0B057
83FF7B1D422B79C39232F2A430CE49960970AB617DAFA548AEF39CDB88B2B9DB
F0A3EEBE5EA3A443F1F6F624885EEFA5FED4F9BAA5E6093EB7F4A75183C9F7D1
27ACCD68E73638E9330DACEADB4B50E9D686D13BA93E9E257DF3FA26411BC67F
F81E719D71BADEA429BD93EC21D8B92253BF8BE3A71BFFDC23EDD31B7DE418CF
D419C1C7CC06D4E09140CB9962CF2FF700A3F7CEB2639788E705770918F421
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C1051F17
7F2E8FB0269F00A8A4C9F61FC3EA50B8009493921D920566ABE35A041D01F286
5E2B3E574A9E9A78E86BB5B788713FB8001C0435A2AF29BEAF8B3559A6C72748
CA7C539201BEE06477DC22B9FACB1CBD29E5647531F694BFF0ED77A7847F7C74
1A9C3C1FFEF085A5A87B2B8DB8234F076977B28129676DFED92BF005A132A12B
0D5D3B9A4AA4A2C04E1AFDF8A6B5866B606CC19287478BFD6B8B213C19B39853
2835F26AF7F37F7F99E30BFB9F66A8A8833F7D42174025AAD93953C9F599E8AA
5B732D60633B59C2DC5C080E7881848222220A63605F00205C205B35DEFCEDB3
2E261F8BAE46654CF523D136CCE8B52E83BC623D906EC7632CB075B9D013C926
6B223C04EE5CD63D144DE465DD11AA26F59E2B12CA1CD88BD95ADF73CC036BA1
DC8D789B86226E38B0DB3AFD1891643DF69770905D11D3022EEEE058F0316E77
0CE494F5D25F4667FFDEE2AF8A30E836B33CCA7986436F2250BA687F453D4A5C
F4E61DA5C2E238FAC478170AB546E2F49FC971F94007E7CCFE301062DB793BF0
C98D73A11770D4FAD1B1B8D4D0F6BBFD2C717646CFED93889EB779D89DC56574
6F129EEAC3CDF33EC8821B502104FF31590F567D1D45E3E92FA14AE1F634F3FF
687E1FA14432BFB817DA2C19F0C868A3487600CB5DC8C1C1417C3167002ACA1C
42FD6A3D4358B8623588E7D3EE02742930F99516B2597A022D0A53242609EFE2
6FAC8DD9F8B47025E7F7382C9A9E7F700F306AF2E28A1E1E66A349D53C5A5004
547D9E93E0A89BC49059B8112CA0DE3C6E33CD720EC4BC07E03072267E8ABE97
69AB6F8A4D5C2A8B0ABF3FD27F2823662C07A80565D4311B23CEE3EA3747DB06
6241C94302FBF237C39454C67E01F68736F187FA748D79F84B7CB450A9C45FCC
932A106B5B2AC85293A25872078E4CAEA2436B0A872F31A131A36FC8FCD291FC
EC5A6398F275C8CE4CDA5E898889277F0155E365B518E36D76BA889C4BB94D6A
F4BCCF762EFA3343D9C71DCEBA2CE212711445CB7F88B44D610E558EEEDAC38C
BEE1908987F62A68AA0133ADD133473E155533410E7973C55758853247CD330A
6B61E039648CF6E58A173FC3D7E1FC670322A4E259A6A165FA1558FE561A784F
A50039F200BEDCE7F57392C3D41C5698C9C8F8333B9CF307E9154793EDAE22FB
A40092AF1492C9BAD7095BFE6125C188A53FA2D0813AB238367A14F0ED1EAC26
E444B6BDA89CA11FF988ABB796B6595823707D1A37CD0C8A8B3F7C3284ADD469
2AC17DF0F50CE04DB21BB8B276691749E2E6F9BB3074DA40AFF782CB25E02AC3
566126F3605C5D91AC7F8E69FF15FE9F998D6BDCCF481FA69BB6B02740E8E674
BBF93E87F057BC472913D788E66AD436C8C5EB667A9E200B11C78F1226D5941E
BF08A7D237E81E39B47A6F25B2EC9290B2883555ED7DC703B3EB5C0F679227B6
E811F2C38700DC5D6EEC5223F0FDBF80711A377649E17BE3301FB1AB1AE47128
7800936B812CBED8EC4E0A114FF329C5D7372EF249FA82D2745ED89D47EB2E62
91A6066F1FE1971379E043F280BC4E314A0EDBBCCEB0029773C9574297BF4E64
D19DE34E73FE10D63BED7FDAF89910094CBED95E1E0B88C6A32A3A600D9D43A9
6B9D1102CB26CBE3E62D0410DA79BAB5DBE07B0A843F19B70A1E36D8E39CD804
3BF8DC51096B86BE18226D966A6798BF0B806FDBCCA4518DD1E541D722311B5E
A81935F8964877EA225920F3C7614CD6E9660D94B695125E153D94E058F3B1FB
5B8309A691332BDA82C4109E89E733A74374F9536FC268515F6F307E59C400AA
A9D4A555A2AF63A060B6DA36C22AFFDD2FF708C1A4AB6F0419F9F693D459C15D
45CB50480AAC4A6417ED2D6E041FA990D2800BD436149F76989E8C596CCC628D
7AE7A911A5ED5DA461D25775B0CDBBDD9BE156186BD5DB221798058E16CF0AA2
F0BC4976B60EC317964F2528CDDAB4D49A9742D6EE0D2972FEB9C6FF837BCD9D
437AACD7E833B9A997CA465E88B3C6BE6E884518E97D1F69F6EE5C0591618E92
3390209AB2550FF8CDCBC94847745E5D1AB1E9F77B0F4A5ADA6AAC4AF5B21906
B6E84D094588F9CD1349304B2F9EC45500526C7CAD819FDB734187EC45896AF2
EFEE471AEFBDCFA77B04FBE05790450C55CAC1E604231E3E61D172148F9EABF7
56E05F715A5315338FA6E73ACCB29E973639E69350045D6C39603153EB8CFD39
95AD4EF23AE4E0B652F5FC546CAFC8EFF16F8EF4DF58E7A22B440D8CF1205D53
76CE005F20A228CA0F77E108972FEE2BAB71FCB7AD4FBA4512A985649707D349
1BD07BC10DF8BC4346A3EE9254174512D9B0940FFA97F2BAAE7C7E464C29F2BF
B06CA814AD934BEE98A8F2B43C464F6FBE67ADFC4B48DD83A503AD5C787C37A4
419715688F7A7AB477C002C39ED8BF34725B8D3E16A88A2C6B8C17C2867E5AAB
B2FE17DFC2ADD8C2D299CBB710F342C01EE67D98A78BFC11246FE62B38E030FD
F1E26BEE26A7165BF37E239CFB5020DB68A15951AD8234EBA5D130DDAB639886
6D8EE9AA635D6245374A3C18CD6904A2E532942A19F0512A0B934DBC586BB073
5B06F5DB60789647311A16C78175C1418B5A5AF991DAF15F906541FB5D15E78F
0848BC6723AAB8C4BD004547C597FB78C6FCBDA374ABB613C3D6D68DA8449B10
2B4A3C4F4422A710B0E857532D2AE9CF94103AC36D2E1E53C13785F134CDC2B7
6DF4CE71B8B3368DB2A746A4C4DD82301322BADD90F85A436CEED300AF9BC178
25D628C76F49CC9524B42949AEA9903FE53CA7CC6FD63009D38CF1AF9A339F99
A0BE9FC3C6E8BFB4CB1864EF448FA822879BBAB50BAA2A1A0D89CC91BA46BEDD
78E37012328310CCC64AB48219E97C5D4C7454D57F3670A11457E550B1E5EB5E
4E0687BD2A75EB16BCD26BD752DE5BB21DC9C7FCBF815D32103B1BD1720380BF
14DE59470962F632C45DE55DA1E7A64B2272ABA4EF8AE4AF6442C6388024212A
31754F7150D0967F83E13EBBAB33588541AEEC0DE8C53CA8156FDDE61BCA325A
76ED52B327D02945DCBA64EB09C63355BA19E2A651B9017BC1B8ACC9DC667834
2C191450CA8349B2329C5A790B7E639F78BA7BAAA5F58AAEDF64EF5BD178D748
C3133201BB74EC8B81145C71ED519CD05F2810D3E6092A7D5B7274DB5D20C505
BC9A5B45C48F503DE04B9279F4582E9C9D8AA5F1CC027E5EC2A1F8A255079785
CA5E35F8DE6DC26FDF813670C51886A89C35013F001EF27D0DCC9C061E1C6C53
D89B6F7CA9ECA37F6A903F4C0E93DE887EC4A2CFC53D1F7289C58AF9694F87B9
597D9859DD86C1BAC2156B7719E6332199FF0695A4C6169EB0D8A17F93B56C3E
DEE50B465CCDE3E259AECC85EF14B2CD0995541EF2B3A1A61D2630647720CDEC
8E88CB07BEF7E8CBC0AF3F55A389058F3E4A6F5A3313AC34A06DAE5E8BBB9E9C
9635B7CE630194962E4183C3838D9401260A74339D8AF85616C4309919470B2E
01F294D6E5AEF8C5561F57E66D4FDEDBF9258EF212E5C281463B9D81A24F8B0B
84A532F591C5B695C202D8229D5198031ABA3A27A784D7657DC828448814EB15
9950185ABE396DAE87B0177E6DC6B89FD204E5235E57CC6849A365F9AD3E619D
46A2EFD36F9B6DD070EB10982D93A8B6B7E96B2000FCF17756073A09ABFA792C
31C37AC9C62DC1924BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3F320619096
500067E65955AC79582B2F0C81C1F104AF1E9588EA033D08B6531EE79BBDB311
C102F70F1D2BA88686C54268E19962B62E2588EB6581FD0F073896C2987A5A8B
FD7462484AB9EC77CBC0F708F0CE573338A60AA8AA9DBDFFC35B83994C1046B4
05183E5BC0F514B04B6219B56392AA3BFD21C755DB48EEF3CF6CF84697FE6425
6F85D6672ED5616CD0F9FEB085B79715A7B53ECCC17AA24AC789843F9D31C817
34B48A3D64DA884A3038DA8B1789ADC746EBF747618D1942DFC0BB2D1D112FC3
0AB78F143A126AD84F84BBCD3DD6D75C10FB83D7B0EB9DCE189314BFC6A12892
45C24AF133C1C758731AA348AB2BD113D4C2F5C4ECE36C253EFB7750933EB3D2
690B9A9B887E2E8D782D86C21C4811B87B71B83887423C8EC095EF9E428F9563
453348EDD6DF15BABA7623A13E93D93B163D0804D4248ADA58B5B6E1C1BAFF90
F19E653E0112312C28CDB9DA6E74C62FF8FD0FCC28D1B56F921339AA48FB347E
8A5B99F3F8E040BD5B7D81DA1314C54F2DF2D423B2FAAACC6C946435B4476033
F88ED1887B5309F37F7B41D71C8FF7DA3508F7C6C79F92B4BF4C7B506FC6F6AA
CB84E1DA69D4E6FBEB91C7C958AE1D82EE59BEB9E6ED82330305F77A40EA77FB
4B4349C37F2DA97E67D03ECDCA0FD8808BFE15A1C12D0B23A95AD7CA9B8C5790
903BFF8C8003F82A76F84AEC6703D866CF9D143083CE3679E2524F1346CBA9E9
58A86DB67F479D8DB1E6FFF998B96AB3E3E182E29B819FD861E52B04E00218F2
A2BA4CD7BF56A6A10DEC60C98145A281C544F0296F39189A1A07946720C31C5D
12522AF7CC179184A1D26E316DFD05D033B7BB01DD0B9469C910B7A7D7B040CD
19CA917354CD7B5811D078A18581D1530CCA5EFB31F832A3E9FEA9B22BF7FADF
892965D7D4CF9DB0F75C94CD55D90631ADC7DF909CEBB627718F85804C31C5E6
88F5699F7AA3F08A1AA83C8A5286E8EC064FA76C80E59442976BFA4FB77C5EBD
D63AC42EA143AA617DC3B38D8BB64254D3BDA918345EC39F74006C8E3E93A4A9
CD67F3BF4F3FC8B5ECFAD94A4F160CEEE87C7DA3FB02695015679091890E83C8
7C2AD4257AFB55B2410BDE5A95A64D1206AB59C5FDCA50773604CF19AE6C2C6D
E951F8A49556996A545F9E271EE68B2C1A9C7E598879217F25E3AC6853C64C00
5096765AEC0EBCE0A5A6F7F09B675CC6CB0B0A44F80DD47373B2FA270089FE87
8D64D0B7F7B09CDC21112A91E9A1899803B30214D66A67ED60E24851872CBC01
CEDB6ABFA0E519248D02EA353EA83411C6806A6752DF4680DAAEEE42E5F79F11
5F04220CF89D1702EC91E82F8430E194E78372B68D4DAE29AE87CD7EB51F9ADB
827831E9E24F1CC3954229942165A6E8E5A3A9F220A59CA55A1C877B23F0B118
29BDCA334CD6902B42F1A73E0792C9E78F1F0B69CFDBED522365827677067996
28F35CCCD180DC4D0162133C0C3A39848C4AECF405A6B8726F463B99950C4A5D
7A56A704DAAF9C4D825E57C6F050085274ADB56B59B22413934BB0A2A17EDB25
A80BF2A047252E770293621158C22F176B30E19E5CDDA651F2290FAE62900E9C
6C22F32083FFC7E2630D5A533A61E6100B19061C692DEECD4CBAD38830019D5C
629FB518766A02266391F8AA24B74C146E164A7003FD4B1CB4A9EBFFF45EEE2D
E2B4A5EDC726C7B5B46E87C1FF74C37D70328C7989186D24D5FBE88DA16FA8BA
67031CB8AE33E9C8D1934C3FC1BDAE5619DC56D42468CEBFC00B9309B699D7BC
A18868973769EFF49F17CB5948164FF290F5CADCCC15CD682F83F33EB28898BE
50932D6F4EDE45A80E93509AD2C63A0CB2CC4D7F85279EBD6D47C432C8B38621
184866AEB3C6C3270302C5704AD0C92DE10CA854AF9B4ED5DDD0FF84D00F2478
0E387AA6DBD6AF81AF5D14B43BF2C33DC31FCA94F56F2EE78E51767F35D2F6D8
CC041AE13DDC40D378D93B056E4D96B1E598D94AF926DD7BD403CCB29BB09393
91C345BD03A4DA8A2229CCEBB9BFA92D6CB5B19AF524240A3F381574FC22CEDB
DF32691F879CE75AE66FFF8FB253F0AFA1B858CF4C6C27F074F5E8003C5030FB
DA5EF4FBB65B1882F29C09EDBD010440883FA8DC80D41CF56D53ADC64547BE6A
844503A5099524F362A18868F21B99AD31AA1B7FF424147DFB279FC7AF8830E4
E23C5E0E7E806BDFDB8597E1E6E683D2545B0E13D86206B6550C77F6C9D5DED2
684FD0B4EF301519B432DAABC928EE8C31761E13576BBA668F812989C223C90B
580FF57E5ED0D36273B64A1267A7938E3F656986B6C8C05D7A56A704DAAF9C4C
D245749D6FB26B8B04890816F5651CFFDBCBBABBA6F7D34576D44A44F108ACDA
4E402DBB7F245AA757A20B505349ED45CA1FC919DB6157A5E63C4D68370AA667
18FBEC16B1B605357F60A18B6D6EE4E5D1A32026B5D6164F21E4B13948F568CE
739D1DBEA0F7EBBED6B1E29CD87120148953187801CC5CD18FC784F3E7FFE8F2
DB95A4A5782BC7D53E26C4F00FF61C1C42ED9F946D7234C575A8E74A8AC97B3E
B2FF024BFD60C0AD7FDEDB23C805F0954CF3438178B028CA1BC3EEFB3E577C48
B5548AF391DAB9B119C6057DBFC2B0085C818FDDA774EBDBE7A9501EE8506AA1
791DC55E45724A8AEC2182685FC6700CDBFA869338056AABAD822CB4B0D735D4
6ECAD9B3058B165423F6CF7E88A660686049CE34E3D38D861DBF4B44AF321B91
660D4A48B117D5D4B19467429D32609EF1C4A6D28F3A7386A25CF46386D6975B
70E30002CEB0144F2869107F6EFE88FFAA20E0DCAA36935CAB6B0B33BF674B21
9B71F6FEBD4C077811073FB7BD8D60324833C07FEF505B9F7195A37901E9F505
F68EC700D8354C28DF9541B6060BDDCDCD76341D757B09A3E36CD4E67772F105
BF32ACE8505A6AB31B3C7043762B482B770A7B82B7B40EAF7DA9AD030063C3D3
90A2674066DBAD1A9C3C1FFEF085A0B31066E217CC46FE08016C3DC5161B74DE
04DA7417CEB1DB2EE4D976BA9A90F152D68E756C29A24A789A87A919CC992C8D
B9C7CE5414E5FED0B0BEF2B5C64631867142B3D0FDEAAEBB5289568D37943CFE
6B7DE09DD4E820640EC96396686444F42CCF062A9508DB8C7B18CCCAA5EA627C
4D00623F8A7C29ADFBEE0043D4664253B09D554CCF9C8326BA9BA96C0BDEA6EB
91B6B8EFCAD3A6D8378FAD1E09627186E9F40DF393CAF0F0AA8A81AB02413A20
98C5563083845E02E4DFE54656D599F468223E890CFD1C65536AAF054BB91545
31EBEECD5C8A5BC1850FEF54E96DFF545D63CA72EC43889DD76E590699BC2902
CC7467C4B06E2257F6EB8031418C83E0A8AAA0F61F3B766AB2E86E8E20702E2B
BE02E0FDD97AA289F96062D48B5A16FB4962C239B079518E896FB197EDAB1434
BE0F4866EC9EB9B49FECBE25FD43EED0CB337CBA10469159C130F6C85C21A80A
68AE510704F729FEB3AC16B6E3061820CC69F0FD12D2A1FA3458D37F8CD2E851
947683E053C75AD80244BC4D6F73FDE34846245FB19B5036E5A40C56E1CCE57F
174F07790D00E8516917E8ACBC3521C7831D6A1FB86DFD7024DC3DD006B0EBC6
DCFA264974C3289049452E49EAACBEC7B1BE08A67626A04D0FD66A5B91EAD5AA
B1847FAF8C434FC62EF0EA43B63EEC52D3809C324768A8A9D1DD8EAF0E27D8CE
DA6F970E0F93D4851BF5243C17502D00B7C8B1D3E015F0C3B17FB1B859C70B9A
04D05C1AC8259CBF0D0F2B1D552E4DD8505157410996FF8FE091B58C8CED1D54
4E8964FC3E1E6A17E8531BD8E171712BD939ACA8D75218408A1A09025EC9017E
BD062F04878EF83370FFE447A9A984A3D5E818D16051262F058524B8368F70FE
97E59499D3486B7E0D7FD2FA67B551A82D69C2D03EF8739D658DDAFAE9B731FF
C7A1A175539970EFB2D13C85E11AD4E591188AA1F560E57EAAE47F2FB0914DD0
AFB21506ADE702CB2E8C703AC5497970149A0E4C3A044F8E8630AA97078CABCC
821BEFA442C803596DC1703158A3152EA030B7DFD9625CAF68FA8844EFEE32C3
DF4BE75C2E576006D8B16FAFA8BEF2FF8BC044B37BD8F21667459F588448C810
829A29845191262C8537D1AC18192B25DA9AB5E2E826E421B9EC0D100CE0A628
2CF0A7DE6BE186036421427E2144640358648A17A31CD246DFE80D1590BCC6A6
E72A55A5187666E9D97CFE0F41AB22E2B3E986833D4AFA7E949BA20F6B52EBC6
DF72B8D560BEF78E95F216CCA8A0A31D777B3DBCDD2A51EE49F8CF174BD24C66
947D3637E6B56FC51D7D7F050B0FC0613394A9F8C143FBB7C6205217DCB03C58
ED73DFA83529CFA93C165DE936637F128A77EF055B0A525A437F4391E7994398
3C9227FCD27833BEB82C1C8D1DCDB6B8C2BC399B1F747F1354E70EA66C58BB33
6044329E037755E7C86B98AFCC73CE192CC7474753A387E4FFB78CE32E05EEB9
B06AD5BAA52AC66669265FCFEEE55E2437A9DF498F66422B234530A19FAA646F
88B071BBE2D247AA422EDDBE7427008F19AEC0B4EDF48D1780CFAF23D69CFBEA
FA897A454B667713130D0C0B46765AF415E90592641FE99B9D7F764C849ACC9A
60B88AF4DEB466D04B90F977871865EF1E13AA97507A38630DA5B8423A41DBCF
7063E9E142E4EBF7F49994519898C63CAB854E8022391DF42E3866F281DA469D
62E808D75ABC61FF76E75306E0646863CAEF497B459D808DB1CF728B863959F4
BA25D66EE3F882152FC773137FB99B4FE16DC47DD51EBAFA3E55D9A6525BDADA
E81ADFF6D67522E273B443AE0BAC6D95A7263419F17B401A4E27905606D3DBC4
FF6588F01FDFDA6FD0D9264F5C9F31295402FA499367970DAC3102E4576695A5
35A5565E971782CB07813FEA0F273C0971E4A99AB6B58DF7BC3041BB44B933DA
9703F67D2B3CA22E9B2560BE74A48C18FE9E0E5945D575A3293189784AC88D15
DFCCE90D8E0EBC302F15B64D5702C1FD98BBD8DE663AFF2DE36A224972A9FC73
A94AC53991DD6F9E7A2A786095D0E1CE1B7E35A91DB7C17D765FF42A5A2D5A8E
F2E9CA4813C3C7252AFD9BA50E99885FB34EB4EEB428C261D89814E49F274B56
C76D1E6FE3E7C386DEB41DC317FAA0852F043B076146CD6A1386A7FA25FEB114
BBA324D203D8151765AE8920463D0348157019A24AA22402FED21A7FFADF986A
1596E78DA735F518AFA65B5B58046899C9C533AA0D404CE661E2E238E519B168
3083ABE062A7606B8CB995B03EE89D82DDAD013BE233E4484F0A5B7B5DD45003
E79DA9F02CC981116AD6D3376AC6FA58CD5C818EF24FE5EC4B51A6EB578A73CF
B61F0DD6B9BD2EE8E42277F7E3119405F7C85BC82541BE46A0C2598B179A7AC2
6E9C4FF38F072D43FC2719EBF5C78E01180FF6D5E55CE8503553957B52DB57C6
510E7E8E9E8DBD36F52D8F4691F6F9CDE07960058D48D24D36DB0F160B65DE87
9688922D8258817E2C13F0FC8D3CEEBE163C5E135D18B469F16AB6DF74B0A427
0F1ADF180BC70C79852DC9F9FCF5A6719B66AA3E4CF760FDC165FEA7CE84FD95
E26F8335415C37BF155A5C2AC3C8B9B48DD4729D33EDB2B22A474A03EB714503
77A4EF4E46C5E6D7DB664535D3D20CBD002EC5606121F5B0ED26D1D99A7E9161
5FB132630D13DEEC9794CDC1DA7C3139FE5D7EDC68997943F627B770F8F649ED
FAB5D5E972A3F81C7EF13974C746760870B6C16943303FDE111A26CFBC35359B
242C8DC25605FF93A95A46C428E0E32AA3C22463DAB621A303919AFC008AD1CC
A4C500EC5214CF8D728E34A0D9F12BB0151FC5CB93D659C31BAA7550B7300AF7
69FCAACD3FEA68830B939E8374BBF817AB4EF9336EDCB0D20BC42DCFE4CD6CAD
4FFFB69A018B48CEC9610E5B4BB9322F66F2FB431129A869280E111FBC0BDCA1
DDD73EBCD96481AFC93F6AA6E3BAAF3F6FD13E67C6B16249C3518F84479F52BC
BE4F7A4C96BF0AA5A5C19E4E9EFB50EEC4EA3F89CBDA70043E9C998D4C471CA2
90658E59F25477BB1F64A49B103556ABF87EA5F4B4E282758C86E8FA8EBBA001
DA5B03FE1C3D57FE0C7E7C01CED707EE36C1D707CD5FBA905015C458016044D1
60EAA1AA2387261D443FC36B94018FF11F1649CB0D1E4E678ED311DAFB9BA922
36FA01259A4589D77350D30E6D707461F6DFD914AB318FC84F59EE7306B6AC02
8F6947F59F2604FA8EE21E91ACDF91BF5B937BD23D86D5748C00D12A4F33EA19
158A3F5EA71BC91BC2BBE4FE6F83E93082CAE7F9543DFE9C23D02C5A9D46B9F8
AD604E61B4AC072425CF171205E55F7D4AC156BFEFAF73059970911D9285D2DF
3EDC8D3C08780210EED73F78CDD20D0014E537FA936D49BAE7FFE86B2B609352
CA771D5BDD24C03D0A8BBC2A9AF0F2F38E288AE8493E58481B5A7350E210C0E7
F47DD01BC7376EA1EC628B22D48DF90EE1D0F83BCF75DD784B9E90D8260797DF
F01200DF7D896A18D7505F69FF85459A6526EF2C71987D6C92DD601B96807BA9
B8C9903C05629F3ADDBE0EA8A05D48847A18B4465E90187A333C3E9B7B6C792F
892E70A0FD911323286134EE2E5B0D43977FA36F0FB066D5239B0F7892995886
67121CC80F1E1B7F5AA917B0B6B64F492DFC6DA71C461D5BEE7B9B44FA4B630B
59271E2EF2D8A9C0CFDF66E6BCBB5898371827FD49735DE6C794C71A930DC138
C4BD2EAAD63AC25E68D01AD31A51D1CC71EE6294C4A0BB32365EB60705FE644F
BCE1271CE2222900D83FB94A8C16E9873A0ACEB56446D719BC30EBD7B173870E
99EED3D74C0E1CEDB10D04A192F196B9444C9A1E411292ED9FF64C532B1BE2BF
9C404A10E21966A5EF30B2E1418DA55A190746E586B04C7A1E08257E89A12AC0
0414C794C6963C09B93546A44B41CEB53048C63D950198FDF30297C5FF3C3A05
04E048C5480CA1CCFBF77705A15D85863D9D4CD53C17C7A4C1B0AEEB1E2031BC
E5ABC7C17E006C7AFA43AEFB549B6BA0850C65E2287C63029106FA8301188F8B
ABFE37FC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FEDF2D37D006
A7D7607348DAA1C6F67333C87A1B4699D58D1CFB2764E513E6716C45B649C739
AE2E22CCC185021D70816ED400EFD37352B030BC26EC540629204632C7F9AF09
9AF1EAB3652298661DB3B1CCF3E7A28CD7E943952E826C1BB1FB0AFB847E1B74
7F9D607B30F8A7EFF4D9862922A8F80A0DD830C5E7E8B5ED35BF9CE98F2B71D9
86257DF1180F3E81371CBBAD37235CEDAE5E7D1459BC80B36FE8909043CC0A97
96E0088DAC70D116E7360BCA2D8F85E7BA1AA325F3DBFF5B71E1041E4934E825
D94AF97E8EBEF4ED0A86D5CDCD00545E375162DFD5A5D289C26BB99587D1A485
80F7F0BA4B251B8D7355BFF6E213E8B7489AD8EBDDE37754552D2AB6AB0602CE
B0D191E06231610D0E4922958F3F8BAC8685073C55070AF0A94CD33427104159
1AABCECBBF57435B4C1DB608064B6AC68146C5162904CB3A951251E292756010
356FCF1FAB047D739A848E9AC550F18B6C7823422FFACD79FB076184CAB56026
A6CA400CFD3500A0403A619DB1A3EC0C33E00AAEA7E4B353C1169DCD18E98DCF
88F8E4E1FEAB798E976885BEF819E94906778DDD23EDADBE7FCFF5FD8225DC06
A97A26C62DFEEE808A52C4CA1556AEB8E16DCEE97BB169CBFADDC4BB1B1552A8
1FBFBCDB24C77A82D04C94EF3D27DD71FBE170C8BE4617BDFA87FDE559A6F0D5
FF99461F3A9DA8509E7EE6AB98B4BB88F67033ED3BC56480C6961D4C4C4FD241
EB727D31A47273D6337E86CDADFF3B72732A4E082C00FBD73BC06D8741454DED
D546F479E7D69BA4A87586562F7EAF7EE23DDB52900657F018FF227701992647
C9DB8E4802CB0AD3357320847B6C1DB296E14620C75A20AA65A6D8BB61458129
2DBC5376334B89E7A9716DBF430CA68A54DDF5DEF3AED93DB4833D4DE8238667
6CAE2D18BD4B5AD87BC27392D7A101E273541B8FFD8A9F88AF451092453F5050
DEA499563C86523C08C94F417CA5126FFAFA2CB139762BA4D2046C23DCF06922
1A28B39183B57A334A41156A070819E98D7384DCF20A308392C678D906B9BF3D
12A818C8EBD990E7A12A38A89BDB9A1C20E57FC314037C7E13F3A0670835129D
80455BEAC51C944BF6B17546BACE8D7201C4BD60AA55CF4475D4B14D46F32EA5
2EDF87F9382ECEB1E95DEBA22F0DAF4C05166A52DC0D4A12325A221917EDFB9C
F60E449F2E26651941B15A5BC37173F172F8035398C01D2EDEF982FC4D3FB95B
B1AFF97BCCAB8D476E2BEF68A1F2072361A0A5560D661B25AB58E9494F503B4C
B5024B73C130A7853A71C4E930DB38E4735EC693880CCE11569CE2973CA0396C
7F27715AD567F556BF4A26A6A4B56054C2F450587BFB2B71DF471A9279FE5AAE
B3DD4F9289C6F9A8A622A2FA90F0CBBE62D857309D8BFF61DF17BF3DC7107C62
E08B7705780B45E7A65981D5BBDE1BF5AD5D038BD7B0B74ADFF3ADFDE37CC5A8
3CDCA0819CB43E2D8643176B13ABE1CC7FEAB93115FE51069FFE91BE42F7153E
5941561360B0A68F6085A57D8A922DBE05E44E09098851779B2472B8C3F026EE
CF564B9EA4D2AC40905797F960FF5ED82D7154D0FA02DDAEEFBB318DA401279E
BA46EF5D46A3402A7DEC8ABCEBD1542E884F4F55DB4F393C697F202783BD20EF
E0CB68470C14AE2A7868F57A7F832DCF8FC7E76D2CD142F524367F8CFEEEBAA2
CE2C3473156EFD0F0A300BD30DCFE2EB0298E1FC4E9C3512CD34E2C15717E80A
90303B561104AD6177420A24761C3BAF25E1DEAB0F8840DA4EFC75CB69B8973B
33C86F9949ECCACD848A47115838262F238544F57FBB2BC8E9AA001447EF453A
DF8C1250720FE68FD1EBA71498638B37621C7EB9E85BA2BB40F538F5D08B5E56
5FEA0A8A11412ECF92AD5333A61016B8DBDC3423CF739AC533C29A62BE69BA9C
FCEFCB9B92D2B26116F50D68A904EF327FB8B6B18E07C73BB48F4E5A71995AB9
7C28ED4AB2CFDEDC6AA7F300B4CBF0378ED83686DFFE4C20EA1AC9ACF144AC79
1807EBE36F0DED541EFE0DE6BF6DF38F0F218660EFC37FE8286CED5425145F5B
36FC5B6FB91FFB2AFC76D1EA138B15E7727906FF4B43D646A06609BDC74B1672
2892908ECD7C35950455149CA323E9A3B672072FF56E6E656590F842B48336E1
3CB064AB99C340F9EBBC8DE1EFA371732207CCD874E39DEAFE1B8D47D56B99AE
A8813361F2AC15B9BFCD247D8C6B36743F832C230A5AFF30F5DA40B9EA909752
F66B32F0A095478AD923FBF5C8364C0471E3066E2B63D380C3C15BE9C377D480
482B264D54B479ED531B174738158259DF427A292F45B8EC8867BEE356803EA7
F089016D00286C69375E9E0B1B272B51BB1829FEDEA5CDADDACB20AB6BFCBDD9
5D322B8478B7485BE9C86F0224B85C99A5E98B5C458F88AA854D2F15F7AD81CE
FD0D74DE9A17A3153617F07CACE92977B68FB5A1C8EF96F442BD63C7D3CF3C83
95F8BA54D931B5A817A94F7DA23F34DDDA919B6B19814BF81A4996474D99E628
DDCDAC84C3FEFED3EB63AB8603C1ADA3A7DD72A46F032DDD1B9BD9DE5D89AD98
207F2426CE0CBC97FB11E41B0D34B1C162C462433906C4A7DB04C45FD6C30B05
DEF2893D8D4BD1C3ACFA2BC75EB94714890425EBC900A43B0115F76BDB75E9FA
F644E1879C37A1E08DA89EA4C7FB495CF36760D1CA5A56CB7EB397CB24745A19
FD0D47FA4B70AFBE58AF4F2695D49DC886595257A6FECBE5A1590A6EA831635F
1E7946F9ED347F1508D4F4E1E2CC64E1E88EDE9F237ADA30D3C0E2490D2231D7
AF3FB95A99A9211EFF34382498160E4B509F71F19E6331D554E6829242F1E05A
A1A3BA678F45584B3CE2A37EBB06700474F4A4F93E85707759EA2AB15490E523
1E496914D0CFFF622D232B1E6293D77285B26F02FD8B087A8608FF9C86E836B7
FFB7086E21DA1AA9FF33CA9F9C8E6FF154326F7C3655261C4AD985383A5CF154
6572770BBA3CB09E41AB8CD21137199537AC8E7F6FF258DFF2EBA9D5DEA90E75
EBEBCAA77370BB2E6F5E1F4560A4C0615EE2306218D58CE11793A3F5278DF80D
BF07753E280C9A413EA6D9B3874138C7E049944CB21ACC91131ECE42E51AA76A
C74C34163D2857BDCC5C79D026CE9F5B78A511583FE47073661FFCCEA387E4B9
CBC486B942188D721BEE7E574B862576F59A6FC656ACA9D0FB917636C1D3B252
8B245443934A6F4223A09851B330DB9A6A39DB65E515199CEAD1D5D063012262
3C95FD7B710951D9FB9FDEF61F7C6FCA5943C865A7B37E20C2EC3AFC5E8417FD
2BE5FDA62D34ACB48D5B8588332323404A24B962F2D0EFD3AD94ABD01A07613F
87535B404352F5EC56E9A32A5FEDA590827B5D580CF122EA2C0656706012F8FA
20A3600254804484428AF9A3772FEEC12592F863696998EE2389DA9A72D9C030
6BB847A486C7B02C25F638114AC4D90F7AE931CEE6DA2C31C12D93F1C57C86B8
8DC96CED6B10287D17B5568CE34A4F7FC812CEE538BD4F92DB8A38356742C3C6
A914EF19D138C233FED4D467B20C8C633408FF890A42960325D9DDA01A2AC3F3
F9AF1E1E47F8AFFA63ECD24DC5D18AC9B314824B926E9040CE4B581D6597ADD3
D92B216739D705A477C6F3522C88C5C4F2BDA18A84F35B8449AAC3CFEE362BAD
FADDD94F9267F9675DC41982C1FD9BCD0D380A99C552753211F538CBFC518AC4
0027D89A07A5B9E4C87FE8878535BCD86E1517569F3B5497EF22BF3645264AC3
43E8D87E98F9E50ADEC3E026969675F5F3B9C09300A0C6EB7813CD05C6D5EEDC
F059474BAA178A8BC0C09CFB8256CD2EC50EB478AC4131EA34B77A753FF3E432
D45103C7DAEEF42BACEC9CD5537476DAC9C58BF1775D61115E8B6FA9DB664BA6
DB13755321A0ADEF41A258A32E27B075D37E5957A62454D3A7D5D8E4CAD43409
A67D40D9B4C2CE12CE8CDAF22C3A808B213154A1F8287657E35599FAD0B8A343
C7BD06941D884646C328C734F11BB8E04A8CE5450BFF0B2DD22035D15C1C27DC
4BF4A2F041D2F06570C474B0B4DC2EDA0A17F28E1FD3431B05AF6030574C4A68
AF78EFE9C0AE91AC0C3F7883A5C0572610D5857BEBC4DE68ADCE48E24756DD14
FBCA0818FFD649810A4840D64057BC685374C46657934C2A22AAF5DC39E189A5
B7AF2402DC05794554AFF7798E81C19C19DD9FBF1D434D61173AFDA24E5F13DD
CC72457693C5E0526E460E1B58B110354B404C0C3C4CC7F25164F50FD4F0F214
8493718CCBE6ED7CD328D4AC247749CA07AE3934BA096C964B3AE9AFE4E2E365
2F74C969998314CF9FB65054C40035BC6A3223D4CED495D00D3EEAD0F27C4A3F
F0D14A8604279254CE26FA8DBFAB8DAED12D8D1A2D7673B94ACC38F8776F5477
669C53BDC54749A357A3950B6445458886C30DD2263850B16B413CB3DAC6C1AD
74DFA8E3FE4F6F04968B9246E4AC081C7D5AA3B4CCFEEBF52434F771A7732F30
E82A67D646D37AB80F240468C7CB01C6353A65F779AC5ADE98339D9383A04993
E6D005FC90CC38714376601C3122E4C9D4DFCEE30F579C01414A9408D8515F83
50EB8FD8FE940D6ADF0C6BE5980537C58DB8620B0A67ABCF03C47A5951C31C5D
2C953BD8BDC136D89DF9FDF0CCA7BF4BADB8D42E85DB572CD6DEA1532BD90CF4
641D3A15B195024B00623F8A7C29ADFB6D568474D96058BAEB819667C967AED1
60A1F2578E95BC527B886842418E5D7C3C1CC06DAF99C555D2DE8BA439775DC8
B7ED1B54B0AA9A27BA096E6F872F27A76392FDBECF60B5754C369705064AD1CD
CCA99C804E4821219467230FF771D281927BE7751891F79447271FCDEC2D4578
16424A831F8AB5A25C188F8535FEDF2844DC03D11F612B9CD85B01F7A214B2D8
C0B41FD94DF0505F6B4B46A9C0B59B0733E0313E71139626BC1529147F19DA61
C96989C887314DAC65BD948453194CF67772E6C677D1420555ACB4E3E205CBE8
D2CD22B1B00C5F18173F9EAC1935F8964877EA22D9E5D4256F3134B7F3A88F1A
0CE811E0CA2E52A0EBB9F4998D40FD7B001C6F407A72FED312680E7155F6CD43
9AA96488958D2802CD3391041E76B7BC14C0E3C03464CEFE78EFC1A19CBBF92C
439FDC8F59AAC8AAD4375141633300549D0117994E68833BA0D64D1D33C91D1D
85F6DE7DD73FF85AC718FB751B46C7972BDAE3C044E0BBD0FFCFB0EABD2DA7B0
9218D52CACAE1A04359919D7A483FA023711DDC0FB48077B4425BF9CFD3E5640
AAA9635A1EF997C7DE43E87335570FA82647AAAF3DDC1CB2A8C54CC560E1F283
40DF37AA75DB61EB4929AB62872DAFAF6B3AE476ADAE3DE5D771C66E86F97387
D4AE97D6E59E8F969FC41A37205C97F4E2DAE9A904C4B300F40FE7C8F1CEE20C
43F067B52E270DD0DFBDDC1DA61DE6F1E39534A987A1EEA442751DE48D1AE427
6150B16E40AEAF3797C2EE47AD35BBA52F360E387AA6DBD6AF81AF54D27D19F2
7B189ACCFA1C6C760DBEFBF5A18E58BC01992609A3FCCC76F5ED4C048FE63430
BCEE7CB7349C6321D84777A3F85E82C396D9E20A98462D2610F929EF4C678523
6C2399BAA8B34D51AAD953827A57EFDD6BABBB2B95FF6A95371853F41EA00FE4
561A01DE67D90736A84730B348FFE4088747687952774297DA79DB20904E41A0
9E69805BF415BF2A15A43115DF2ED43B8EA1A442E0194EC02D5CD155CA55BCBC
CF6B6CD8C2529930EF0C24BD4E5D7C125C04ABEB3859B32F098F49FF48762FF6
A6FF52C024551168A47ED789C251705320595DB59EB1FEBEEE29553FD571C42A
1884E980BEECC293541CD4EEC02EB9772ECDE2286ADCA55DCB69F5EEB2231714
18605E7B6C9AA6334C0B36DD57CC740D039F4D638C5BA298B18B3454D296DDBD
AD17E0812622D3797298D78AEF3374B506B9A13C6176E564D0633E5788E06FD7
152215A21585CC899296A95B9391E84F1AF5EE55BF8D64F2F1ADA5020B5FED26
7E0A58F8AC6FC3110F89921A388B637E04449F6679540470E22EA00861980E19
8E3B79BB72692A3B8B1D31BE05409565AAB4CC45B610F283A8377048E29C7272
B25FAE73922A3940C97544F888EE3A98C8385386A7AB03ECCC79A9A007069C6B
80EE1A6CA73454A004482D69A32FE000AE5F9D61ABA623AAC35969666586A414
B35E7C72D39925B4DD318BFFF3D0D13EE0E72D5978557124BB0DAA7704985318
E11F7CFF2EE426249D1879BFDD4ED40631DA2377FC5BF660138530A7F465CAE0
8E9B046C3FFCBAF19F8819D48616F94CAD81DC3B833876B152EC235476016658
471CDE2C3225FA6EB42F1461D1246EF556EA848FA8FC3F344C5DD533D6D74C35
1023F843BB5318B4683AB023D72ED74F0F30BBE765340CD8A5B65E086326B681
030963449500B5E28F48EFD4B1F28313081E6C21C07D4A71A252F751B2C6404F
6FA93559ACD6E0ADCBEED43A29066813D508F568E084431F5F42282E8F0A1BB0
BF2E11D9B1903B8685BDCA5A6F9925A32C365F6A8095208A884BBAF08EC055DF
A3CA23A3D97C0220D34D5A8D6FC4E2749D0DD1195C1560E30A51990FB692A7F0
B0E0E7B8BE31067CC1BAE1C8E075529DB66BBF903D4081C1D6AAD4A849E20FDE
E79F2475C88FCECA3110944053DAAB56B1075A0C3832220752D104FA1777BD28
8B6905EC04ED310E37BD380A32270F4981DA75C0F906BCC94E549E58EA59668C
BCA064DDB13B68D37CDD3B35B345805D1835F05F2AE1C20C0743864A50D37983
8C9999FAB76E6EED4FDFB7F4E8AF8B78EEEA35103E8DD0EA3117ADA2CF91C655
7EE2ED5B4CDFAB2976D79F664EE3BCE7BD020554071ABD455F33FC351418F361
12E9C467EB0F86531E771C74DD3701419E5B08ED32C294FE37535085D94909E4
48627F247FBFFDDC55F549333E8B1D229F107D0A7754C4C27620D6CE5925909F
D73ADB5CF950361289AE9797133BDDE8B5F108D026D5F9B022FD01C5D21590A2
A0877E06AF39419A18C9B4AB6A7EA02A2A5D882B3CFC3CD9CD8BE635B351BC0C
D505F47BF1DAA83004CE2C9768561BF1201B86813C6B89EA16AE1955D21FF4C8
EDA1464E4B6822B0EA9B636F53F71DB75B8AFC2CD1C5811F86578F44E5BEB7F9
97758232B7EFE572ADDC804DFBA4D875BCD1C5A160EB35A8EB174221DC5A5233
4665D68CFF6687283D2BF372801684D2C3354167E98256D337115369B5CFD265
FAC48E967E66076789CEF5DE9025EA9497425941EC3A7FC8897A6D3E43D930BF
48B8D0FC7705B8CE9B5B54BACEA3DF2351DCA1E6E1E3963D6B512D05BEF6A16D
9A7C2F7E922C5B635B8206E777263C4C2DAE8E5FD3567AC2609430939706BAC5
81B48ED99F2D348AA68D5614943159D150DD45D9BC6525541B337FC927DBCB9C
46AE8957F2AFD8E2FCA61AFB061D796B350F10465B4D8AF9B77CFE9307D785CC
F75AB65A4284D7229740C7DB4F8792BB305783BFD52DDEC2D7D832B0A98D82E3
088B66C88A619DDFD6B99BF18F27DCAA9638D5FDE70ED77B0B380397948CDA78
A5EC566863E8C34A5C47B6AF1DA4DF3CE3826A8648A74D83D12EB45C3FF741B7
14D4FC0563F0066505F278DB2174928D48DD8FA6B5A37F8700C76BB5CD1B7261
505A235EAFD1ECFEA8717F25625D53DCF0B9E2386BBF0900E0E011E8ADFE1B12
961D71CC4D1A11BEF388D2B7B077697FC8F451370008341D55CFC940B88FA9C0
9F411132EC6D54CABB0D9447DC97296235DB29CF0AF628AC3C30B11F1580B258
656AC3F262FA279BABA8F1BB4F07B431A1EFB315AA5C6B6918D1D92C3B9B65D6
D70A7FB61BC4ADA1EF4B722256EF4CC4D75CC2A95E63CA3CD39B20B76E25BADA
8F330200A7CC9174AABF8FC76ED250716CB149BA3A77260179470E7347E15096
B755A9E995A71DD4533B9FFA2182DC323BD471A7FA2C19B5989454CD42007B9A
C407BDEAB0A4512A75D893ADD793302FB10C1F44F04856704A495470435679B3
183FB0E266C457E22C47D9C0990BD0F3F87E951D5BE74E93F45B68D8609442EE
94F864E7331DEC215C81BDA1A9E394DFDE345D300A475AA9F5F746399917534D
94483A5A69FC1462D0136D2A635F387049501F4B5AA48E25B927329E803AA86F
2F5903259A21A839583F9FCDC6C4D7940A83DF09B8B1BB2CBC485CF305078A8E
3A52AC2282B0575E651DF78C299823FF33F0E0281A08AB3702679A88EE3FBA07
650FF82F11DF2B53B03EEB2CBBE322D04FE6BBAFEF64F82F20A4DF5EC1A6340C
EA2B0E8D47E0252B761C731073033D6EF4DDACE3566FA4F7E785EE6B75E49756
615DFAB55CE07F8AC564F9197BCDAC4DF36D6409930417CE11745D7E5AB85DA3
5A4A00DE035FEB38F0D47FE2CBD89E2DA99A92210C18454E5D0346F425119E3D
2E9F29D7A474579F0B2F6691E7055D63F1BA2B33930DF8023E998E9D3CE88051
65191484959734F725EC29322C04C19DF7C51FB1413707C69D5ADA302C384995
708200793F24BD46BF285BEF1D6391820B2845DFD8F42D0EAA923AF165EF095F
934F59DCFB45770C2110BF57D12CB660A9DC644BAA39F0A05739EC307D4C1DD4
B0395CCC47E0370E2D6E800CC964037E40D8F4703AFD3600885B641B45809D07
DEE355CA8F74688EA26A6CAC52311E462537DDF4006BB16B89EC0E54995D3BB5
2E9DEFBE237B219BA964FA539BEB4E1122C9D806CF810056FFB04FFF49FA1E0A
7F252FCB0FD8A664FFE70979C4696B5B05C07D62E428A3895B80C76E370EFE1C
4A5E9CADF1E05BC7982648D5C9FB29924D2E711B1C866536E456C00A92BAD2DD
31D36979C599CC143FB6E81F96156EBF5B7D624A8032161D54A462A9BA62E928
B40BD913F35AB9B9F69398ED1657277574B5DFFDB56F43415484BF9D6A2AF46D
1C598B73C8B15143C0A3A3C297E5CC4ED74E61D1182F342C4A562A6E5212A2A2
F266669E8105114C31C9004D74B36FDE53A8618C58771982BDC103154E9234F0
7DE38907B58D1418D0ECDDEBF4E403A22EA36E86FF062566ED6D76473FFB7A51
EE1F0DEF4EF5FB316157250991D031460E2842F0FE035B60A03C7AF83EDAA9DE
60C17D1CF63C26BCB59CE6AEF7E9165D12066C2613AF7C2E28DF59046633B0A9
5C28E101328C9B562C81FE9547790DBA13B4A8FBB879B3731B7A9C7B95BD29B0
283A5608A96EC525440D477A67A8A286FF1228A12D9BBFE149929EA610259397
F60D56766DB910C99014B62251706C5E515FEC0305FF50639FBF41A87B634D3C
B66200D437DDA92DA8FB9FED3E7E2CD85120F2C67EF4D376862DCC5E706A3132
A9FB3FA6B22D4101188E73892D92B9C5A7B4A4C570D9EE69F647B7AE016C3315
8BB975BECFE6AE1AB4C8B3263950F1B1353CD4F3ACF58AC27C242FF65D54D240
4F757F98C46E47A72641E86889B281B95677B231727E89E1165BA961F0273091
25949CBC1DCB89726B984E40634C05EA5C5C8C1B763491F024DFF733D39EE25D
D933063429A238307E3A464F77F6A6079E06FE055C8E5B9463DC92E635E563B6
3380E2240492DF6AC2BD1CCDF05B3D98F0A904F6BDF67297C47C2475A47B1A27
1439FA129E3210DDE46536EAE937D88EC1B4CFD5AF48A8912248A84EFD386C6B
61A5E15B6DCFCC8E1D5988003939B48CA8DF17373001D829EFCCDE77E1BF8A97
7F82C5126308AAF88A7990F167C44143B54405BD06E0252F084D6BB74CA80EBC
D57E440F0473D5983C867140688B3B908D19CCCBAF4649D2EECBCC9261C74205
6496B748911B66840F81251B365D52360F9E8D33D442A7D84CD3467142E439FB
0E7D7BA63D7EFCD6CA4370138F6D80DC174D351C1DF3E3962852B6AEC1D84823
F91024B8E401474C8CB4662492E9A8737FA119D5F3A0E3EE2F5FA7637DAA999D
5D3DBCB970BAF43857C48A57ED68BC05BD54D5F1B49F8EDAAACEB53152D05382
97A3E739184FD7195BA632F544082BBDC9C68767BA18A563491AC48D32462A50
F89559A80D47C776C9F098CAD89327694C3A5C7F698AF25A40F7B730E8C82C7D
ABB021FE04184EFEAC2540F061DB533360B3F4829F3F91D4D9B02993B4373690
1BACE0C5C485CBE3A9D02E2C7B40D696BD561F12D357806082C397E5210CC0A9
8E5CC685DAD91BA83BF8EE8582B345715565E183B9DC0DDE02E0F3A1C8324959
B46661FA891889AAB17B920AAB6FEC1B5DCED2A635506B1FA06980343847B096
8C0626FBF8C4B10D8FB412B3AD800E3CB50618D08F7EDFE56AFE0497758585EE
EFDEC03F786683C5DFF3627056A90B28DCE391B827FFE070BC4A02B3A6411406
B169AAFAD20DE9A48202A08D3D8C9F0079F7154B7DC254008339338C871BB036
9D4755C9CCC71D20141EF42A8FE770683E8D00A58C9B1C750B3E0DD99C74218F
F74CCFA54911ACD0FF16FEF122729B6E985FA023931A05F216B73A11F4433BE9
D56D2125766949D3616397352152F6FD65FCB900783531F3D5B5F81C3E23491C
72A443ACADEE13915C5CA44FF41CCC2BB9ABB47FD96BC080DDD97C3713D2D275
1EBCDB6B4D935084759EDBC20DE409A123C049F778514357182B11BF5511FABC
E1E8CFDFF4FF58DC8A4CD27AD08A08A5847D8EBF16145726EC79A1F69119EDA1
71F2D04D397B310BDF2CF61D6137B10621D312FF154AC58BF9F2C548C4371DE6
E5EE2C2FC7E7D7DD748DD0F5F326BD20A178A20447216C90A7E837BAE9145236
A4849CE3E4735AC8832841B9E533F338D2027AE71AE15A690361F9888E49FC59
598C619DA636244558935743CB3BFFD79D9EBD628E9AF0DFD38AB24225BD0E5A
E080D7F5A2732E534E97EF2C4B2446425BC0E631220B8A92BBE5306C4B6FDD3F
FDF715BAD21C566E843F2C5FF185A72F8B21D6486CD41A80EC051E875EA5833B
858BC442594669827BBA82CCDFBA875E73653423E1BEAC16954E2670695108D4
D6B920B84E040C63C80328B91D6BF932A853CFD684DBF7F19487E8C2B17A5177
7EDD3F8EF8385B45D44B09A9615DCA767BB4E6E77A98678140F9EF7A02B92E75
A597785BBED4857290DC1003F90C1D5E62A860C77CDFC3849E58F278AF879D60
E77ACFB1CE5357222E5B02DFC7C0E8BB426574719FF18C8588408C9DE54FE6BB
1E52CAFE32DB3305BC555ACB1EAE81CB8438407EBEA5A06488A7CB7074776AC3
6B43FDF00F13616B92B7645170A6A6B6C1A85D0058926158D4883B85227C0E80
B973173F1CF8291D43F7270575C6C0AD7A1E40987A445AD31BD84B91179CCBD4
0DD4CAE2E9B71C6076AFDDFABE9CC46A2DA6AA3E33A045451587F029DDADA6C8
FEEE4CF11F9410B30C4CD52372C3B9A584F831A6BB79660666CCF6F02A2710BF
CBE86FDD3101B986269CF011A057549489EB815F3E65A329FAA13BE3B349D0AB
4D129D4E3BB653A9C6AE37EE0993D38EEB0143E649A9B9E08A9ECD62AB1F5FD1
AE07C3F848C63F5A81297B3FB5F826B6EE4EA3AEF73162A6976989D317AA36B3
2B33E7D9023B3B8C789D1DDC2A1930A4B6119BD5C383CC0574BCB1DF7EED5B11
2C38AC578EA88C8DF96E8C68859734B232A7433D70BD371934A1506EDC63BD15
E4644483B4CB9DBB6E39C1A9F1A8DCBBCC2C7D61E01C7084E3A0161D14E6B692
3D472CB3615F3B1F10079402E2BD9735E61CE48C7E5A10B6E3F946108203B813
9B8EEC22BEE2E8A1A721E5A28DCB5D3CC5B26EFFC184A3C6A182563FA8F8F6A0
A210405C9B5CDD78B32AA3FBFBE9BB816B42EDF445E9984AD71187BE79133D0A
5557C1E0913B055F591F8F2E8A74B365795F7581B0AC9272B3DEACA29ADB6914
0C90980A2147208D9825B9AD5A7ACB5C30A9E79E85CB8BF53846F45871E08D29
94D283E750DAAA3BB7DB64305F9531FEC9937F2FC232269EC7FEEE5B8D8919E0
D1E69B1FE209C5F74C458BDDBBD329C7450A21E4F97C8FF528ADC2F97F87C592
9358CAA90042399F46A27F8E97095273476B11F3538E81B9D81215234A18987D
B1AA8F2CE0E5D324673C0803E22BD5904F3C5C0D1D4B4F510F70351551583A0E
4944DEEBDFF54FEFEF9B540A99B60868D8D3CEB7C2BFEBDE0EA2878A4C47A864
8A567A89550FF4F0A8F1AFB3A1F7CA5C1912B93067B327601606A6D5C8C3F294
CCCBB0CDA58D834A3C56E69CFFC1DF788E0A5F7324DDEB5737ACDE0FA8D6F7A6
719B66AA3E4CF7A10D86C2E63BB1BCEFB145FB149C26DC8B53B3DB4FF630D293
11A98A7920B72534DFD0B6E0D00A0FA54A7F5E9B7AB69DC77FE9A283B3A8C6A3
646CC1A409995849AE4ECE1648C07460ECCF0CBBBC56A2803DDCCD155753D01C
5DEC0F6D9CA219990298D212EEDB44E21C27D5FE8A6DE4CEC6967E6F066F7E02
555B846ECEEA19D0BDE898CF328861C3CB4423FD2C0C1AF9EC15AA361965E187
6B223B74553E18AE14EF37FC9FBEDAFBC9B1EC9BE8C9C04FEB47FA5FD640739E
1F09D5C684D7E14466BF3406D2AF6DE5C7F46BE9F4D5016AAF1EC3BD64443EB7
D0F6C3883D195661CA3A1BBAEA7BCB4A04E30CB1CADA541EA9D47C168251145C
17626EE61BDFA18F24517ABC1951B2F5FEB44F59C055C5D6087F1FE6EF8764E7
514F44EE67F9147F84117948C4C6A871D8297DDADE649F4F521C20F6B6AF7E15
1F7AC33A81947FAD809C5E8DD698B46FB83704ECCFD2A6E34496A866D0C9E822
6C88DA67A92B90A9B4E8BB7A7729BB91A865A737C53BC66497F464C5806D183F
4BAF157CA75FB9E013487BEE33A8D931D72997CC2A31671D9D35080A726673FB
A8A5555E2922EDB5B12AEF0F493C52096232783EB064244D836A645D52C01CE8
C7FF03578C4859B55B0365B6CEF2130D6EF52F14202317FC40F6C9E49FEBC2B0
D1928F44F1C6964AD6F4FAEE9F0B6F4A1C9C8FCDA78622A85FC1D55955EBF49D
AC8DDF427DD8BCEDFD5D15F53B62E96631BA7DA2BAD9955F9061A59C954D39C6
8834199108A139439D1E570285A7EBEBA0247118996064991B8169DB1E61D6FB
F0894C659A61F005C6FCE1A0E97003656BCE440493662D137336A6CAECDB5D61
97989455792A66CA6F8744A33F0BC008036EA389FF6D2C51D7B2C1CBA3F2BF68
0E43AEE3EE3CAE123F54F981326C41216FC6BC6F519B65DE4C95D42073D6935A
F334BDE6902166FD5B9DEE01649E84FF3B4169AFE951EE423FCD7A9B1C82FFC7
4A2BCB75E7A92A721D107E7FBEE52ADC5685B8AB326236464E9E509282BCFBC7
516581569533088EE553D702EDAD43518F2EE734824420FFDDC287D5849A4428
C31E843D80A824EBE09BB23B6885F30EAFCCF76E6A03E46BC6EC917FDCC63110
CAA890B924F0B9320664BDD5B185DB96F62E89B545CC8CE8B786D388BFB00807
370A1CC7C18A426FC6B8CCE39A462CA07208BF9F34237CF9A28451233CBF49B7
56D42FA0CBD862C56A5046047DDBBDD60C074064AA534A2AF512C1F2BC5BEE9F
2180151384137C8AE3153548794D9232AAA3CAAF6F8347FDC50FE11B481D25C3
C4ABC350244C06022BA0DCD47B44C18B81716368E01D9130D3010FCB203D50D9
D28E441DC20B587B400F5503B71479FD9A4277A09D1582324E0A00A968A884D5
48FF787277148AE89168C2F7B2721AF7EC679E1C63E8243884AA2B1262F21DAA
C80BB2DAACF97D300443F892A2F092A3E45A555E0E72F5F226E1363F29D19876
D19CA1B528480472B6FF815F9580C3603748A869DFE590A22DEFAB2DC237E18A
42C47DD0FA1E609E748111A83CE0EA83D873862C178C8A8A18F7BCC1C6BFE738
7FEEC7696FB75C375DCF494DF3E476003073BAA69032DC4E0F9B04006655B9E9
07623303ADD602988922EEA10AB170F8254061771D1FD943432D91DBEA23F3C2
F540837811E394C9E88E4D64EB6FDCB0B5983CF913092DF3F505874C64467713
F3D27FC6E28F101623189F842207A8C48FDD4D133065ED88946AE061FA0C6E78
F34B3EB9B83BF079978BE80874B551F8105EF9A6B72B91DCC5B8AD4598AC8B3F
4A263F48263C27AF5E0D027B46F86C3BB21E696B5E87EC197F07C4D1914A61CC
4F481013B1B340707DB9D9B3D5003D79CDA613B8B4263412C0CF0B61476C730E
B34D1BEF48C8FC4FA189D8A962AE59456EC1E450594CFC53F55B75BDE37DFBFB
E5DB1BFCC5AD4B2EDB4EBA8EE4A8E46B80B6A704A0C274D99B8FCE9BF97A6197
91A1A2A5F44B948ACF6C46F5357CFE54802EBC92CA30CCA6A79B9F49B4B605A6
BBABAB617EDA35B2569AD6E0206C895B9329DF559EE4F73496FDD2B58F8B140D
46A17696D477243DAE2474C372E77FE73362D1F9A09043260BE32EB015E59A1D
B2C85C444FC05B1AFAC1155DB15C242B07D742C3BC581F463B390F50E1D2DDF3
FDD7B1E374F2647F3E3B8E35767A23F132AC86909FFDD31DB0E467C4D4978813
067D64E0DF70541891615BDCBF3B581D3CF8E3CBE52FAFE31266C2CB600E2D63
BCE010820E24A3DF9F1234B69484C237E2D1E2E64C0D48329329AEEF186CF3B3
70647CAB18344C739046F1F08811C66BD383DCBBC8114201E03961015596BFDC
D08FBB40B1153DD4616767FF1A48838221A3FAB6E8027A10873C04482BF33280
A51EC039AF5DA58C53421D968C241C486AEFA89E691EB6DF1DD36642B5A8BA10
7BAEA2B7086DC2E4804080C3BF16398367DD2F1A199FDA3C8FA50A3520295B0F
275C9710D3594B52234E623A545ADC9B1493D157CC6B8A2D72E7D6DB5E4CC7B1
0FC6DCDCF41556C3BFE5E13498C5833C98E7E802CC91B546F554A4B9785B4E05
7A1CDADA7DC72A2F021A81EFCB60D21954FF32AB9F4CCEC6CE3691F53282A0F0
627B5C2BF0D24FF6B79AC8744199B80190201C3829DB22E0317D73DB9E2CEEA0
F1FAB037E802E4B567331B05EFAD279556BEEFE9127C60C34F69EC96D61BD7D1
ABD0FF61BB5D5BF9CC780D7FBF214166E6BCE5CA52B873D4BAF26C1556CA25D4
9A1F8097AB117144FFE2B54495449AAD5F3DA7861C6DEE2E80E8F2168DC82173
F806033A4C316ABB86A9DC1A352E52D61704227B5F323CFD804DE75B2CC3FBE1
135871267A7A988390FA6255AB0A2E905D93AEF31D380AF9143005C43AD6E302
5E1CA692A9E1C2855DC776AE87C7F2B28D5B78CD992D552612DFF130AC4122D7
BC7EEE2B9364804E27F2599EA2E5A46483EABB819C8EC39C1AE9648E95B7806C
2CF8FBC2036B2D496C3D93CE933FEDE10EEB0AA4E7D0C6C86CB49F3973AD1279
B171625FDC13E146F78954757A647B484728F2D9AD0391931DC1AB66DA8AA632
E8602A033BBD07A13EA28BF13609598BDE8F6D254F21578B28501BC71DBBBA04
12A5575EA8FC6A78F464E1BFCE74E7F3C99CB2B1EEFF64C7C3C41A27F25714B1
0D233BC3820D064CB476F5429B76359DBCEB091FDD571B679E550B626EC40E55
DEEBED6A94B2759F1139DF58C9E040D1931DE5CDFAC9C9E173F1EA0738EC6BEE
DC70BFFD26E12B8B8DCB1048216EAD3E6F2EE2F39842B993736EF25B316186C2
7A46FC1790F8B9B186E2C87008EC011150D7B310585ECE24BC62418FB578D0BB
4FE41CAA68DFD6C2CDD9480FA9B81FB95400150589A18661D1319CF4B7FFAA8F
4DF6DC5BD1390E399C286314621C7170F236BB3BC032610EC4A97842A4099B90
00425106B59AEECCFDFB64CFAD904BDA2CBDF4EAE3D5BAED55F1380AD5C82033
7FDB675BBAD39E61F3CEA0499C21F58E88CAB2CA2E8B7E0A9DC7105E3B511C55
174EA43E6DE28FE832555746DFC58319987C4D8948EB6E5193CE0D35D92A5028
B2C776283C1D6E9F38F97B3D38121FE0F96152CD384B63BD31E8C16DABB06FCD
85186F3F92E6D31D7A03909EE04A1398B7B0A6801C4D126F219C95126B2FDE94
BE537052F1FB260CC0667E2ED796A819E7F76FDD923B82A37522183DF77F4EC4
C6AD11057089E5CCD4368BEFC2879F03C5AFC25F05413B8147789E9583545AA3
AE3197743A5C20DA6A81789DCD3A4A6D20D72F74528DB701E6B55B12C7BECB0A
1A2ABCD341DE5B88E5F3F98EB3ACD7B54D12F3A4BD2FA932F13210DB9E042DA5
CCFD31C9E38CC10D3DC3FCB0A274974671DEB902225B533777B84C978B39ECCB
094280518A1A27E68CC87D3AD409579B49709CFAD489752FDC7619ADAA33DC91
C2F77BB7CD4CD4D5E75FF67457389F12DB985FA570B0269B74227E81EF381350
31E09B651B2139D0EE3230C1E16D954108258F46C2C7E206272A161AE36A7117
B968F9D839E9E3B28D039AEBEC6236C0F53DEDB3EE4A88E8E801A8103FB6FB80
2C4835DA04E1C53C079B8BEAA358DFE3862D3E5689F719A9658D8659AB289D5C
BBE06AF0E8EA0ED503C7B55E1F77E8ECD3AC2E276BA21A883C0A22F4B533461A
C0320B84034DB6C14C3D157F879BEFE5875C4712B2F9F6F152D5D002D00BA16B
1F07F5D3C01E2AAA9D6B4CE2D8E1922D2455ED2ED5755B529B4B3F707B68317D
34A1A1E57F7E5DCD7E05DE2B59A5F3A3CDA8FD7AE31BFB9BA8A890312F53EE8F
C3EE922BEC28CF9945DAF87F251210674BD4CDB3835FEF1471C01FE98E51457E
33C87B3A6B9E442359B196A6B8C59E0AAE2D024E23E51EFA52D1BD307AA4778C
FD7206EE62E04FEA0A55503F333A46D0828A6D49F89A183E8B218F273AC18FA1
06387B7F23258B4A00740F47633D5A7437E27EE2C6A0C05C0FD7046E1C45F23D
7ED459C3FF456F77844FC27438508AE813BE08A28ED5BEED6098E4D3C2821295
D8841F73B699B4752588CA3979A09DFFDA76254ECEE94338D23C46D07B301E7A
D50305C272C9B9F5F4FFF206B8AAE15345FC50EF9BF4E0227C2277D8033153CD
C9A7F61E7A6E6A316FD0F3D7449F48C33B035B31A528D5F67EF5208BB3B3A2A3
E29694FCB33A038F7169FEEAFDD607A708DD48B6C28975F17E96F8FB57E62331
7B6B06183C02A5FC3B4EE009A29A7EA292B7443D0ACBA914D1F31A11134BE99D
35CCCC6AA7EE629D85AB7B3BA916DA1EF367B282D9FEAC341174FEADE6F96827
2D4AAC6E998BC239F96D2494BB44C4C339151DBF5D504E671B1DCB70A9D8558E
12D5E0A9E3A969409D941F8506F8B1E3579B61E676E430AA7E9F6BC97E4A3262
A1C35D83BA7CC58B3D5417690DE91EEB4837A9955537DDF80428E36030C3E6D3
1FFB0EFF6CF1A0B3B041CCFBBB1E687F9FFDFDA1AED89CD016EC07EE4C7CB860
38BED3E884EBE11E64FEB79C15C51FA69757B50DEE99B7AB3107535100A33E02
87C97F3938F2B00A9A12D20C15B8B113AE5BA4EA62C5845406708A19D46C2166
8822EE77A6A9755CC55400F92F26BAFA0C5861E5B80AACB978DB1A04B57CF4C2
18938324FCD2E526D6E04DD4E93FFAC50C10466116C683F2A543BEF49914B0B5
1A87D2C3FA954F9EEA53AFCDEFD14CE744B26267C09EEEF0BC5BFE7CD97B2D0E
3F99EBCDFAE8A4AABA8FA033D2F08E9A3E74B786C4C0B9B3BF7BA6C8098A6A84
6CA8674088FE2D43F8CE376FB6D8315B53D27879A5E22DCD19F6DDFCFDC9D597
F0311F0A6790E1FD8787406AB7220C9D7A5B2BFC9978633C09C6D4352F06A60C
3EB15ABFB6A9838636381DAD05C20B0A57A47672200C683F577879601A41BC35
BF9D746B5E1833326C4A89FE5936F7982EC6B00ACCD7907B2A19150135B7349F
CEFBCA39EC7ECCABB36B8946DD476CC172EFE493F3029E87026F3BB85169EBF6
A9CBFE2408261A6E61FCE51FF0BBBE6A7BD27FB14E30F9A26C558DEA1C92BCE4
9CD5BC294A0EFDDB5D72ECD09A376F59886F807627A4ABD8028C11314DD1884E
9FB2569C8EEF2F8A1615433016AAD5E97F4F1129EFAE373F07A0594F4B7C621A
9AA0C139E48CEC5387287FAF08694003E4F5854EFCF92F85B2FC62DF80CC24F4
C4D69BCE0E80502B0127F26FE460A615377CF29562B803AD9D335E3E26730DF3
B4D265C77551BA8DF42672943C8520DBC84DA83AB625926D7E98973C5E203B3B
8B0339C4C4CFEFACC5BF2001370223F2F9BAF1DCB657B903E4D572524856C42F
4DC18943BE3B861C92D3E39F711F6343152DF50293883EB0D6B8F4CF2DB53D34
660265F741259BBCFC9A8FA266C157799191ED273F94C14193564C44874D873F
EFC6A542C6324B85BAF8FC671C6369EDD2DCC3995E22E665C09A1716BEA3119E
95FFD203D242FD5005486CD1B3524BF7CB78BE8216039D5C848F169E669D90BE
FE7D56ED1B4A1DFD9BA7EA16D954E39507115E1AD07B761F5A951278E23993D0
BA9AFFB3F01C88B0762B9F4C2ACE9FCD26F06349A82FA73A7C63634319343E3C
90301C7D2D0163CD73C87B00032B607033B64D575B3CC1EAEB5745BE926AFD06
92D0E82534742ACB54B79ABF99BB0743B66A40AB01E33EDB55D958E1FE135948
AAD92DBCCC0BBF923BADE35743851F27662A80D810CD90A76D26DD30E0437559
965388E98A3194619AE749E26E5B39B9FC3D3CBF1EB2F2CA4C7862DDE2FD211F
9FC9974246BF6E8321CDCF68D5F3D4D3E8BDE905F7F015D9C282C49F1A8D54FF
91E1E17189B5E559DC5709B6988322E8B0C79C4B88F48C3500C681B6BA272701
97E44FF8D3C1D09D096360F5A7A932C1682AB2193713C2F285F41A2BA9B7E812
4A4C3C47FB444E233E5EB667B045F81099AB765788668036FE27C609194B874B
160F4127D197C146165E7AB5608417E219825D5658E828AF52B5C6EB41587125
BCE6D6A900BA440468B7839933C860E59FBEE7ED45677C8D4F87986267DE2D4E
B49388B5298B8517BADF963C346BE3B95B7E4BDE0F34F0D566D809494EB77B4F
7FAD9A36DE59BCD6F4E3471BA256CE44B71F5A49B0334CCAD74894CB8E62319B
64648FE36CE0A2CF06C973A4DF4C04972C3EC265B8E153DDB972768EE275C5F1
E2F6A0F1827A2BD43279E0BE8BB0771E4B44CB6F7215F142C5DC50D6B8FDB828
986367E26B037795EAF401E69AB57BD2FA3ED3086388429D00718E8329C9FE51
E3DA7C5AFC05246E1849CF2202D2F97A061648F4D775428F0D12E20751B587B6
3990B1E9D65757CCFAE9B440CAFB3265072A42CF2916A9AD25C8CC9603EA222C
724ACC47D9A974A6C7EB56F90B9663728A3BD9D25BDF9C18EC8CD135A2C1CF00
5B97B2552492AB95128FE3A6251B21838BC760F2F70D42990E97C54054E50424
4C8712D35638F52C42A01A1612358204E2273413A31025357C38AA021DE97FD2
CA9AAA3CB484DBB20395B32A49AC5FCACB234571ED5DAD3164D764D471FC11A0
8EFA51102A76095AB46C4FD74FE3C0FB5ABB3D72F6317616DD6F6044105D4830
8C0045933BCAD0E736FE33B12A1783A4B69F70A59D7E1842017AD75CEE9CB11F
9D9EF1FD7474A1E7576CC1009884EA64CBBA819F2EE0E2E5FE1603BAB4546864
FB49F000183246F037704838704E48CEA16AA53473E1E4A24CB4F865E7502094
93F10B846DBEF9AC6B663638DED37BF1FDB40E09412B687E01791F75326D0B92
F12E2273BD96DB25B4EFD25F672F649AF601943A1EED1CD925AA669005A5BE07
8636C0B91FFE4220E6BCDA8DED3037B508EE814AB02BEA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D5051181
315AEF884EABB76C5B134E7E0185E7D59A2DA456CEDC82C054F197229990E895
ABB45C025940C558D4C98C6764B00D6917766CABAAEE890025CF7C0B1A6BD5BF
1F8E62D380C7849CDF06492BEC78C972A98026CDDF2A30625A96D549BC5441D7
447FA16D4EE9D8C8E841269B1D361F0D9EA02154A8F563979FA89334075CB13E
CAFA59D893763EBCE2B810B880C9135064B104573E9606ABA81A5F36CC8C1A96
A16F057568420A735A17630589E37624FBE48F378107E6EA880A578654ACA1F7
80307168F5F61A1BE8D00DA9D4DC314723B7A2960FE961F23AAB485260F1FAB5
D7EB7B5BC72B8D783E03E76AF474F73A6ADA241621C368BA9CCFE1E68464873A
5914E66617D23AF3A4A972B07B5E6DA345F29CD2561EEF398658783FAA758D30
BB16F55AABDC8377A9F37112DCFE34DC3BC7889625773C7E53224FFFCEE27D32
9A62F6D03DEB59AEFE38551259A8CB31CF7C554C013617581ED034C304360FCB
2040E7C672920455151F81E76A0A95A558E056DFF187989EA1554A4608FE9446
5849B7FA0B5CE164777E439F98CB68C43D7561C8C3974A27AEBB8E50DD091B91
7FFB06EF9CA11F2B83B1A01E3FBAA321D869F1CCD34F56387A78B42685D9AE18
4801CC10F5A1E58E8097DE61046499135FAF474A25E2CA705906A6E15CB57F34
1B05C9D8A5E002854FD16417A7461A508B17DACB587D2C489DDF4EA5F644DBD7
ED1CD223F5F35BA3609BEF46966F9D76990019363CF8E32F286D48D6166E317E
F1297C3BA5E075FCB5F05A12EA2E30F1BE91DCBE42C0D814EAFBE88F1F99445B
49849681DDEC62792828FFF60407BC2A0D2B07C9EED014D89AB4CB82245B574C
006312B0F8FC10B66615CC18BFA5486EDE7284B2871960D316A48AC87E1F9887
01ADD7AA3ED43BF28647D31AAAC8455E617FEB0602B482C0B2BACAFBCC1DDEA0
E7B467FC1D8606ED27EBA786A6267DD8A194A076D5414BFD725E486BBE696AA6
732DBA9D7180CFEA2E4A4C69E45EA1BFEDFBEE2A8C2BF11950654B8BCD2CEE8F
016B5F91CD7BD3C3FDDF87640C0EF718D0F9456E8A6C60FDEF6AE1F8495374FC
EE1BA5EF594812C2DC4989142C4E619B7CE1F7A9D8E6C397E843568DE2D37739
7E665FC7D1B45CE90DE5655ADA3CD9BDF14A7ABF516951811FFC622C3ABA055C
11F137376EDA6A7171D5521D300545519BEB944638EC53509E0DE324052E3673
322C6AC272C71F8A69C8E4A889584A09BEA5D8A45CD86B64AA72D48BA14CE675
43363B0200D0091EFDC3E9D6ACA6CBDAFCA8B8E70E75847342D711701DD3549C
C418BC178AC9CBAC8E15B6738B2EA7CCCCF2143462179D0DCD0EEC7641C62214
CC2352F52B4984802BC019ED389078DA4B60204016F2D3BC610F66E7F9EED088
C9397EB104FC5BF1BA4916CC77BA0C325B32CE7A35B301F04B08BF3761DD805D
115EFD6170C249ED2AA8EBE6942A7B54BD64F36F5D6CF3422BBA718E54887EBF
902BB70D80FDAC6FA2B58A6BBED4A6384C81812BEA83BAAC31A779787EA26AED
8343BF45195CE5BE9DD41F1B9B8FF0227688ECA2F0B1A17151BC87A7DD6E2580
44F007CAE572F02C2A7AB0534219A7214E8CE67397BA7CF2633BD59CA5690B48
0FA5A7B8A3A176027EDDF4F5D2D260732672524C1C652D4691942CE4FFE5AE94
73A261BF1B78D93716899F9AAA99FB1016840B40D43E842A437C04475D78C370
BDD7C34A49D5251D3DED21DA3E534C371D33F9C8D22A8E99B9EE8C4D7F0464F9
CC869442EF44CFC2703BDC3587732268BC28BD1B4DB14E123BD0653FC588DF28
60F1D1025CB68EA6BC3C0B06265F801412F50BC2C441B0D304C097C1AF30CC16
30DA251DACD90B265FDDF9CA23A81C416281FD953301483FE8E4AA8DC2DDA47B
17ED8CD4D4721F33A06F8635871EBC201E250047EADE1C1CFC4C57F6DEB25767
2491752C1A2BAAFF8EA91292D2F75B5FAB0EBB3B452996779DDBDCD22830473D
DED1A44C29C95B95517BA05A5BA53345433DA20640C40F378685CD35DECF25CA
43817B56BFC6D3FD17E396F51A28B92D1BBC1D2CC90825D7A0097D593C3F6FEB
A82A95F39B29CE8399AC5FBBAEDC6DF100949FE001F09A28EC6FF29BC48DC186
500567646F44826146085FB4FA9DCCFF82C6FE40B0882E212CF098CA1219658E
978B0938EB3EA6C1CAEE8FBD6FBB912D50CA8AF5731B5C94ECEF585DFBFF90A3
5A6A1898AB825C0C01322574326BE8121CD2ABF2EA25619EAB4495561A15E8C9
2E010C54D6975003C083A09256E9542282C6801F563179F24A9B2594F143069B
5F10E40B495DDB2EA9676BA1ABB2B417B2A1C8C83E2318C448EBEF2C7358AB2C
12EB950B30BE5638CA78756A6247437AEE6055A3042316CE275BD55E636F193B
1BC4F33D7817707E42EED2DE7AD115A5D9F6A2D258971774AA20084716FA3597
EFA1BFE22A37D0F453A05E3C6288C62E5DCFC3AFB54E016BFE3B5BE8831A07C8
87FA563F1A6C3C974856ABDA38B1BAE2EF94E1BC12205893373E8B6BAF26F0B2
DC9D3421A2133749B201476CC0A604CA633CAB0198BAA1AB2FF428D9073527FF
AFADF1260F1002506375FD935DB2437B7682BAD7CE946FEC0F9DB3930F56ADC5
BFBD3DCDD3C8EB1348182C3B70F7557F8540FB681723E7AE94730D211CE48E36
712CB136070EBD7A4A56520E7D0E68B491EB21F9351DE102B3A1D54974271077
D218DB950409DAA907D885B1A434C20A8B3F158AF74390C3D35D8D4CAE989A3F
4B89360DACA1482D80CD0423E219065319CE8F5E22CBB849D8AC0706B4A35E02
C32D6584FF63F806463D5F18EC14AD54543A4429A6FF51B43D6E18A416BE4F24
F517ED73B4F067EADD22F67127B73C224D96CDA03C6555C1D33FB5E0C9BA6B9C
1DF670002A8D3ECAA330D8AC896BA78986FF3A4800D636BFABFE17289BE13395
2CDA39F6CD4F7397D4174C85E82A52815618D81FD341B111BC37375BB2B407DF
2624B3FA33225E61EC14E517DEFA4EC8FEB3A298CD92EBE996730D100D7DE049
F914B1308F1742DB5AFA0362C84353904DC7A3134A03A1338A6D686E29EA2B71
3B31FAE528D86BD97459132697941FE290D1342853A9E4B3836F1CC06E914ED7
194B923FC166314A6D07137EA5097CFCC5D21F04DC6A21974E434071EDEA553A
320EA5A1756C84A0ED85DCC694AA8800B60C89A7D5C3017123298FAE4BEF20FB
452F593A4268F087914EA8F203EF44AE52F0E3787584634D581E86DAEDCB8A4E
8D1AB1A59BE639F7AC0B5C02462F3B74173E115FD2553030D1991B98EFA34992
C4AACC2C3338C06204DBE56568245EC9285E1445D16F0C60508C89F545680639
283F46104EFECBEDE67C3266231F975FA5F9D1E27E36E2317C54CB1B256BA384
642A491717EAB141087277F3D31DB6F13E8221FF50DCFC588723C2F056CA0C9F
D4453BF2AC338AEEED1016B1CE214CD74E9D4F48A09E4D9C1FF3A1923E3817F1
F42F4C23F4CB25ABED8404074A0E8CB95E1882B62FE292508C1AA44AE0F9CAEF
FC309F39521CEE1F7BA8DCA58400AC73FEBA40295386FD19E89698E562767582
3748F694A260A301010E4A47BD3D085F75999CB70797B90630D8AA1CC0C60240
87FA471AD8A53A148AE5E20CF9D9D9959909C6EEB367DB17A71924C9BC9BA5CE
A07126A0215FD9F28AEE28142EB86CD91D7FF1D7F0359F018A607DF490B4C588
D4A08708B2DE0A2422980A29E7DC85D8EE6C39A8848956492735480ABA7719AA
9DC52F6DCA561E24EFFF9F47AE440085CB4275F7FCEA7D5EDEC0E8F9EB9023EA
926BD31BBA4A698C16A83ED9EA1313F339FFB11914FDE2D1DE3AB747A0F5AD0B
F79A9AA23B26671868F23D34B79B673EF3A016B2CD4BEA36D2FAF6F3754272CB
1CEF20D81AF933ED48CE87E51F7938363E47C56CE7ECAE68A55D608666389FD9
8BC92088812FA5AE4517E4DFC822003E040A3D9314D61579BEF5F1BF4DCE4222
EF3AF2C6C4C4BE4ED3A9656F65C24901561041F526EB20C5AAF5A63E95A6FF7F
57BD220D58D1AB0A6E30794F992260281BC50DFB2958E1CAF16C1D98169A6AF6
EAA21793893D610BCF3FB958BD4F12564A8CC4A4893BEDDBAB189FA92FB73CDD
3B40C7712BFBC8211956DD96AEED4A3C1CA1C670CECEB3E660E29C579991E6C0
7D841AC2C8908C6188888F58360412BDA00C60F5F38C9703EF3DEBD0F59D56FE
26656D564873BF2F484FF52FE541298F8A62F41D1A67A08CB035C6311A7AE3C5
C259D7C43859C285B87FA39160C787D2293DB84C7871C685D291F9FAA21DEDD5
66CD330ECC5600C2790505A22C36EA0BB90DFED2468DAB590AAE9356402E6B55
86B900FB70FABAA8EB1B35506B6829B75F639F5B60C6101C0D93270853A320A0
0ADB5C1BC9F2CC5C717E1CCB7C52B7E9C04B81F5E9387A997B84DEE3FC113322
04EC2C5AB880E865F5E7B99DC2FB8AE405AA77A47C446B910BD7A0CFE9DC90CC
1D2E188163D03C626F8213ACCAEDF56333422EAA674A0826D1E0E706C676DE10
FFAC8DF016F2B2DB77AAA429F5E474BE109250253F504E4B250CF843BBABBA6A
400EE885551E65CD1C9ABA5E3CA7743F77CE8D850BC27DE49BE76D2BFF1F2100
9D29FC783F669E321EE3A159F4B9906619FE072B6E9686556989B592A6382A15
F3D895EAEB6C406210370A7A27585EB45B6267439F92E78AC559FFF2FA954774
79B6059FB2397711591E3DB17D5D29AB9D8EFF88571145340AFD442622E353DB
AB733E6B5127E71E37FEAB3AE3C61D237BFA674EA2D11E49EBD51274FE66DA01
53A16C10E454FE2BC3921C1BFA40C8F516CA23E266CA14C7B0E96C1372713ED6
2728D99FDAEECFA8E4772D81A207636E35853B6E9296BDFE55058193A9FB8BD5
B6E41F092ECF8C78D6A3C4893724092012C0C6630E90D4A75278A612FC5092B3
61439142ADA69B7102780AD6CDF423FC0F4ACE25086C868C319E28B6262C8BAD
B0F88EA751C83936BFD4592CAD0AE67F67EBEC0E1945012150A15A5C1EE8E0D0
38980E89A0D60606D8BADCE8BE27AD527D44E6F8184AF7902E72CA61284E2A9D
1527D0196D09CE7A574BCBB1A31694ABE3B885F121E3C70067F64647212E515F
4375B11DA0F6531AE513DDD4C886BDB5E314DD734BA5608FC604D275EA1E1718
5EF944035343ACA5A876E72654421DD3999272EF3563F879364229403E8A1E2A
2EF1011A1A7FB02B034B8C46E026947B77ECE317CC46FECF1FBA21EA0C2E6458
330C0DC4E7AD1AE1B3C382BFA0CA36F33FAEE51E2E0E75E0DBFE469A19AE68CE
C8A81DAB6325E4A5FEA308D5DFEE54092238F9A5D4A0CAD5269092D0FD9D36F9
F9C27A27B542E986A47416630B2DC88CEE26CB4390EFB820149034DDBBAFC3A9
72205B5DB503358D6E83E69C049709C24A321B239E39AD62BEA9DAE67C19A137
5B4356AE3047A0DA0C6E5592B7A0ADAA1D06F1484DFA6FE9098604AB0BC4513A
0B7DC2678151FFFE619162B64BC08EA16729FD2A4F1CA70CA0FB95B02CC1A564
CB29D05C3A46C38230175B04342FE0878D4C44070468003F7DA37E018272EFAF
41B636F8F6061072208F3FB773180B415AE41A7F57489B56529B72657D5378D8
7216BE8DF5411B631B3FBFDCD6EE717145535DA317935EA8F2FBBC26BBC51FDF
617AEF97F7C422AED624DD7B8E4E5A12524BA828EC55E47C0C05A8635E075DF9
FB0F3E052A7394C144D0983F77FB4DC2DD530D7DEFF110CAB024FA05E5F3C57D
D3125B5F0833F372A022CDDBA9948ED8DA31B2BA32AFAD39BE16083894BEA1D1
B92A499F1CC9FAD04DF5DAB2738C8C2EDC14F6F92022C703D315FF4456783166
3D5C707F96185C7D0700DCCE269615B219EE410382C8122C3CDF76E88A4F1094
B3FCE19F32CB79CFEC6FE693FA2B2E7FAB3C83AE726F463509E255B53FAF9B03
10FC077C486A35AF13EC4AB9EA10E9BD8AB356A6347D085273876208B0ED41F5
00F349129F75950AFAB70A3C03B3A6130354718AB97625A80A6ACEA5C4A2E3E0
5D7CD620F61E720545A9ABA8F5B0B96E0E04577F9EC5606F4A3D04067EFC5B93
503E93B5B31D1D42834B9322689F1EDD6009E125A5F1988A9A19486A47B24662
A9427B93C7D1120251D9FD4C97FFE8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (technology_review.dvi)
@start /Fa 107[33 33 24[33 37 34 56 38 40 22 28 26 37
40 36 39 59 19 37 16 19 39 37 22 32 41 30 37 33 3[22
1[22 3[67 1[52 41 35 45 2[52 55 63 41 48 2[55 51 37 1[52
47 41 52 6[17 33 33 33 33 33 33 33 33 33 33 40 17 22
17 2[22 22 1[52 35[40 2[{ TeXBase1Encoding ReEncodeFont }66
66.6667 /URWPalladioL-Roma rf /Fb 134[40 40 57 40 44
22 40 26 1[44 44 44 1[18 40 1[18 44 1[22 44 44 40 44
44 8[53 75 1[57 48 53 1[62 53 1[57 66 44 2[22 57 62 3[57
1[53 13[44 44 44 2[22 46[{ TeXBase1Encoding ReEncodeFont }40
79.1666 /NimbusSanL-ReguItal rf /Fc 136[62 44 48 26 44
31 2[48 48 1[22 2[22 48 2[44 1[44 1[44 16[53 62 10[57
57 13[44 44 44 44 44 2[22 46[{ TeXBase1Encoding ReEncodeFont }24
79.1666 /NimbusSanL-Bold rf /Fd 133[40 44 41 66 45 48
26 34 31 44 48 43 46 70 23 44 19 23 46 44 26 38 48 35
44 40 3[26 1[26 2[53 79 1[62 49 42 53 62 48 62 66 75
48 2[27 66 60 44 1[61 56 48 62 7[40 40 40 40 40 40 40
40 40 2[20 26 20 4[22 36[48 2[{ TeXBase1Encoding ReEncodeFont }62
79.1666 /URWPalladioL-Roma rf /Fe 134[44 1[66 44 1[26
35 31 1[48 44 48 70 3[26 1[44 31 40 1[35 48 40 9[79 3[48
57 2[66 10[66 16[40 40 40 49[{ TeXBase1Encoding ReEncodeFont }25
79.1666 /URWPalladioL-Bold rf /Ff 168[87 3[61 66 2[71
10[66 66 15[51 51 51 49[{ TeXBase1Encoding ReEncodeFont }9
91.6666 /NimbusSanL-Bold rf /Fg 166[49 1[69 49 1[45 49
53 1[49 57 53 61 3[20 1[57 45 49 1[53 53 53 65[{
 TeXBase1Encoding ReEncodeFont }17 73.3333 /NimbusSanL-Bold
rf /Fh 201[32 32 32 32 32 32 49[{ TeXBase1Encoding ReEncodeFont }6
58.3333 /NimbusSanL-Regu rf /Fi 134[33 1[48 1[37 19 33
22 1[37 37 37 56 15 33 15 15 37 37 19 37 37 33 37 37
12[41 11[48 1[41 2[48 44 19[19 46[{ TeXBase1Encoding ReEncodeFont }28
66.6667 /NimbusSanL-Regu rf /Fj 139[22 37 26 14[37 41
37 31[48 65[{ TeXBase1Encoding ReEncodeFont }7 66.6667
/NimbusSanL-Bold rf /Fk 183[97 1[65 71 90 83 20[29 46[{
 TeXBase1Encoding ReEncodeFont }6 116.667 /URWPalladioL-Roma
rf /Fl 166[62 1[93 1[73 1[49 62 2[73 78 1[57 68 1[31
78 2[57 69[{ TeXBase1Encoding ReEncodeFont }12 93.3332
/URWPalladioL-Roma rf /Fm 170[156 123 105 3[157 1[189
3[67 1[153 1[122 155 142 122 8[100 5[100 51[{
 TeXBase1Encoding ReEncodeFont }13 200 /URWPalladioL-Roma
rf /Fn 169[116 124 98 84 107 1[97 126 133 151 98 116
5[98 1[113 1[124 65[{ TeXBase1Encoding ReEncodeFont }14
160 /URWPalladioL-Roma rf /Fo 188[144 133 66[{
 TeXBase1Encoding ReEncodeFont }2 200 /URWPalladioL-Bold
rf /Fp 171[107 98 3[133 133 2[124 5[98 1[116 1[124 65[{
 TeXBase1Encoding ReEncodeFont }8 160 /URWPalladioL-Bold
rf /Fq 175[60 1[83 22[50 3[50 50 50 50 3[25 44[{
 TeXBase1Encoding ReEncodeFont }8 100 /URWPalladioL-Roma
rf /Fr 166[53 2[58 3[53 1[48 63 1[76 6[44 49 62 1[49
62 65[{ TeXBase1Encoding ReEncodeFont }11 79.9999 /URWPalladioL-Roma
rf /Fs 171[102 87 111 14[118 67[{ TeXBase1Encoding ReEncodeFont }4
166.667 /URWPalladioL-Roma rf /Ft 166[89 1[133 96 1[82
70 2[81 105 111 1[81 2[45 111 102 1[81 1[95 1[104 65[{
 TeXBase1Encoding ReEncodeFont }15 133.333 /URWPalladioL-Roma
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -31 705 a @beginspecial 0 @llx
0 @lly 345 @urx 435 @ury 1133 @rhi @setspecial
%%BeginDocument: coe_v_spot1.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: coe_v_spot.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Heather Miller
%%CreationDate: 6/19/12
%%BoundingBox: 0 0 345 435
%%HiResBoundingBox: 0 0 344.3750 434.2715
%%CropBox: 0 0 344.3750 434.2715
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 104 128 8
%%BeginData: 19340 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0CFFCFC3C2FD04BBBAC1C1C9CAFD16FFCAC2C2BBC1BBC1C1C2C3
%FD3AFFC9C298BB98BB98BB98BB98BB98BB99C9FD12FFC2C198BB92BB98BB
%98BB98BB98C2C9FD0AFFCFCACACACFCACACACFCACACAFD07FFCACFCACACA
%CFCACACACFCAFD0EFFC1BBBBBBBABBBBBBBABBBBBBBABBBBBB98C2CAFD0E
%FFC9BBBB98BBBBBBBABBBBBBBABBBBBB98BBC2FD09FFFD04BBBABBBBBBBA
%BBBBC9FD07FFC298BBBBBBBABBBBBBBABBC2FD0BFFCA98BB98BB98BB98BB
%98BB98BB98BB98BB98BB92BBC9FD09FFCFFFCAC192BB98BB98BB98BB98BB
%98BB98BB98BB98BB98C9FD07FFC192BB98BB92BB98BB92BBC2FD07FF99BB
%92BB98BB92BB98BB92C2FD0AFFCFBBBBBAC1BBBBBAC1BBBBBAC1BBBBBAC1
%BBBBBAC1BBBBC9FD09FFCFC1BABBBBBBBAC1BBBBBAC1BBBBBAC1BBBBBAC1
%BBBBBAC9FD06FFFD04BBBAC1BBBBBABBBBC9FD07FFC2BAC1BBBBBAC1BBBB
%BABBC2FD09FFCA98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98
%BBC9FD07FFCAC198BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98
%C9FD05FFC192BB98BB98BB98BB98BBC2FD07FFC1BB98BB98BB98BB98BB92
%C8FD09FFBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBC1
%CFFD06FFC298BBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBA
%FD05FFC1BBBABBBBBBBABBBBBB98C9FD07FFC2BBBBBABBBBBBBABBBBBBC2
%FD08FFA0BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB92
%C2FD05FFCA92BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98BB98
%BB9FFD04FFC192BB98BB98BB98BB98BBA0FD07FF99BB98BB98BB98BB98BB
%92C2FD07FFCFC1BBBBBAC1BBBBBAC1BBBBBABBBBBBBAC1BBBBBAC1BBBBBA
%C1BBBBBBFD05FFC1BBBAC1BBBBBAC1BBBBBAC1BBBBBABBBBBBBAC1BBBBBA
%C1BBBBBABBCAFFFFFFC1BBBAC1BBBBBAC1BBBBBAC9FD07FFC2BBBBBAC1BB
%BBBAC1BBBBC2FD07FFC992BB98BB98BB98BB98BB98BB98C2BBBB92BB98BB
%98BB98BB98BB98BBC2FFFFFFC9BB98BB98BB98BB98BB98BB92BBBBC198BB
%98BB98BB98BB98BB98BB92C2FFFFFFC298BB98BB98BB98BB98BBC2FD07FF
%99BB98BB98BB98BB98BB98C2FD07FFC2BBBABBBBBBBABBBBBBBABBC1CFFF
%FFFFC298BBBBBBBABBBBBBBABBBBC2FFFFFFC998BBBBBBBABBBBBBBABBBB
%C1C9FFFFFFC2BBBBBBBABBBBBBBAFD04BBFFFFFFFD04BBBABBBBBBBABBBB
%C9FD07FFC298BBBBBBBABBBBBBBABBC2FD06FFCAC198BB98BB98BB98BB98
%BB99FD06FFC292BB98BB98BB98BB98BB98CFFFFF99BB98BB98BB98BB98BB
%92BBCAFD05FF9FBB98BB98BB98BB98BB98BBC9FFFFC192BB98BB98BB98BB
%98BBC2FD07FF99BB98BB98BB98BB98BB92C2FD07FFBBBBBAC1BBBBBAC1BB
%BBBACAFD06FFCABBBBBBBAC1BBBBBAC1BBBBCAFFFFC1BAC1BBBBBAC1BBBB
%BABBC2FD07FFBBBBBAC1BBBBBAC1BBBBBACFFFFFFD04BBBAC1BBBBBABBBB
%C9FD07FFC2BAC1BBBBBAC1BBBBBABBC2FD06FFCABB98BB98BB98BB98BB98
%BBCAFD07FF98BB98BB98BB98BB98BB98CAFFFFBBBB98BB98BB98BB98BB98
%CAFD07FFC198BB98BB98BB98BB98BBC3FFFFC192BB98BB98BB98BB98BBC2
%FD07FFC1BB98BB98BB98BB98BB92C8FD06FFCFBABBBBBBBABBBBBBBABBBB
%CFFD07FFC198BBBBBBBABBBBBBBABBC9FFCFC1BBBBBABBBBBBBABBBBBBC9
%FD07FFFD04BBBABBBBBBBABBBBC9FFFFC1BBBABBBBBBBABBBBBB98C9FD07
%FFC2BBBBBABBBBBBBABBBBBBC2FD06FFCABB92BB98BB98BB98BB92BBCAFD
%07FF99BB98BB98BB98BB98BB92CAFFFF98BB98BB98BB98BB98BB98C9FD07
%FFC192BB98BB98BB98BB98BBC3FFFFC192BB98BB98BB98BB98BBA0FD07FF
%99BB98BB98BB98BB98BB92C2FD06FFCFFD04BBBAC1BBBBBABBBBCFFD07FF
%C1BAC1BBBBBAC1BBBBBABBC9FFCFC1BBBBBAC1BBBBBAC1BBBBC9FD07FFFD
%04BBBAC1BBBBBAC1BBC9FFFFC1BBBAC1BBBBBAC1BBBBBAC9FD07FFC2BBBB
%BAC1BBBBBAC1BBBBC2FD06FFCABB98BB98BB98BB98BB98BBCAFD07FF99BB
%98BB98BB98BB98BB98CAFFFF99BB98BB98BB98BB98BB98C9FD07FFC192BB
%98BB98BB98BB98BBC3FFFFC298BB98BB98BB98BB98BBC2FD07FF99BB98BB
%98BB98BB98BB98C2FD06FFCFBBBBBABBBBBBBABBBBBBBACFFD06FFCFC1BB
%BBBABBBBBBBABBBBBBC9FFCFC198BBBBBBBABBBBBBBABBC9FD07FFBBBBBA
%BBBBBBBABBBBBB98C9FFFFFD04BBBABBBBBBBABBBBC9FD07FFC298BBBBBB
%BABBBBBBBABBC2FD06FFCABB98BB98BB98BB98BB98BBC9FD07FF98BB98BB
%98BB98BB98BB98C9FFFF99BB98BB98BB98BB98BB92C9FD07FFC198BB98BB
%98BB98BB98BBA0FFFFC192BB98BB98BB98BB98BBC2FD07FF99BB98BB98BB
%98BB98BB92C2FD07FFBBBBBAC1BBBBBAC1BBBBBACFFD06FFCFC1BBBBBAC1
%BBBBBAC1BBBBC9FFFFC1BAC1BBBBBAC1BBBBBABBC9FD07FFBBBBBABBBBBB
%BABBBBBBBAC9FFFFFD04BBBAC1BBBBBABBBBC9FD07FFC2BAC1BBBBBAC1BB
%BBBABBC2FD06FFCABB98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98
%BB98BB98CAFFFFBBBB98BB98BB98BB98BB92C2FD07FFC2BBC199C1BBC199
%C1BBBBC9FFFFC192BB98BB98BB98BB98BBC2FD07FFC1BB98BB98BB98BB98
%BB92C8FD06FFCFBABBBBBBBABBBBBBBABBBBCFFD07FFC198BBBBBBBABBBB
%BBBABBC9FFFFC2BBBBBABBBBBBBAFD04BBFD15FFC1BBBABBBBBBBABBBBBB
%98C9FD07FFC2BBBBBABBBBBBBABBBBBBC2FD06FFCABB92BB98BB98BB98BB
%92BBCAFD07FF99BB98BB98BB98BB98BB92CAFFFFA0BB98BB98BB98BB98BB
%98BBA0FD14FFC192BB98BB98BB98BB98BBA0FD07FF99BB98BB98BB98BB98
%BB92C2FD06FFCFFD04BBBAC1BBBBBABBBBCFFD07FFC1BAC1BBBBBAC1BBBB
%BABBC9FFFFCFBBBBBAC1BBBBBAC1BBBBBAC1CAFD13FFC1BBBAC1BBBBBAC1
%BBBBBAC9FD07FFC2BBBBBAC1BBBBBAC1BBBBC2FD06FFCABB98BB98BB98BB
%98BB98BBCAFD07FF99BB98BB98BB98BB98BB98CAFFFFFFC198BB98BB98BB
%98BB98BB92C1CFFD12FFC298BB98BB98BB98BB98BBC2FD07FF99BB98BB98
%BB98BB98BB98C2FD06FFCFBBBBBABBBBBBBABBBBBBBACFFD06FFCFC1BBBB
%BABBBBBBBABBBBBBC9FFFFFFC2BBBBBBBABBBBBBBABBBBBB98C2FD12FFFD
%04BBBABBBBBBBABBBBC9FD07FFC298BBBBBBBABBBBBBBABBC2FD06FFCABB
%98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98BB98BB98C9FFFFFFCF
%98BB98BB98BB98BB98BB98BB92C2FD11FFC192BB98BB98BB98BB98BBC2FD
%07FF99BB98BB98BB98BB98BB92C2FD07FFBBBBBAC1BBBBBAC1BBBBBACFFD
%06FFCFC1BBBBBAC1BBBBBAC1BBBBC9FD04FFC9BBBBBAC1BBBBBAC1BBBBBA
%BBBBC9FD10FFFD04BBBAC1BBBBBABBBBC9FD07FFC2BAC1BBBBBAC1BBBBBA
%BBC2FD06FFCABB98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98BB98
%BB98CAFD05FFC198BB98BB98BB98BB98BB98BB98C9FD0FFFC192BB98BB98
%BB98BB98BBC2FD07FFC1BB98BB98BB98BB98BB92C8FD06FFCFBABBBBBBBA
%BBBBBBBABBBBCFFD07FFC198BBBBBBBABBBBBBBABBC9FD05FFCABBBBBBBA
%BBBBBBBABBBBBBBABBBBCFFD0EFFC1BBBABBBBBBBABBBBBB98C9FD07FFC2
%BBBBBABBBBBBBABBBBBBC2FD06FFCABB92BB98BB98BB98BB92BBCAFD07FF
%99BB98BB98BB98BB98BB92CAFD06FFA7BB98BB98BB98BB98BB98BB98BB99
%FD0EFFC192BB98BB98BB98BB98BBA0FD07FF99BB98BB98BB98BB98BB92C2
%FD06FFCFFD04BBBAC1BBBBBABBBBCFFD07FFC1BAC1BBBBBAC1BBBBBABBC9
%FD07FFC9BBBAC1BBBBBAC1BBBBBAC1BBBBBBFD0DFFC1BBBAC1BBBBBAC1BB
%BBBAC9FD07FFC2BBBBBAC1BBBBBAC1BBBBC2FD06FFCABB98BB98BB98BB98
%BB98BBCAFD07FF99BB98BB98BB98BB98BB98CAFD08FFC2BB98BB98BB98BB
%98BB98BB98BBA0FD0CFFC298BB98BB98BB98BB98BBC2FD07FF99BB98BB98
%BB98BB98BB98C2FD06FFCFBBBBBABBBBBBBABBBBBBBACFFD06FFCFC1BBBB
%BABBBBBBBABBBBBBC9FD09FFC1BBBABBBBBBBABBBBBBBABBBBBBC2FD0BFF
%FD04BBBABBBBBBBABBBBC9FD07FFC298BBBBBBBABBBBBBBABBC2FD06FFCA
%BB98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98BB98BB98C9FD0AFF
%99BB98BB98BB98BB98BB98BB98BBA1FD0AFFC192BB98BB98BB98BB98BBC2
%FD07FF99BB98BB98BB98BB98BB92C2FD07FFBBBBBAC1BBBBBAC1BBBBBACF
%FD06FFCFC1BBBBBAC1BBBBBAC1BBBBC9FD0BFFFD04BBBAC1BBBBBAC1BBBB
%BAC1CAFD09FFFD04BBBAC1BBBBBABBBBC9FD07FFC2BAC1BBBBBAC1BBBBBA
%BBC2FD06FFCABB98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98BB98
%BB98CAFD0BFFCA98BB98BB98BB98BB98BB98BB92C1CAFD08FFC192BB98BB
%98BB98BB98BBC2FD07FFC1BB98BB98BB98BB98BB92C8FD06FFCFBABBBBBB
%BABBBBBBBABBBBCFFD07FFC198BBBBBBBABBBBBBBABBC9FD0CFFC998BBBB
%BBBABBBBBBBABBBBBB98C2FD08FFC1BBBABBBBBBBABBBBBB98C9FD07FFC2
%BBBBBABBBBBBBABBBBBBC2FD06FFCABB92BB98BB98BB98BB92BBCAFD07FF
%99BB98BB98BB98BB98BB92CAFD0DFFC292BB98BB98BB98BB98BB98BB92C2
%FD07FFC192BB98BB98BB98BB98BBA0FD07FF99BB98BB98BB98BB98BB92C2
%FD06FFCFFD04BBBAC1BBBBBABBBBCFFD07FFC1BAC1BBBBBAC1BBBBBABBC9
%FD0EFFC2BBBBBAC1BBBBBAC1BBBBBABBBBC9FD06FFC1BBBAC1BBBBBAC1BB
%BBBAC9FD07FFC2BBBBBAC1BBBBBAC1BBBBC2FD06FFCABB98BB98BB98BB98
%BB98BBCAFD07FF99BB98BB98BB98BB98BB98CAFD0FFFC198BB98BB98BB98
%BB98BB98BB98C9FD05FFC298BB98BB98BB98BB98BBC2FD07FF99BB98BB98
%BB98BB98BB98C2FD06FFCFBBBBBABBBBBBBABBBBBBBACFFD06FFCFC1BBBB
%BABBBBBBBABBBBBBC9FD0FFFCAC1BBBBBABBBBBBBABBBBBBBABBBBFD05FF
%FD04BBBABBBBBBBABBBBC9FD07FFC298BBBBBBBABBBBBBBABBC2FD06FFCA
%BB98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98BB98BB98C9FD10FF
%C9BB98BB98BB98BB98BB98BB98BBC2FD04FFC192BB98BB98BB98BB98BBC2
%FD07FF99BB98BB98BB98BB98BB92C2FD07FFBBBBBAC1BBBBBAC1BBBBBACF
%FD06FFCFC1BBBBBAC1BBBBBAC1BBBBC9FD11FFC9BBBAC1BBBBBAC1BBBBBA
%C1BBC1FD04FFFD04BBBAC1BBBBBABBBBC9FD07FFC2BAC1BBBBBAC1BBBBBA
%BBC2FD06FFCABB98BB98BB98BB98BB98BBC9FD07FF98BB98BB98BB98BB98
%BB98CAFD12FFC2BB98BB98BB98BB98BB98BB98C9FFFFFFC192BB98BB98BB
%98BB98BBC2FD07FFC1BB98BB98BB98BB98BB92C8FD06FFCFBABBBBBBBABB
%BBBBBABBBBCFFD07FFC198BBBBBBBABBBBBBBABBC9FD13FFC2BBBABBBBBB
%BABBBBBBBABBC2FFFFFFC1BBBABBBBBBBABBBBBB98C9FD07FFC2BBBBBABB
%BBBBBABBBBBBC2FD06FFCABB92BB98BB98BB98BB92BBCAFD07FF99BB98BB
%98BB98BB98BB92CAFD14FF98BB98BB98BB98BB98BB92C1FFFFFFC192BB98
%BB98BB98BB98BBA0FD07FF99BB98BB98BB98BB98BB92C2FD06FFCFFD04BB
%BAC1BBBBBABBBBCFFD07FFC1BAC1BBBBBAC1BBBBBABBC9FFFFC2C1C2C1C2
%C1C2C1C2C1C2C9FD06FFC9BAC1BBBBBAC1BBBBBABBBBFFFFFFC1BBBAC1BB
%BBBAC1BBBBBAC9FD07FFC2BBBBBAC1BBBBBAC1BBBBC2FD06FFCABB98BB98
%BB98BB98BB98BBCAFD07FF99BB98BB98BB98BB98BB98CAFFFF98BB98BB92
%BB98BB92BB92C9FD06FFC9BB98BB98BB98BB98BB98BBC9FFFFC298BB98BB
%98BB98BB98BBC2FD07FF99BB98BB98BB98BB98BB98C2FD06FFCFBBBBBABB
%BBBBBABBBBBBBACFFD06FFCFC1BBBBBABBBBBBBABBBBBBC9FFCFC198BBBB
%BBBABBBBBBBABBC9FD07FFBBBBBABBBBBBBABBBBBB98CFFFFFFD04BBBABB
%BBBBBABBBBC9FD07FFC298BBBBBBBABBBBBBBABBC2FD06FFCABB98BB98BB
%98BB98BB98BBC9FD07FF98BB98BB98BB98BB98BB98C9FFFF99BB98BB98BB
%98BB98BB92C9FD06FFCABB98BB98BB98BB98BB98BBA1FFFFC192BB98BB98
%BB98BB98BBC2FD07FF99BB98BB98BB98BB98BB92C2FD07FFBBBBBAC1BBBB
%BAC1BBBBBACFFD06FFCFC1BBBBBAC1BBBBBAC1BBBBC9FFFFC1BAC1BBBBBA
%C1BBBBBABBC9FD07FFBBBBBAC1BBBBBAC1BBBBBAC9FFFFFD04BBBAC1BBBB
%BABBBBC9FD07FFC2BAC1BBBBBAC1BBBBBABBC2FD06FFCABB98BB98BB98BB
%98BB98BBC9FD07FF98BB98BB98BB98BB98BB98CAFFFFBBBB98BB98BB98BB
%98BB98C9FD06FFCAC198BB98BB98BB98BB98BBC3FFFFC192BB98BB98BB98
%BB98BBC2FD07FFC1BB98BB98BB98BB98BB92C8FD06FFCFBABBBBBBBABBBB
%BBBABBBBCFFD07FFC198BBBBBBBABBBBBBBABBC9FFCFC1BBBBBABBBBBBBA
%BBBBBBC9FD07FFFD04BBBABBBBBBBABBBBC9FFFFC1BBBABBBBBBBABBBBBB
%98C9FD07FFC2BBBBBABBBBBBBABBBBBBC2FD06FFCABB92BB98BB98BB98BB
%92BBCAFD07FF99BB98BB98BB98BB98BB92CAFFFF98BB98BB98BB98BB98BB
%98C9FD06FFCFBB92BB98BB98BB98BB98BBC3FFFFC192BB98BB98BB98BB98
%BBA0FD07FF99BB98BB98BB98BB98BB92C2FD06FFCFFD04BBBAC1BBBBBABB
%BBCFFD07FFC1BAC1BBBBBAC1BBBBBABBC9FFCFC1BBBBBAC1BBBBBAC1BBBB
%C9FD07FFFD04BBBAC1BBBBBAC1BBC9FFFFC1BBBAC1BBBBBAC1BBBBBAC9FD
%07FFC2BBBBBAC1BBBBBAC1BBBBC2FD06FFCABB98BB98BB98BB98BB98BBCA
%FD07FF98BB98BB98BB98BB98BB98CAFFFF99BB98BB98BB98BB98BB98C9FD
%07FFC198BB98BB98BB98BB98BBC3FFFFC198BB98BB98BB98BB98BBC2FD07
%FF99BB98BB98BB98BB98BB98C2FD07FFBBBBBABBBBBBBABBBBBB98C9FD06
%FFC9BBBBBBBABBBBBBBABBBBBBCAFFFFC198BBBBBBBABBBBBBBABBC2FD06
%FFCFBBBBBABBBBBBBABBBBBB98CAFFFFFD04BBBABBBBBBBABBBBC2FD07FF
%C198BBBBBBBABBBBBBBABBC9FD06FFCFC198BB98BB98BB98BB98BB99FD06
%FFC192BB98BB98BB98BB98BB99FFFFFF99BB98BB98BB98BB98BB92BBCAFD
%05FF99BB98BB98BB98BB98BB98BBC9FFFFC292BB98BB98BB98BB98BB98C9
%FD05FFC292BB98BB98BB98BB98BB92C9FD07FFC2BBBAC1BBBBBAC1BBBBBA
%BBBBCAFFFFCAC2BAC1BBBBBAC1BBBBBAC1BBC2FFFFFFC9BAC1BBBBBAC1BB
%BBBAC1BBC1C9FFFFFFC2BBBBBBBAC1BBBBBAC1BBBBBBFFFFFFC9BBBBBBBA
%C1BBBBBAC1BBBBBBC9FFFFCAC2BBBBBAC1BBBBBAC1BBBBBAC1CFFD07FFC9
%98BB98BB98BB98BB98BB98BB98BB99BB98BB98BB98BB98BB98BB98BBC2FF
%FFFFC9BB98BB98BB98BB98BB98BB98BB99C198BB98BB98BB98BB98BB98BB
%98C2FFFFFFCF98BB98BB98BB98BB98BB98BB92BBBBBB92BB98BB98BB98BB
%98BB98BB99FD09FFC1BBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBB
%BBBAFD04BBFD05FFC1BBBABBBBBBBABBBBBBBABBBBBB98BBBBBBBABBBBBB
%BABBBBBB98BBCAFD04FFC298BBBBBBBABBBBBBBABBBBBB98BBBBBBBABBBB
%BBBABBBBBBBABBBBCAFD09FFA0BB98BB98BB98BB98BB98BB98BB98BB98BB
%98BB98BB98BB98BB92C3FD05FFCA98BB98BB98BB98BB98BB98BB98BB98BB
%98BB98BB98BB98BB98BB9FFD05FFCABB92BB98BB98BB98BB98BB98BB98BB
%98BB98BB98BB98BB98BB92C2FD0BFFC1BBBAC1BBBBBAC1BBBBBAC1BBBBBA
%C1BBBBBAC1BBBBBAC1BBC2FD07FFC2BAC1BBBBBAC1BBBBBAC1BBBBBAC1BB
%BBBAC1BBBBBAC1BBBBBBFD07FFC2BBBBBBBAC1BBBBBAC1BBBBBAC1BBBBBA
%C1BBBBBAC1BBBBBAC1CAFD0CFFBBBB98BB98BB98BB98BB98BB98BB98BB98
%BB98BB98BB92BBCAFD08FFC192BB98BB98BB98BB98BB98BB98BB98BB98BB
%98BB98BB98CAFD08FF9FBB98BB98BB98BB98BB98BB98BB98BB98BB98BB98
%BB98BBC3FD0DFFCFBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBB
%CAFD09FFCFC198BBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBBBACAFD0A
%FFC1BBBBBBBABBBBBBBABBBBBBBABBBBBBBABBBBBB98BBC9FD0FFFCF99BB
%92BB98BB98BB98BB98BB98BB98BB98BB92C1CAFD09FFCFFFCAC292BB98BB
%98BB98BB98BB98BB98BB98BB92BB98CAFD0CFFA0BB92BB98BB98BB98BB98
%BB98BB98BB98BB92BBA1FD12FFC2C1BBBBBAC1BBBBBAC1BBBBBABBBBBBBA
%C9FD0FFFC9BBBBBABBBBBBBAC1BBBBBAC1BBBBBABBC2FD0FFFC9C1BABBBB
%BBBAC1BBBBBAC1BBBBBABBBBC2CAFD14FFCAC299BB92BB98BB98BB98BB92
%BBC2CFFD12FFC2BB98BB98BB98BB98BB92BB98C2C9FD12FFC999BB98BB92
%BB98BB92BB98BB99CAFD19FFC9C9C1C2BBC1BBC2C2C9CFFD16FFCAC2C2C1
%C1BBC2C1C2C9FD17FFC9C9C2C2BBC1BBC2C2C9CAFD42FFCFFD1FFFCAFDEA
%FFA8FD64FF7D52F827F8277DFD32FF7D2727F82752FFFFFFFD04A8FD0CFF
%FD04A8FD11FF7E27F8272727F8277DFD30FF7DF8272727F82727A8FFFF27
%2752FD0DFF272727FD10FFA827F827F8522727F827A8FD2EFFA8F827F852
%5227F8272EFFA827F852FD0CFFA827F852FD10FFA8F82721A8FFFF2727F8
%84FD2EFF5927217DFFFFA82752FFFFFF272752FD0DFF272728FD10FF7D27
%F827A8FFFF52F82752FF7D7DA8A85284FFA85252527DFD04FF595252A87D
%7D7DFFFFA85252527DA8FFA87D59A8FF7D527DA8FD04FF7DF82752FFFFFF
%A8FFFFA85227F8277DA8FFFF7D52525259FFFFA85227F8277DA8FFFF7D52
%527DA8FD07FF7DF82727FFFFFF2727F87DFF27F85227277DFF2727F82727
%7DFFFF5227F8272727F87DFFA8F8272727F852FFFFF827527DF8272752FD
%04FF7D27272752FD05FF5227F8FD0427FF2727F8FD0427FF5227F8FD0427
%FF5227F8272727A8FD06FF7D27F827A8FFFF52F82752FF2727F827F87D52
%27217D5227F8A8A827F8275227F82752FF2727F87D2727F87EA827F827F8
%27F827F8A8FD04FF2727F827F8527DFFFF7D2727F827277DFF52F8527D52
%F82752A82727F827277D7D27F8527D52F852FD06FF7D212727FFFFFF2727
%217DFF27212752FFA827F87DFFFF27277DA8F82752FF7D27217DA8272152
%FFFF272752FF2727F87DA852F8277DFD04FFA827272127F82752FFFFFF27
%2727FFFFFFA8A8FFFFA8272152FFFF272727FFFF7DF827A8FF7D2727FD06
%FF5227F827A8FFFF27F82752FF272721FFFFFFF82752FFA827F87D7D27F8
%7DFFA8F82752A8F82752FFA827F852A827F852FFFF5227F884FD06FF5227
%F827F82752FFA827F852FD05FFA85252F82728FFA827F852FFFF5227F8A8
%A853F827A8FD05FF7D272727FFFFFF2727277DFF4C2752FFFFA827F82727
%27F8277DA8F8277DFF7E27277DA827277DFFFF272752FF272727FFFF7DF8
%277DFD08FFA8FD0427A8FF27272EFFFFFFA8522727F8272752FFFF272727
%FFFF7DF8272727F82727FD06FF7D27F827A8FFFF28F82752FF272727FFFF
%FFF827277D527D52A97D27F87DFFA8F82753A8F82752FFA828F852A827F8
%52FFFF5227F8A8FD0AFF2727F8A8FF27F852FFFFFF28F8277DA8212752FF
%A827F852FFFF5227F87D527D527DA8FD05FFA8F82727FFFFFF2727F87DFF
%27F852FFFFA827217DFD05FF7D212752FFA827F87DA827F87DFFFF272752
%FFF82728FFFF7D21277DFD04FF7D27FD04FF52F827A8FF272727FFFFA821
%277DFFA827F852FFAF212727FFFF7D2127FD0BFFA827F82752A85227F827
%7DFF272727FFFFFFF82727A8FFFF7DFF7D27F852FF7DF82752FFF82728FF
%A827F852A827F852FFFF5227F87DFFFFFF59F82727A8A87DF827F8FFA827
%F8277DFF5327F87DFF7DF82727FFA827F8277DFF5227F87DFFFFA8A8FD07
%FF52272727F827272728FFFF27F852FFFFFF592727275227277DFF272721
%522727F87DFF52F8275252F8277DFFF82728FFFF7D27277DFFFFFF7D2727
%27F8272727F87DFFFFFD042752A8272721522727F827A8FFFD042752A827
%27F852522727FD08FF2827F827F82752FFFFFF202727FFFFFFA852F827F8
%27F87DFF53F827F827F82752FFA827F827F82752FFA827F852FFFF5227F8
%7DFD04FF7D27F827F827F852FFFFFF7DF827F827FF52F827F8527D27F8A8
%FF7DF827F827FF7DF827F827F827A8FD08FF7E7D527D7DFD04FFA87DA8FD
%05FFA87D7D7DA8FFFFFFA852A87D27217DFFFFFFA8597DA8FFFFFF7D7D7D
%FFFFA87D7EA8FD05FFA8A87D7D7DFD06FFA8597D7DFFFFA87DA8FFFFA87D
%A8FFFFA87D7D7DFFFFFF7D7D53A8FD22FFA87EFFFF7DF8277DFD31FFA8FD
%2DFFA8F827527D202727A8FD5FFFA852F827F827F8A8FD1EFFA8FD0BFFA8
%FD0FFFA8FFFFFFA8FD23FFA87D7D7DFD05FF527DA852A8FFFF5252FF52A8
%FFFF527DFFFF5352FF7E52FFFF7D275227A8FFA8275252FFFFFF7D27F87D
%FFFF7D52FFFFA852275227FFFF5252FF277DFD2CFF2752FFF8A8FFFF2727
%7D277DFFFF5227FFFF7DF8FF2752FFFF52277D7DA8FF7D277D2752FFFF28
%277D7DFFFF7DF8FFFFFF7D5227A8A8FF7D275227A8FD2CFF277DA827A8FF
%FF52205227A8FFFF5252FFFFA8277D527DFFFF7D27287DFFFFA8207D277D
%FFFF522752FFFFFF7D27A9FFFFFF5252FD04FF272752FD2DFF2752FFF8A8
%FFFF277D27277EFFFF5252FFFFFF522727FFFFFF52277DFFFFFF7D27F828
%FD04FF7D2727FFFF7DF8FD04FF7D27FD04FF7DF8AFFD2DFF52275227A8FF
%FF527D7DF8A8FFFF5252FFFFFF7D2152FFFFFF7D27A87DAFFFA827A8F8A8
%FFFF527D5227FFFF7D27A8FFFFFF5252FD04FF7D27A8FD2DFFA8272752FF
%FFFF52A8A85284FFFF7D52FFFFFFA8527DFFFFFF7D5227277DFF7D52A852
%52FFFF7D27277DFFFFA852FD04FF7D52FD04FFA852FDFCFFFDFCFFFDB0FF
%CFFFFFFFCFFD50FFA0C9C2C2A0C2C1C299C299C199C199BB98BB98BB98BB
%98BB98BB98BB98BB99BB99C299C199C2C2C2A0C9C2CAFD3DFFCACFCACFC9
%CAC9CFC9C9C9CAC9C9C2C9C9C9C3C9C9C9C3C9C9C9C3C9C3C9C9CAC9C9C9
%CFC9CACAFFCACFCFFDFCFFFDFCFFFDFCFFFFFFFF7D7D7DFD08FFA87DFF7D
%A8FD1BFF7D52FFFFFFA8A87D7D7DFD0DFF7DA8FD15FFA87DFD0CFF7D27F8
%2727FD07FFF852A82752FD1AFF7DF8277DFFFFA8F827F8277DFD0BFF7D27
%52FD15FF52277DFD0BFF2727FF52277DFD06FF2752FFF87DFD1AFF52277E
%FFFFFFA82727FFA8FD0DFFA8FD17FFA8FD0CFFF852FFA852A8FF52F852A8
%FFF852A82752FF7D27277DFFA827525252FFA8272752FD05FF522727A8A8
%27F827A8FFFFA8F852FFFFFF7D2752277DFFA82752277DA8527DA8275227
%53FFFF522727A8FFA8272752FF845252597D52A87D2752277DFF7D275227
%7D2752FD04FF7DF87D2752FF4C52FFF87DA827527D27FF5227532727FF27
%527D277DFFFFFF7D27525227A8522752FFFFFFA827202727FF7D275252F8
%FF2727522752A8F87D7D27525227FF52277D2727FF27527D277DA8F8277D
%7DF8AF5227522727FF275252277DF852FD04FF2727FF52F8A82752A82752
%7DF87D52277D52F8FF2752A827527DF852FFFFFF7DF8FF5327A87DF8A8FF
%FFFFA8F8275252FF7DF8FF5227A82727FFF87DA82752A8F8A87D27A852F8
%7D27277D27527DF859842752FF5227A852F8A82727A82752FFF87D2752FF
%A87DA85227FF5227A82728FF217D7D27275228A85227AF5252A8F8275252
%7DFFFFFF5227A97DF8FF7D277DFFFFFFA82752FFFFFF7D27A87D27A82752
%A82752A9217D8427847DF8A85227275252A8F82752527DA821A8FF7D21A8
%5227A85227FF217DA8277DF827FF59F87D5227FF52F8A82752A827527DF8
%A8A8527D52F8FF2752A82752FF277DFFFFFF59F8FF5227A87DF8A8FFFFFF
%A8F852FFFFFF7DF8A85227A82727FFF852A82752A8F8A87D27A852F8FF52
%52A82752FF277D7D277DFF5227A852F8A82727A82752A8F87D7DF8522727
%FF7E2752F852FF2727FF277DA8272E52F8FF5227522752FF272752277DFF
%FFFF7D27522727FF52277DFFFFFFA8272727F87D7D27A87D27FF52275227
%52A8277D84277D7DF8FF7D27522727FF272752277DA827A8FF7D27A85227
%A82727FF272752277DFF7D2752A8FFA87D2752A8FF527DA8527DFF7D5227
%7DFFA8527D2752FFA8275252FD05FF525227A8FF8452A8FFFFFFA8525352
%527DA852A87D59FFA8277DF852A8527DA852A87D52A8FF522752A9FFA827
%5252FFA852A8FF7D52A87D52FF527DFF7D527DF87DFD17FF5252A82727FD
%21FF5252842752FD21FF277D7D277DFD17FFA8F827F8A8FD21FF7DF82727
%A8FD21FF7DF82727FF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 1665 C)
%%CMYKCustomColor: 0 0.6785 1 0 (PANTONE 1665 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2012-06-19T15:33:37-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>204</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADMAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qsnnhghead1jhjBaS&#xA;RyAqqOpJORlIRFnYMoQMjQFkvM/M35uOHe20CMcRsb6UVr7xxn9bfdnPavts3WL5/qH63qtD7PCh&#xA;LMf80fpP6vmwDUNf1vUWLXt9NPX9lnPAfJB8I+gZo8uoyZPqkS9Dh0mLH9EQPggOm4ylyU00zzT5&#xA;h0xg1nfzRqv+6yxeP6Uaq/hmTi1eXH9MiHEz6DDl+qIP3/N6P5U/Ne2vJEs9bRbWdqKl2m0THtzB&#xA;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&#xA;4Ev/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2012-06-19T15:33:37-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-06-19T15:33:37-07:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 1665 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 1665 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>67.843140</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:FB7F117407206811808384FED72371DC</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FB7F117407206811808384FED72371DC</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:FB7F117407206811808384FED72371DC</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811808384FED72371DC</stEvt:instanceID>
                  <stEvt:when>2012-06-19T15:33:37-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -434.271 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 434.271 li
344.375 434.271 li
344.375 0 li
cp
clp
110.346 193.406 mo
110.346 219.36 87.791 240.283 60.1191 240.283 cv
32.4482 240.283 9.89404 219.36 9.89404 193.406 cv
9.89209 46.8779 li
9.89209 20.9243 32.4463 0 60.1182 0 cv
87.7891 0 110.344 20.9243 110.344 46.877 cv
110.346 193.406 li
46.8521 194.383 mo
46.8521 201.273 52.7422 207.472 60.1191 207.472 cv
67.4961 207.472 73.3862 201.274 73.3862 194.383 cv
73.3843 45.8853 li
73.3843 38.9941 67.4941 32.7964 60.1182 32.7964 cv
52.7412 32.7964 46.8501 38.9941 46.8501 45.8853 cv
46.8521 194.383 li
cp
170.389 207.66 mo
177.762 207.66 183.653 201.491 183.653 194.63 cv
183.653 193.056 183.612 186.096 183.612 177.313 cv
183.612 169.174 181.233 161.923 178.262 158.233 cv
132.572 102.667 li
123.263 90.9243 120.207 75.6982 120.207 63.4263 cv
120.207 54.6431 120.165 48.6362 120.165 47.0942 cv
120.165 21.2764 142.715 .455078 170.39 .455078 cv
198.064 .455078 220.614 21.2764 220.614 47.0942 cv
220.614 74.1914 li
183.655 74.1914 li
183.655 46.1094 li
183.655 39.2471 177.764 33.0791 170.39 33.0791 cv
163.017 33.0791 157.123 39.2471 157.123 46.1094 cv
157.123 47.6821 157.165 54.6431 157.165 63.4263 cv
157.165 71.5645 159.542 78.8154 162.517 82.5063 cv
207.984 137.792 li
217.461 149.57 220.57 164.949 220.57 177.313 cv
220.57 186.096 220.612 192.102 220.612 193.646 cv
220.612 219.462 198.063 240.283 170.389 240.283 cv
142.714 240.283 120.163 219.462 120.163 193.646 cv
120.163 164.054 li
157.121 164.054 li
157.121 194.629 li
157.121 201.491 163.015 207.66 170.389 207.66 cv
280.661 240.283 mo
252.988 240.283 230.436 219.36 230.436 193.406 cv
230.433 6.45313 li
267.392 6.45313 li
267.393 194.383 li
267.393 201.273 273.283 207.472 280.661 207.472 cv
288.037 207.472 293.928 201.274 293.928 194.383 cv
293.925 6.45313 li
330.884 6.45313 li
330.885 193.406 li
330.885 219.36 308.333 240.283 280.661 240.283 cv
false sop
/0 
<<
/Name (PANTONE 1665 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 .678431 1 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
ef
17.6558 415.661 mo
11.8706 415.661 li
11.8706 416.039 11.9087 416.375 11.9087 416.711 cv
11.9087 420.072 11.002 421.752 9.14893 421.752 cv
6.1626 421.752 5.70898 418.435 5.70898 411.419 cv
5.70898 403.689 5.89795 399.95 9.07373 399.95 cv
10.9258 399.95 11.7959 401.463 11.7959 404.655 cv
11.7959 405.243 li
17.5049 405.243 li
17.5049 404.655 li
17.5049 398.48 14.6689 395.372 9.18701 395.372 cv
5.74658 395.372 3.21387 396.632 1.88965 398.858 cv
.302734 401.505 0 405.159 0 410.158 cv
0 417.302 .37793 421.794 3.09961 424.399 cv
4.30957 425.575 6.54102 426.457 9.22461 426.457 cv
14.6309 426.457 17.6938 423.099 17.6938 417.048 cv
17.6938 416.585 17.6938 416.124 17.6558 415.661 cv
true sop
0 0 0 1 nzopmsc
f
29.0005 404.403 mo
23.1025 404.403 21.0234 407.597 21.0234 414.989 cv
21.0234 423.182 22.6118 426.457 28.8877 426.457 cv
35.1636 426.457 36.7134 423.182 36.7134 414.989 cv
36.7134 407.681 34.6714 404.403 29.0005 404.403 cv
26.3926 415.241 mo
26.3926 410.2 26.7324 408.101 28.8496 408.101 cv
31.0425 408.101 31.3828 410.158 31.3828 415.241 cv
31.3828 420.534 30.9668 422.805 28.8877 422.805 cv
26.8076 422.805 26.3926 420.534 26.3926 415.241 cv
ef
40.4136 425.995 mo
45.6685 425.995 li
45.6685 395.75 li
40.4136 395.75 li
40.4136 425.995 li
cp
f
49.7505 425.995 mo
55.0059 425.995 li
55.0059 395.75 li
49.7505 395.75 li
49.7505 425.995 li
cp
f
64.1548 412.764 mo
64.1548 412.05 li
64.1548 409.234 64.9868 407.849 66.5747 407.849 cv
68.0488 407.849 68.9185 408.982 68.9185 410.997 cv
68.9185 412.764 li
64.1548 412.764 li
68.9937 418.183 mo
68.9937 418.561 li
68.9937 421.373 68.1245 422.804 66.5366 422.804 cv
64.8345 422.804 64.1548 421.373 64.1548 418.267 cv
64.1548 416.08 li
74.2866 416.08 li
74.2866 412.89 li
74.2866 407.177 71.7915 404.403 66.5747 404.403 cv
60.7896 404.403 58.7104 407.639 58.7104 414.989 cv
58.7104 423.182 60.2988 426.456 66.5747 426.456 cv
71.7534 426.456 74.2866 423.686 74.2866 418.183 cv
68.9937 418.183 li
cp
ef
87.1797 413.31 mo
87.1797 417.889 li
87.1797 421.122 86.4614 422.721 84.9497 422.721 cv
82.9453 422.721 82.7183 420.324 82.7183 415.661 cv
82.7183 415.157 li
82.7183 410.2 82.7563 407.933 84.8735 407.933 cv
86.8013 407.933 87.1797 409.612 87.1797 413.31 cv
92.3965 425.575 mo
92.3965 409.57 li
92.3965 408.311 92.4346 406.798 92.5483 404.907 cv
87.3687 404.907 li
87.1797 406.926 li
86.4233 405.328 84.9116 404.403 82.9834 404.403 cv
81.0176 404.403 79.3916 405.37 78.5596 407.01 cv
77.5386 408.982 77.4634 411.839 77.4634 415.787 cv
77.4634 422.972 78.7114 426.499 82.7563 426.499 cv
84.3823 426.499 85.8184 425.743 87.1035 424.189 cv
87.1035 426.583 li
87.1035 429.44 87.0664 430.826 85.0625 430.826 cv
83.5874 430.826 83.0215 430.154 82.9453 428.181 cv
77.8413 428.181 li
77.8413 428.433 li
77.8413 432.128 80.3364 434.271 84.9116 434.271 cv
90.7334 434.271 92.3965 431.75 92.3965 425.575 cv
ef
101.673 412.764 mo
101.673 412.05 li
101.673 409.234 102.505 407.849 104.093 407.849 cv
105.567 407.849 106.437 408.982 106.437 410.997 cv
106.437 412.764 li
101.673 412.764 li
106.513 418.183 mo
106.513 418.561 li
106.513 421.373 105.643 422.804 104.055 422.804 cv
102.354 422.804 101.673 421.373 101.673 418.267 cv
101.673 416.08 li
111.805 416.08 li
111.805 412.89 li
111.805 407.177 109.31 404.403 104.093 404.403 cv
98.3086 404.403 96.2285 407.639 96.2285 414.989 cv
96.2285 423.182 97.8169 426.456 104.093 426.456 cv
109.271 426.456 111.805 423.686 111.805 418.183 cv
106.513 418.183 li
cp
ef
132.647 404.403 mo
126.75 404.403 124.671 407.597 124.671 414.989 cv
124.671 423.182 126.258 426.457 132.534 426.457 cv
138.81 426.457 140.36 423.182 140.36 414.989 cv
140.36 407.681 138.319 404.403 132.647 404.403 cv
130.039 415.241 mo
130.039 410.2 130.379 408.101 132.497 408.101 cv
134.688 408.101 135.03 410.158 135.03 415.241 cv
135.03 420.534 134.614 422.805 132.534 422.805 cv
130.455 422.805 130.039 420.534 130.039 415.241 cv
ef
144.967 425.995 mo
150.223 425.995 li
150.223 408.395 li
153.587 408.395 li
153.587 404.907 li
150.223 404.907 li
150.223 402.641 li
150.223 400.329 150.639 399.53 152.718 399.53 cv
152.982 399.53 153.285 399.53 153.587 399.573 cv
153.587 395.414 li
152.642 395.33 151.848 395.288 151.13 395.288 cv
145.913 395.288 144.967 396.718 144.967 401.379 cv
144.967 404.907 li
142.283 404.907 li
142.283 408.395 li
144.967 408.395 li
144.967 425.995 li
f
166.176 425.995 mo
181.223 425.995 li
181.223 421.122 li
171.923 421.122 li
171.923 412.303 li
180.165 412.303 li
180.165 407.64 li
171.923 407.64 li
171.923 400.413 li
180.883 400.413 li
180.883 395.75 li
166.176 395.75 li
166.176 425.995 li
cp
f
190.286 425.995 mo
190.286 410.998 li
190.286 409.15 191.192 408.017 192.555 408.017 cv
194.027 408.017 194.332 409.234 194.332 411.587 cv
194.332 425.995 li
199.663 425.995 li
199.663 409.948 li
199.663 406.336 197.848 404.403 194.52 404.403 cv
192.63 404.403 191.154 405.328 190.286 407.094 cv
190.135 404.907 li
184.766 404.907 li
184.956 406.294 184.956 407.556 184.956 408.688 cv
184.956 425.995 li
190.286 425.995 li
f
213.147 413.31 mo
213.147 417.889 li
213.147 421.122 212.43 422.721 210.918 422.721 cv
208.915 422.721 208.687 420.324 208.687 415.661 cv
208.687 415.157 li
208.687 410.2 208.724 407.933 210.843 407.933 cv
212.77 407.933 213.147 409.612 213.147 413.31 cv
218.365 425.575 mo
218.365 409.57 li
218.365 408.311 218.402 406.798 218.516 404.907 cv
213.338 404.907 li
213.147 406.926 li
212.392 405.328 210.881 404.403 208.952 404.403 cv
206.984 404.403 205.359 405.37 204.527 407.01 cv
203.508 408.982 203.431 411.839 203.431 415.787 cv
203.431 422.972 204.679 426.499 208.724 426.499 cv
210.35 426.499 211.788 425.743 213.071 424.189 cv
213.071 426.583 li
213.071 429.44 213.035 430.826 211.03 430.826 cv
209.556 430.826 208.988 430.154 208.915 428.181 cv
203.81 428.181 li
203.81 428.433 li
203.81 432.128 206.305 434.271 210.881 434.271 cv
216.703 434.271 218.365 431.75 218.365 425.575 cv
ef
222.538 425.995 mo
227.869 425.995 li
227.869 404.907 li
222.538 404.907 li
222.538 425.995 li
cp
222.538 400.749 mo
227.869 400.749 li
227.869 395.75 li
222.538 395.75 li
222.538 400.749 li
cp
ef
237.357 425.995 mo
237.357 410.998 li
237.357 409.15 238.265 408.017 239.627 408.017 cv
241.1 408.017 241.402 409.234 241.402 411.587 cv
241.402 425.995 li
246.733 425.995 li
246.733 409.948 li
246.733 406.336 244.92 404.403 241.592 404.403 cv
239.703 404.403 238.227 405.328 237.357 407.094 cv
237.207 404.907 li
231.838 404.907 li
232.026 406.294 232.026 407.556 232.026 408.688 cv
232.026 425.995 li
237.357 425.995 li
f
255.946 412.764 mo
255.946 412.05 li
255.946 409.234 256.778 407.849 258.367 407.849 cv
259.842 407.849 260.711 408.982 260.711 410.997 cv
260.711 412.764 li
255.946 412.764 li
260.787 418.183 mo
260.787 418.561 li
260.787 421.373 259.918 422.804 258.33 422.804 cv
256.628 422.804 255.946 421.373 255.946 418.267 cv
255.946 416.08 li
266.08 416.08 li
266.08 412.89 li
266.08 407.177 263.585 404.403 258.367 404.403 cv
252.583 404.403 250.504 407.639 250.504 414.989 cv
250.504 423.182 252.092 426.456 258.367 426.456 cv
263.547 426.456 266.08 423.686 266.08 418.183 cv
260.787 418.183 li
cp
ef
274.701 412.764 mo
274.701 412.05 li
274.701 409.234 275.533 407.849 277.121 407.849 cv
278.595 407.849 279.465 408.982 279.465 410.997 cv
279.465 412.764 li
274.701 412.764 li
279.54 418.183 mo
279.54 418.561 li
279.54 421.373 278.671 422.804 277.083 422.804 cv
275.381 422.804 274.701 421.373 274.701 418.267 cv
274.701 416.08 li
284.833 416.08 li
284.833 412.89 li
284.833 407.177 282.338 404.403 277.121 404.403 cv
271.336 404.403 269.257 407.639 269.257 414.989 cv
269.257 423.182 270.845 426.456 277.121 426.456 cv
282.3 426.456 284.833 423.686 284.833 418.183 cv
279.54 418.183 li
cp
ef
288.501 425.995 mo
293.832 425.995 li
293.832 414.653 li
293.832 411.082 294.929 409.528 297.989 409.528 cv
298.48 409.528 li
298.48 404.403 li
298.142 404.403 li
295.798 404.403 294.172 405.58 293.492 407.64 cv
293.149 404.865 li
288.501 404.865 li
288.501 425.995 li
f
301.324 425.995 mo
306.655 425.995 li
306.655 404.907 li
301.324 404.907 li
301.324 425.995 li
cp
301.324 400.749 mo
306.655 400.749 li
306.655 395.75 li
301.324 395.75 li
301.324 400.749 li
cp
ef
316.145 425.995 mo
316.145 410.998 li
316.145 409.15 317.052 408.017 318.414 408.017 cv
319.887 408.017 320.189 409.234 320.189 411.587 cv
320.189 425.995 li
325.521 425.995 li
325.521 409.948 li
325.521 406.336 323.707 404.403 320.379 404.403 cv
318.488 404.403 317.014 405.328 316.145 407.094 cv
315.994 404.907 li
310.625 404.907 li
310.813 406.294 310.813 407.556 310.813 408.688 cv
310.813 425.995 li
316.145 425.995 li
f
339.007 413.31 mo
339.007 417.889 li
339.007 421.122 338.288 422.721 336.775 422.721 cv
334.772 422.721 334.546 420.324 334.546 415.661 cv
334.546 415.157 li
334.546 410.2 334.584 407.933 336.699 407.933 cv
338.629 407.933 339.007 409.612 339.007 413.31 cv
344.224 425.575 mo
344.224 409.57 li
344.224 408.311 344.262 406.798 344.375 404.907 cv
339.195 404.907 li
339.007 406.926 li
338.251 405.328 336.737 404.403 334.81 404.403 cv
332.844 404.403 331.219 405.37 330.387 407.01 cv
329.365 408.982 329.29 411.839 329.29 415.787 cv
329.29 422.972 330.538 426.499 334.584 426.499 cv
336.209 426.499 337.646 425.743 338.931 424.189 cv
338.931 426.583 li
338.931 429.44 338.893 430.826 336.89 430.826 cv
335.415 430.826 334.848 430.154 334.772 428.181 cv
329.669 428.181 li
329.669 428.433 li
329.669 432.128 332.164 434.271 336.737 434.271 cv
342.561 434.271 344.224 431.75 344.224 425.575 cv
ef
174.531 367.66 mo
148.438 367.66 99.291 365.946 99.291 365.946 cv
98.3872 365.905 98.3862 365.066 99.29 365.024 cv
99.29 365.024 147.957 363.311 174.531 363.311 cv
201.111 363.311 244.373 365.024 244.373 365.024 cv
245.263 365.071 245.279 365.899 244.373 365.946 cv
244.373 365.946 200.631 367.66 174.531 367.66 cv
false sop
1 /0 /CSD get_res sepcs
1 sep
f
19.5308 271.322 mo
19.5308 288.85 li
19.4741 291.543 19.8325 293.718 20.6069 295.372 cv
21.3843 297.025 22.9175 297.876 25.2124 297.923 cv
27.0698 297.876 28.4019 297.352 29.2095 296.35 cv
30.0151 295.347 30.5063 294.151 30.6821 292.76 cv
30.8569 291.369 30.9272 290.065 30.8921 288.85 cv
30.8921 271.322 li
30.9272 270.124 30.8589 268.933 30.687 267.751 cv
30.5151 266.569 30.0366 265.582 29.2476 264.79 cv
28.4604 263.999 27.1577 263.586 25.3423 263.556 cv
23.4409 263.614 22.0776 264.139 21.2524 265.126 cv
20.4272 266.114 19.9253 267.213 19.7456 268.423 cv
19.5659 269.633 19.4946 270.599 19.5308 271.322 cv
cp
8.82178 286.581 mo
8.82178 273.042 li
8.78857 270.444 9.06787 267.955 9.6626 265.575 cv
10.2573 263.193 11.3696 261.031 13.0005 259.088 cv
14.5337 257.354 16.3481 256.113 18.4448 255.368 cv
20.5405 254.621 22.7319 254.259 25.0151 254.276 cv
27.4839 254.252 29.7964 254.609 31.9526 255.351 cv
34.1108 256.09 35.9995 257.359 37.6177 259.156 cv
38.9634 260.622 39.9946 262.588 40.7114 265.051 cv
41.4292 267.514 41.7905 270.75 41.7974 274.76 cv
41.7974 286.993 li
41.814 290.504 41.5034 293.468 40.8667 295.886 cv
40.23 298.305 39.1694 300.358 37.6831 302.047 cv
36.3276 303.537 34.8589 304.643 33.2769 305.363 cv
31.6938 306.085 30.1626 306.555 28.6821 306.771 cv
27.2007 306.988 25.9351 307.087 24.8843 307.064 cv
23.2671 307.095 21.4683 306.835 19.4897 306.285 cv
17.5112 305.735 15.6587 304.712 13.9341 303.215 cv
12.2095 301.719 10.9194 299.564 10.062 296.755 cv
9.5542 294.904 9.21631 293.036 9.05029 291.151 cv
8.88428 289.269 8.80811 287.745 8.82178 286.581 cv
cp
221.709 268.455 mo
220.928 266.979 219.842 265.723 218.457 264.686 cv
216.969 263.573 215.248 262.995 213.314 262.947 cv
211.494 262.999 210.111 263.384 209.242 264.159 cv
208.414 264.896 207.881 265.683 207.674 266.524 cv
207.488 267.282 207.389 267.828 207.432 268.122 cv
207.502 269.94 208.176 271.339 209.473 272.302 cv
210.717 273.229 212.117 273.949 213.68 274.471 cv
219.748 276.806 li
221.205 277.353 222.67 278.122 224.143 279.113 cv
225.604 280.1 226.824 281.277 227.793 282.63 cv
228.133 283.029 228.645 283.987 229.318 285.536 cv
229.971 287.036 230.34 288.97 230.414 291.341 cv
230.455 292.13 230.371 293.282 230.164 294.797 cv
229.961 296.293 229.387 297.912 228.436 299.658 cv
227.498 301.375 225.943 302.968 223.748 304.437 cv
222.311 305.31 220.76 305.943 219.08 306.344 cv
217.389 306.747 215.922 306.943 214.686 306.938 cv
210.564 307.018 207.145 306.329 204.424 304.89 cv
201.764 303.483 199.398 300.884 197.342 297.051 cv
205.035 291.675 li
205.928 293.715 207.131 295.33 208.645 296.51 cv
210.238 297.755 212.102 298.385 214.225 298.406 cv
215.061 298.422 215.982 298.263 216.988 297.938 cv
218.021 297.603 218.92 296.999 219.68 296.135 cv
220.467 295.242 220.861 293.996 220.898 292.437 cv
220.92 291.168 220.654 290.11 220.076 289.29 cv
219.502 288.478 218.523 287.738 217.17 287.062 cv
215.832 286.39 213.969 285.575 211.586 284.618 cv
209.152 283.676 206.924 282.575 204.904 281.317 cv
202.906 280.072 201.303 278.446 200.096 276.437 cv
198.898 274.444 198.273 271.833 198.242 268.579 cv
198.273 264.407 199.619 261.062 202.264 258.508 cv
204.902 255.959 208.66 254.629 213.578 254.555 cv
217.043 254.555 220.039 255.3 222.582 256.784 cv
225.066 258.235 227.252 260.397 229.141 263.283 cv
221.709 268.455 li
cp
318.754 338.294 mo
318.754 330.783 li
313.281 319.491 li
317.484 319.491 li
320.734 326.514 li
323.984 319.491 li
328.162 319.491 li
322.713 330.783 li
322.713 338.294 li
318.754 338.294 li
cp
297.945 338.294 mo
297.945 323.118 li
293.424 323.118 li
293.424 319.491 li
306.424 319.491 li
306.424 323.118 li
301.904 323.118 li
301.904 338.294 li
297.945 338.294 li
cp
278.686 338.294 mo
278.686 336.52 li
278.686 336.52 li
278.686 321.138 li
278.686 321.138 li
278.686 319.491 li
282.645 319.491 li
282.645 321.138 li
282.645 321.138 li
282.645 336.52 li
282.645 336.52 li
282.645 338.294 li
278.686 338.294 li
cp
256.582 334.977 mo
259.66 332.688 li
260.164 333.571 260.691 334.227 261.24 334.651 cv
261.789 335.076 262.42 335.288 263.131 335.285 cv
263.824 335.272 264.369 335.085 264.768 334.719 cv
265.168 334.354 265.371 333.882 265.379 333.305 cv
265.391 332.288 264.732 331.491 263.4 330.912 cv
260.951 329.852 li
260.201 329.517 259.543 329.124 258.977 328.675 cv
257.727 327.628 257.1 326.222 257.096 324.455 cv
257.113 322.776 257.633 321.453 258.652 320.484 cv
259.674 319.517 261.084 319.022 262.887 319.002 cv
265.494 319.015 267.439 320.121 268.727 322.32 cv
265.893 324.455 li
264.951 323.045 263.877 322.342 262.668 322.347 cv
262.049 322.355 261.566 322.518 261.219 322.832 cv
260.871 323.146 260.693 323.559 260.688 324.069 cv
260.688 324.541 260.865 324.963 261.223 325.333 cv
261.578 325.705 262.117 326.056 262.838 326.385 cv
265.35 327.488 li
266.111 327.825 266.766 328.212 267.311 328.648 cv
268.535 329.686 269.164 331.135 269.191 332.996 cv
269.168 334.733 268.605 336.126 267.506 337.172 cv
266.406 338.219 264.914 338.756 263.033 338.783 cv
260.223 338.774 258.072 337.506 256.582 334.977 cv
cp
214.598 338.294 mo
214.598 319.491 li
226.645 319.491 li
226.645 323.118 li
218.557 323.118 li
218.557 326.488 li
224.08 326.488 li
224.08 330.114 li
218.557 330.114 li
218.557 334.668 li
227.158 334.668 li
227.158 338.294 li
214.598 338.294 li
cp
200.594 338.294 mo
196.416 338.294 li
190.941 319.491 li
194.9 319.491 li
198.518 332.635 li
202.109 319.491 li
206.068 319.491 li
200.594 338.294 li
cp
235.59 319.473 mo
240.086 319.473 li
241.281 319.462 242.336 319.505 243.248 319.602 cv
244.16 319.699 244.939 319.922 245.584 320.271 cv
246.395 320.727 247.01 321.358 247.436 322.168 cv
247.861 322.977 248.074 323.931 248.078 325.029 cv
248.074 326.297 247.793 327.363 247.236 328.231 cv
246.682 329.101 245.869 329.73 244.803 330.122 cv
248.713 338.276 li
244.338 338.276 li
240.869 330.611 li
239.549 330.611 li
239.549 338.276 li
235.59 338.276 li
235.59 319.473 li
cp
239.549 322.663 mo
239.549 327.602 li
240.648 327.602 li
241.84 327.631 242.719 327.482 243.281 327.158 cv
243.844 326.834 244.123 326.158 244.119 325.132 cv
244.123 324.106 243.844 323.431 243.281 323.106 cv
242.719 322.782 241.84 322.635 240.648 322.663 cv
239.549 322.663 li
cp
177.914 338.294 mo
177.914 336.52 li
177.914 336.52 li
177.914 321.138 li
177.914 321.138 li
177.914 319.491 li
181.873 319.491 li
181.873 321.138 li
181.873 321.138 li
181.873 336.52 li
181.873 336.52 li
181.873 338.294 li
177.914 338.294 li
cp
154.168 338.294 mo
154.168 319.491 li
157.98 319.491 li
163.699 330.912 li
163.625 319.491 li
167.072 319.491 li
167.072 338.294 li
163.821 338.294 li
157.541 325.587 li
157.614 338.294 li
154.168 338.294 li
cp
134.865 319.491 mo
134.865 331.246 li
134.839 332.602 134.99 333.589 135.317 334.211 cv
135.645 334.833 136.309 335.139 137.309 335.131 cv
138.32 335.138 138.986 334.828 139.31 334.201 cv
139.632 333.575 139.781 332.59 139.752 331.246 cv
139.752 319.491 li
143.711 319.491 li
143.711 332.198 li
143.716 334.407 143.193 336.054 142.141 337.137 cv
141.089 338.221 139.479 338.761 137.309 338.758 cv
133.012 338.771 130.878 336.584 130.906 332.198 cv
130.906 319.491 li
134.865 319.491 li
cp
272.738 287.834 mo
269.928 288.24 267.773 289.109 266.277 290.44 cv
264.781 291.772 264.025 293.349 264.012 295.168 cv
264.037 296.499 264.402 297.555 265.111 298.339 cv
265.818 299.123 266.719 299.523 267.811 299.542 cv
269.326 299.539 270.523 298.905 271.398 297.642 cv
272.273 296.376 272.721 294.497 272.738 292.006 cv
272.738 287.834 li
cp
274.072 301.964 mo
272.459 303.576 270.854 304.776 269.258 305.563 cv
267.662 306.353 265.957 306.745 264.145 306.742 cv
261.381 306.7 259.199 305.792 257.6 304.017 cv
256.002 302.243 255.186 299.854 255.152 296.85 cv
255.152 288.832 261.014 284.01 272.738 282.383 cv
272.738 279.558 li
272.729 278.492 272.316 277.627 271.506 276.958 cv
270.697 276.289 269.553 275.943 268.076 275.923 cv
265.477 275.958 262.746 277.168 259.881 279.558 cv
255.551 273.972 li
259.238 270.843 263.59 269.295 268.609 269.329 cv
277.469 269.362 281.932 273.468 281.998 281.643 cv
281.998 297.052 li
282.021 298.229 282.576 298.971 283.664 299.272 cv
283.664 306.271 li
283.119 306.326 282.609 306.35 282.133 306.339 cv
278.379 306.36 275.693 304.903 274.072 301.964 cv
cp
316.186 284.67 mo
324.846 284.67 li
324.846 281.574 li
324.836 277.593 323.391 275.598 320.516 275.587 cv
319.199 275.591 318.152 276.085 317.377 277.067 cv
316.602 278.047 316.203 279.483 316.186 281.373 cv
316.186 284.67 li
cp
332.84 304.386 mo
328.865 306.079 325.09 306.933 321.516 306.943 cv
316.969 306.925 313.504 305.667 311.123 303.166 cv
308.74 300.667 307.541 297.036 307.525 292.274 cv
307.525 283.795 li
307.543 279.071 308.641 275.482 310.814 273.028 cv
312.988 270.575 316.135 269.343 320.25 269.328 cv
324.119 269.366 327.141 270.518 329.318 272.786 cv
331.496 275.052 332.602 278.206 332.641 282.248 cv
332.641 289.985 li
316.186 289.985 li
316.186 293.081 li
316.197 295.149 316.807 296.75 318.01 297.885 cv
319.213 299.018 320.936 299.593 323.182 299.608 cv
325.557 299.608 328.398 298.801 331.709 297.187 cv
332.84 304.386 li
cp
298.793 291.438 mo
298.738 294.163 299.084 296.098 299.826 297.241 cv
300.572 298.385 302.047 298.94 304.256 298.907 cv
305.523 298.84 li
305.523 306.78 li
304.102 306.893 302.814 306.938 301.658 306.914 cv
297.16 306.96 294 306.045 292.174 304.172 cv
290.35 302.3 289.469 299.198 289.533 294.87 cv
289.533 277.172 li
284.338 277.172 li
284.338 270.376 li
289.533 270.376 li
289.533 257.522 li
298.793 257.522 li
298.793 270.376 li
305.256 270.376 li
305.256 277.172 li
298.793 277.172 li
298.793 291.438 li
cp
46.9585 306.234 mo
46.9585 270.454 li
54.9331 270.454 li
55.5444 274.997 li
56.8354 271.411 59.6206 269.577 63.8999 269.493 cv
64.5122 269.493 li
64.5122 278.214 li
63.6284 278.214 li
60.9097 278.197 58.9761 278.892 57.8296 280.297 cv
56.6802 281.7 56.1235 283.913 56.1558 286.935 cv
56.1558 306.234 li
46.9585 306.234 li
cp
134.628 291.305 mo
134.627 293.034 134.695 294.345 134.824 295.521 cv
134.876 296.008 134.968 296.454 135.085 296.87 cv
135.322 297.565 li
135.753 298.663 136.349 299.347 137.106 299.621 cv
138 299.9 li
138.415 300.006 138.748 300.047 139 300.023 cv
139.682 300.022 140.048 299.978 140.383 299.897 cv
141.156 299.732 141.75 299.389 142.164 298.868 cv
142.401 298.569 142.603 298.195 142.77 297.745 cv
143.093 296.999 143.294 296.131 143.375 295.143 cv
143.488 293.741 143.537 292.293 143.488 290.799 cv
143.488 287.571 li
143.5 286.772 143.506 286.003 143.488 285.267 cv
143.515 283.503 143.454 281.929 143.302 280.545 cv
143.149 279.16 142.744 278.065 142.083 277.263 cv
141.421 276.46 140.341 276.05 138.841 276.033 cv
137.429 276.066 136.422 276.539 135.822 277.452 cv
135.221 278.366 134.863 279.521 134.75 280.922 cv
134.687 281.704 134.64 282.5 134.628 283.311 cv
134.611 283.715 134.617 284.11 134.628 284.493 cv
134.628 291.305 li
cp
125.919 287.357 mo
125.886 285.629 125.953 283.741 126.119 281.693 cv
126.285 279.646 126.75 277.686 127.513 275.813 cv
128.279 273.941 129.541 272.403 131.302 271.2 cv
133.062 269.996 135.521 269.374 138.677 269.333 cv
139.931 269.306 141.25 269.397 142.634 269.61 cv
144.019 269.822 145.361 270.32 146.662 271.104 cv
147.962 271.886 149.113 273.118 150.116 274.801 cv
150.917 276.227 151.467 278.017 151.765 280.168 cv
152.064 282.319 152.206 284.986 152.189 288.168 cv
152.256 291.792 152.091 294.788 151.695 297.155 cv
151.298 299.522 150.269 301.59 148.607 303.357 cv
148.102 304 147.181 304.706 145.841 305.477 cv
144.504 306.245 142.388 306.664 139.495 306.733 cv
138.429 306.755 137.167 306.679 135.708 306.506 cv
134.25 306.332 132.957 305.936 131.828 305.315 cv
129.994 304.192 128.654 302.785 127.809 301.095 cv
126.965 299.405 126.431 297.418 126.208 295.134 cv
125.986 292.852 125.888 290.259 125.919 287.357 cv
cp
156.291 306.234 mo
156.291 270.454 li
164.798 270.454 li
164.798 277.069 li
166.011 275.08 167.35 273.372 169.011 271.948 cv
170.673 270.523 172.65 269.777 174.943 269.712 cv
177.813 269.789 179.869 270.482 181.115 271.789 cv
182.359 273.098 183.117 274.556 183.389 276.162 cv
183.66 277.771 183.768 279.063 183.713 280.04 cv
183.713 306.234 li
174.484 306.234 li
174.484 282.876 li
174.504 282.37 174.473 281.739 174.387 280.986 cv
174.303 280.231 174.049 279.557 173.621 278.96 cv
173.197 278.364 172.48 278.05 171.474 278.016 cv
170.191 278.047 169.093 278.422 168.177 279.138 cv
167.263 279.854 166.376 280.718 165.519 281.728 cv
165.519 306.234 li
156.291 306.234 li
cp
112.554 294.748 mo
112.554 281.392 li
112.429 280.136 112.212 279.121 111.9 278.33 cv
111.341 276.916 110.217 276.214 108.529 276.226 cv
106.704 276.211 105.582 277.146 105.166 279.033 cv
104.75 280.918 104.58 283.839 104.656 287.793 cv
104.656 288.599 li
104.598 292.336 104.817 295.153 105.31 297.049 cv
105.804 298.944 106.921 299.896 108.665 299.899 cv
110.876 299.908 112.173 298.234 112.554 294.748 cv
cp
95.1714 314.351 mo
100.943 310.79 li
101.385 311.468 102.042 312.182 102.917 312.929 cv
103.79 313.676 105.011 314.08 106.582 314.144 cv
107.408 314.164 108.373 313.951 109.474 313.502 cv
110.576 313.054 111.423 312.239 112.02 311.063 cv
112.429 310.015 112.609 308.622 112.552 306.889 cv
112.554 303.31 li
110.255 305.996 107.634 307.087 104.724 307.075 cv
101.148 307.08 98.6538 305.569 97.2437 302.546 cv
95.8325 299.521 95.1558 294.955 95.2134 288.848 cv
95.1802 285.496 95.2798 282.587 95.5112 280.118 cv
95.7417 277.651 96.2983 275.58 97.1831 273.909 cv
97.9487 272.504 99.0181 271.418 100.393 270.647 cv
101.769 269.878 103.349 269.487 105.132 269.476 cv
106.877 269.485 108.832 270.18 109.767 270.657 cv
110.454 271.006 111.822 271.849 112.554 273.12 cv
112.554 270.335 li
121.578 270.335 li
121.578 302.264 li
121.617 304.041 121.535 305.954 121.332 308.003 cv
121.129 310.052 120.927 312 120.044 313.85 cv
119.162 315.699 117.71 317.214 115.691 318.394 cv
113.669 319.572 110.854 320.183 107.244 320.222 cv
104.605 320.19 102.447 319.847 100.769 319.19 cv
99.0913 318.534 97.8062 317.757 96.9175 316.854 cv
96.0269 315.953 95.4458 315.118 95.1714 314.351 cv
cp
245.535 291.438 mo
245.48 294.163 245.826 296.098 246.568 297.241 cv
247.313 298.385 248.789 298.94 251 298.907 cv
252.266 298.84 li
252.266 306.78 li
250.844 306.893 249.555 306.938 248.4 306.914 cv
243.902 306.96 240.74 306.045 238.916 304.172 cv
237.092 302.3 236.211 299.198 236.275 294.87 cv
236.275 277.172 li
231.08 277.172 li
231.08 270.376 li
236.275 270.376 li
236.275 257.522 li
245.535 257.522 li
245.535 270.376 li
251.998 270.376 li
251.998 277.172 li
245.535 277.172 li
245.535 291.438 li
cp
75.0142 284.67 mo
83.6733 284.67 li
83.6733 281.574 li
83.6636 277.593 82.2202 275.598 79.3452 275.587 cv
78.0269 275.591 76.98 276.085 76.2046 277.067 cv
75.4292 278.047 75.0327 279.483 75.0142 281.373 cv
75.0142 284.67 li
cp
91.6685 304.386 mo
87.6929 306.079 83.9194 306.933 80.3433 306.943 cv
75.7964 306.925 72.3325 305.667 69.9507 303.166 cv
67.5698 300.667 66.3696 297.036 66.353 292.274 cv
66.353 283.795 li
66.3716 279.071 67.4683 275.482 69.6431 273.028 cv
71.8179 270.575 74.9624 269.343 79.0776 269.328 cv
82.9458 269.366 85.9683 270.518 88.146 272.786 cv
90.3237 275.052 91.4312 278.206 91.4683 282.248 cv
91.4683 289.985 li
75.0142 289.985 li
75.0142 293.081 li
75.0269 295.149 75.6343 296.75 76.8374 297.885 cv
78.0415 299.018 79.7642 299.593 82.0093 299.608 cv
84.3843 299.608 87.228 298.801 90.5366 297.187 cv
91.6685 304.386 li
cp
0 0 0 1 cmyk
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Heather Miller) ()
%%Title: (coe_v_spot.eps)
%%CreationDate: 6/19/12 3:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&q-GO4dkH)cJ9q82`<ghl\t'_0LZPn5'buu[!WqfQg#!n7g.t_'::f\H@DD^<NpF.gdci#WWB$q'R4Pdr>-Eq:Ha3P,Q+3j[
%EAaAL)gO62;mf^_\^NO?pUodeo9u)$MYXWNca(^Tp<1c`^"#@3[U8=5?E)asGC(k1@^Ge!)+t`gZ]EX+ZX.Km^M<_WWh^@\<40d+
%:S[`3o^h`\n#jTMVM<(d,C06^=*q-S`5uXCc9L`G6-39ChhM4uj,2?)l)3-OJ+7DT-\\>ej.f4Oc/l8$dQCJ[*FA2-Q/M&>P0W/`
%6W`:tI.;JNL'J:*rhXL.lgKg>^K^"_g9(6t2X51lo2Y+*p.45"R!@Is&=qFf3mCjC:@P24flT-T><2U55-p].-]2asDCG%VA]41c
%K0BrNY5d%Ns(<X,;PLZ^hlTp.RL@sN=l]M^hGhBh'`+:_3W3[C],.S=+3$f?A^P]4gTU8s.jFF`S$dGEK0jOpIa\Ye[I/CT&#@Tj
%rZLh`EKg+so6=+/]8e\?dLM:!p""EcP)OP:aJo54%P_X!HJI#P\<\Aa)`^5h]LS7eVTiQpfE?+S%s)dnP]5Dp]Jj"ECh3@^m;Cra
%:e+iMS+IL7I+jha>Pp]+,ll`hf3<(@5aA05M9;(Ti>M%@qu[54<GMTC<5jZoRMe%m/4H4c<k6eb6*[9(SF+i+)__3HYP2Kt"b(P6
%J*1kIgTp<mWPhGP*WPCc51Oe'WpB:+:+1TBQc!";*.H)mYZ<B3[;rfmQ+(I1=N@_ONWhZB[Uil!bJIHX$%HHe;@.-(9)*"tKMP2d
%XAc7\dqUb,_mc[HHsWr'GNakIGj0HdO7Xm8ae.mF/;_-H(;ba>Ynk3p+f3Kr,5dFC&0h%3E-"_"G7c2"NSb9kr/E:*4OKH,,5dF>
%j'O?+R'9AD:"hh_6FcMDeu;]TN6`#pSDooFO^\WHdl/`:FS'\AFDS=.*''W9?A&5b/VFXa@nUnJ.Fdu-SMC&#[1GMc_\=Wn?%``<
%j#;XOc9M<*,KCGpNO9<]r(Ugd;@1;mm2p]91k6h6oY]jNNfRWiCJh`a]MQ]6k],[*>dRkl17p4'KE#="KT8tX6AKJXW9I66%tA(@
%9&Bmr`<gr/Iq'LP/sbR_c$>(RNqP`;S's'h'i&U*E_7dF(-#[j3MgtuUSCqhrDL;eaSCd6f]^tm(@Rg&:>_tqkmndpj\/:kFNu=Q
%BF@i26g7Zk4+/KBjP24EMrRCU5,E-lpO`D6D*^OZe&<kZ/;neh&TLM(gB&=AXF.[n?eR,\;cOS'K7Bk"<8!>0d3mp,rB\DV5N4?p
%M']K2=sEsoT7!5Z(Ot\1C!uIIann!L:SC%GLqiS[=JXin?htF/QHQX'r1uWC$N2UVdN?I-U%02d%Y)rQV;M)-qA8)=N09=*Q5.>P
%[A9-GphW4iKoufCXAY`q<Y>([P#g"g`KH,YiLa/fR47G*G\33tb:FDls'$cW>0rq.<`2MG7\9Z.g@aAAe5?Wa$jH4JobX4^aXGec
%TP(5.4KZCtQ(bA=rKm.Dl4TPkBUN45J.lpR1rV/cCW)D2LQ!(jUj9@6hC[`Ch&):5QMt[$7ATE&JQ1`u$@CMKM0MDa91G(7mN?EY
%e0*'Dk3:M9(-VXp\9WoJ/UY#NO75'AQP3K_24QXK[fC=_`/G+62>BE0D7<eYF?%4njP?m>_pX$p@3"Oi]Y`DM*H_p1HN-F8Q)YO*
%hK0P2(HI_?Hgn"&2k&@Q-&oQS<iZC8(i2c_CTR8^(Y6H9bT\n'L\66Ckh:Y^1j`9'IPg:ZZS6DH8S%0VD8grCl*We<XA93Vr*qbG
%'$ao*!m;[8oNa,<C==LMJHqLN*'cOmP"^$<Sl2/@&hPX&&P>lG:b(ZAU5;8KK@D<Bn:$BW03N[emM]'Qd&1bacJB%tjZ,QI5q(9h
%H.6o4W3P>PWJ""PV--ge=e`,0nc>:9=i,O2*dKe;]o:ML*'/"eTJVT_hH(nJ[SHf_E%Z3jN,pYD&ifWNkKG:Bi<qDU_AchPSD+^K
%R\6I'A"2JH84?m":Lnm6BN%^+biH=jpAh<uZG^cI03Pr+0.Q*@1ADoWoYg%bOnB?qh,#p("H1^#`X'#$AjZ.WNR7`BEuFEk>;U]^
%hUY)[^HG-$K=H)%]u;]8E#\6.19Q8+3c^(XjZptSkh>U4p'Q8S`,,g,BELD&Nq8RmD[Tfs;%V]/p0>ZS2uV1&5'/I"&S<OS.G..:
%&'Ac>RI$6Wn812Ia8k"]0>9:Mhk"a&PTWOQ.(,n\"6B.u[Ys#9\Yn4(`:b>)SCij2U%A($(>D0ILWXI.[NkjN(A1*f>f?a6E&KcA
%4&g+p8SoDa9<p_9Q:G*NZ,(Fo_lRg,aXl*T+d1O%Ju>u1&lp$h`b&>2,_(5Z#Dt<E^QZSWoKbM'n0D<5ZUFgWPULc-&9F_Qh7_\M
%kg=E^Z&L.E<MoBH-)t1P$&\J_H0HF)#EDXE0aC]K[!Vb!")i(#8kpA@O(VmB[AjH$D4ou&.OF%jQ^i.oM8aj9bI[oilVWpU@i"_(
%d3PHZ(@E+E74h%L0%hW$>&]/39D1A'E2_%(r-[tB*N`;R-(ujp3Ia,+7'TSkD+3UM'_6]TK`BQ=Y)F!75[#FOO!"r^(2_C7nt]h/
%P:1e2T$3ZC8L=dZ$'g>m,#n.*6QK8YrMrhY7L;6AbX"rl&pK.B;gQVUkK&F?M^7<I(GT?#<,&Hg5BJ`m-n$r</f"[<T"mA:cZ4F2
%Ip=IL`n)LVW&D>hh@[&%jeA6q,07`dLg#*"7#^!IIoRtar?GC,>g*/*;R,4/d3NJMrMrh9^eu/6CKsO3Ro5BN/:"^U^ZZO7/ZG\3
%PtU":291oa^[aT4'oB'XWM-:5>#OSjs"13@r=M7&g,?JDJ!*Sa[&(ig/@%Yh*hBYR0G(@K<_T#8GkoKWW>JVRqS]n"1dl97:S0Ud
%kGIi)3Tu]ZEb*OR3PS[-Q)p\.s('*dras><b?I0A=/"\TVW"AH)t#,'[(q=m[T;H$1cfYAMK_H>^%HTbb*,2)\om4E'[93hcA8<$
%IsXW3,[,>m2`\AnZJY$OG6G\82m-ftbF!nHQ4I;nA9@Y4Lk'h?/KM2V&@6J[VHSVS4/dBHB$"W-BPU>*<"-dUB?ZOR/atpIC6NL[
%N$+0m8f_KNM0n]#%:kjVVZ3W_VAClP^)>N5\))dW%k#8+.O+^N</19I^/tp=o!lQfRqRIk=R28GDqek2TPjf&-J!ApD0nDjP`>!\
%_>=GL.#?3TfZ3)>AHgKU!8VGagOAN+I+OkSr=/j7?V]gEJcB3?Si3[h/2V8P/Fp4$X<6:ESa!g(_6S7gH.UC_h!5agV:[AE8Q8$]
%@c*$/5=Y##_<CPWXGaPbjF+XU0N\^3hB@m+e#6G8'Umt9ru"/@G,PPn_A+N7B1+LpSG7&,OmU0YP_q6hnCX%f&*NpbEF*3l;1ADY
%"RS:c$i?Gd$g)s7mRD8`&&p_Ve0rJB163=%5c4$VA])9Bs/T-]=rjt'/RULONBDJZirQd2`>-+1Lc:Y7AT!TPlB$E-XI&j.`5qs!
%eihX(VQ[?6^`%^ODc`-Phdhbjrm;5E^MI7Q^b,`X^Z;KuQ,qA0@8`E2;qsHMI<f$b9\Bn_br[E>Q3[n_-,qa4G)Q5<N#qRrfA9KD
%+_$amOL#!AhNfpr=]/i1p5I,HhDBf5neeo,@if(oeJE\ZhF2>8En]bL;Yc56>%E!rqSbn7?X:SD8MBd4G-\H?5%FSuRV2)'Y4nS`
%6_cQ39'36ZXq5=sJG#H8q"!OJ<].9Irm-q3AR32//Pf$F9^8D.`&EnnO0@M$N$dX:ZmL9T[%UkHEiG@[qXC82bsY_]*5\;2aB=(R
%Tk\0srYG4$<QJ:q'AW3*>-.4;88BOI)f:Yc;L-%P/=&+%g1&XMB/%=TI?2:&oc0__BkrM:JD9.(:n2)'Y4C\+=b(spm4/+SIu"9X
%1g(4$(!JdB4]mpAa6R,;pag4>-_(K@7c's9j5Z"CBtjh8_b]0eDioO8s)Z*sCH4%[7R139o)rB[qg=fuj)5ntKit!]/7UZb1VD`Y
%))L_)9@pof:/MG/=l'o\MW:?]n8IkRUf=n^!qR;74g3PsUW2gIgiSir$TLeLWWdNdB\;4"TL4*rIc>Dm=sl")APSq$_i`k5m$m]F
%0]a3pgp@9\>RHJUS.XshA[A&XE>D6.F]sFAVbMdX:=>J$qA-GS6\r+c3E._HMmWG_K*)D1fN8\tS4BephCa4OkF'aNj^dWqE;Xb5
%PB!_03$^0;E)FhU>2t\N#WZhX4DrUmE\ube^JUN5hk:`S\W4md.6Y#l.@A1d=e3_VI"tY&Qkqg,7Z$/`;[^R5c$'lF6oNI+rhaa;
%";^NE1+su>bXhVe4]8>tk<_^/hEPk2cF7$;H?"gS3p%V^AIG%<*!)n[JjnR[k!F:9Kdl-cAW)Md.TuMBUS&1NZ@V[DnA2%AEUKD)
%4piXAZ9ljH,o4J1QjLVcI-+[]j5qH'-&`o?)k8hmr)A8`*.%`s3.<bq&g\9mJr=>YeCGC57n@8bk;%2%>*@6-RC=\\!]F552)"=D
%k!1#m(/_tG^7\u0>XG6OcJK0oJWH*h1XTZ_cE/[\"eBWAatlcaCS".%Thc58S;+S]`&b>3EmBHb1]/3T1!r=q8pQ-6=d2dHp#();
%WJ/kF]VaB1?BThr/H<5&7,OkDX1I.;G^bulL!7$!/BQK%nC_AQhBR%@QV>[CdUt27:^0uLf*M1I3Jb[Z$:MmSX+3N;0Y->Mb:HMC
%eu,g-]Nl-IaBPDpL;(^mKXX4K*q>ZMTIgh6;Uu,^neH]X@R$kl$3JL!D#e'G\.+OBbRKn$C5#5T_KEdl-1s6>d%;qMKioU!1NH+i
%B*>tH\@J3Wl@]g$FM8<%33NLL>E<57.@"k/b[hI=-Bqp45p8\kJb-=S<0:?DmIRdu4*Fn-b%Hph[5A$7-/:\`g9X@@bhlggB-X)?
%Z!^IH!7)>h+!3.iPZ!mnOg])Q'KQS]28N!h?=:#ndZSH=iFf8D_p@]c`qpL]G:n$VB3@+m%FFpZD+tsqQTW;D:f*s#4t?\PJiD-b
%2jNM8G`]o_7Z]ZBC(^'VnL)6!9$:D+gL")F3ep\Tr<P\NP^3J66D>)ec$U^^7e4F:i'$X,[#DN`m!"T[=J/A%+#/\FP=#4=pe1NX
%b9HsdqEHg^A.`17^S.ou/F$*ujXST/-8A6iCR(j]C6?gXnQPITmdXAFl<,Bjg*6@C[(WIQ\gdrdC@aOY\$1NVVQsBI@Tnp(U_]rI
%UaPgj\Xglb#gP<V_o2-t891d]4BH,t'Y,S_l=Olo-;Q&?g*Jbq)>G4V-I40+=ucI7M+?YQM$%]]SQR74[S_O,;5tJ<6oA54E=M(&
%eu7rn)OO0?=bBRX&hQt[6KK`r%WL`cPI^=]j"Lr-`DW_%>N;?T<"sF[27_3m8fUV1Xsk27dDDRu-M;q\;M3[)>WPM[AJP9L;^GQ+
%p'gUeW5h5/i3UH#i]V9WJ7sFo3aCP2=q!_rQATd]$F]DZr(UUr[IG\oS&=Nu,,eL3D*BT(KF[,;,TSV;+FuO&c)?l$E-(l[qm&nJ
%@Z09,Ng@,nk<W5EPQj+-$I$4ORtJ-XV'`<AW7"cS+"<74YW"-pDKu`Ra:4KZHlUX*7UHAs_D.Ma`<i(9B4'.9@Cf;fR++mm,Nlcu
%Zb)$1bpC&M[\u,T-2HJ80tgAVZG\j2Xi"U2N]C\GZ"K!(k+4/@%7`&F`UW%Q>F^k%jG-j+(%SeI`suq_5caB\3%#!7T`1<0#pa43
%aXc?;dufR>prM]9d8;o.'7Fk9Ku8phF8X*(U2TW_)un-!5-@>b5?;/M2j]%gDeH$RV`gcEP&4m>%!d5[8hQ(@EGD0c>'e3bVj,=%
%0eRP3;_A)"O7=r&)*fK1V-U*P0N(;3(giU!]/9+a-eMHT53MndeUhfJc=4*-HGsC*kbh>U$]e3OnH6F!]'X,,SNaAEP:(#9r_J:j
%77P!U*jq\bUP/r+`K&"QoC8XP"-9n&m@V[Al`D1#'jfY@p%V+\rt-nBl`JdqI%6JLYAsCCPTD[\Wme7qXjNOICTh+6[Z4S!iU0M1
%,C\Ke2snUf"np%*UX8Cl'!1uFV&-)thZH"=hqWOWend8$]=#pSj2J&$O6:[^o[seHS\5SVHhHEHA9YkIs-NCu=b#\F]8chhIuPO7
%s+)iM$9?QiIbq3?!&q`<]1uldNE9F*n-U+:S5^FM<:;k\s/GZu4q8LWh-.9bO2-4pB!#8R-m2mmhZu4@qs1fKD"PFEC8I)W>.<C6
%C"CW0me,mQiN8C2DsctZ7)5V*de^$$Cj2[@g*O/XC]&CYgPLI6HFMLWM#bBQK3&!Zd\@'g2/B<tf@BWsBse-HegVhX=\tm7mVe*9
%.hM%":SV85m+D=&i(9g9Z]A:f:6=<3W03T^G(\I<&H/nR?X=5.qA+L27rJ&#DUs0>b^QVkT,.58?\tUs@>\eac2RZh4EFL!WlLH8
%RBsn7#NhCR;<#VNKq3Sd$(jt&r!^gJ(dE@GM-p2j?hWEq+"6t]>ZKd=n_8C:rX-VGV_L:`oBJ3!TdX-)`A>jor$<QjOMpo\JNTnh
%lbG2b'IV3]^[k3?9YK)o.B"UIZ&hmaU$07rJYQ9)]p#0R3'N(*:k&J_ORYI64/jpV*30Ep6oc!Oq0uL$1up.YBq10J+5TUaON.e0
%%V1+I)D?oc>5)t3^!Q/tkf4Ab&0Qcc4\H9HbWb)>NIT0Op;_IL)Z'`WGLhNM]`\'V+'1c.FPE?Q[pC:bb`bpNT%Sg[Le!,Jm:Sj!
%n%_Q-WZ$BKUMf_XGbApO)(cXK])sO4[b<C,m@Sk*ST=Ri#KZV>2%YSHf"Pn4:KjRbU0abRVaX`Hpm60192"go.sgS>d^2Qk`A=Fb
%)SF_%]tVd5>SMAAKqEfUITciIMeZl9$mkmBc\D\'!['<=Xa7Wes"EhG1Gk<g##cNI+o^9"F^O/^Gd_Kp",Q:9Q9BD`HI7$B<bm39
%)/_:10jqguY6-hap$t%`fQ`DMCf!G'ptYcbK\D<-5YuWtSZeY4iGVmGQNb^N^GRn*XhR?lf<-"FVM)h5\cNd-Vjk8'eNPCmf(uGu
%41!>03XGGT>OU+STPDb\Jr.lOHYtYZIE!V%X2BRbp1rKJAV$<LqpfN!j(4UfDWCPjcf[p[k'st!$+)A9HMM52?b7<RSE0HDr71hZ
%__@LID=ntMWc`Zh6K0u)r`-;fL6VF[lErlWg'l+R0)].<S`^1hPA16]!#!-24<eGEa,jPQ6:<jaN3.9HDoa\]9i)&8r8FmMRM2.h
%0qhYNToV%6N>h$(."i['PQ*QrqT<0-=WORBb>aGY]o]8rr`r+hcdC]DYD-?h>,!-#U6=P$c5/1#s$]<Nrr\V]hZ!,]=<%:`CsZrU
%?N+l0`HZ5(o4r_$2q#YDgJV*3%!%n4#Vc9m]_4Ra!5pAd]0I7FOk0)<-r_;]`qr7?fk8q7GN#h\!=FDDmjK;QcF4],)X[\'JaqO`
%K/%=AJ*YQ6B;.XKps/m@`D7c9=o5,o;C<8BrTfmoo[CQ<KWf^:p'QQ$\Dsg5*60lHQ:7K"WNnUA+U=$6RZ1)?V2_q?J)fA]4)bn/
%2H<W@d"p_I/d[1_s$`5^im5#EXnCZc.Zn*&n=WAMYBm[1Thj62lLqI]gA(K$Mqas['RnGE]Dt2:8.p0PK:uh\2.![0-P;bq>e%7X
%<oIKm"$hY7hM3,b,Cq>D2l9am`uE&`rQ\2'j;eOg"+r\6[GHCPe`rsdiPA2JFI/21;eu%FnQN7r@joHfp/n,E'"kd?&S4Dm^O:H,
%"0.re&s2FVe6H0K9;14lB48:GdqnTK?U>,#*'@f\`]r;gjE4LAmaV+&mQp`HejS<fUgUH'?,0OT]3CS:b)alrXN"TB,Co0Xh0lE?
%%LsnY3GS:/O#`OK^oS8Qb\suWPQ5rN=1kaV5B`0_.aM\fjD:JU53ls7dRJto7E16L9OPhDD*dd`7Z4KS]13X.g^HPs/g3TJ(djn;
%%&jZb4_@RKF$%r8fH.5;-:`f][#!6>8;.5C69A$4_j_9;&kiE^U5UrjRK0^KG=S,.kg'PN#4;_iOtf@=+UgYs=p!4tj=!Kh&UHS2
%Vu<.RJ7.SmJ>bPDDkJ#39Wcui8fMuVDB5[V=3#b-hkgV>Vu%b]&s"`(hIiVT%(#RD4H,VM':4$>6,^AODBb"?,EM3!T5g\c0''g`
%N;9eNaIIpV"q]3Uf35;"h]IlFYOiXDc;8qO5"iqGf:QJ.!<$^2/p6mbpuH<Vrg+DU'f=D([bi"J!0iU,<,]KurVbuh&dCg#"&a;h
%<%e[0iejYco:OG1G1,bQ0:4BpJ:lI-.AD)T##efGE8BS4"pt-Ls.eHDY=ZS,Bt]0"o_K6L"rL10J6mjWrOL>UWo;%S`kW_247?OK
%BkXdNg4"BA;feR3chUTh[tD8mHVoR)nXj,.'PJ)n#1"f')`<C9oVtG#7lf*"<Xbu$dVX1pWcY(3!!-)HBb9GuT7T*M_ouEZUBVpG
%*WRckC=V3W@[T7Yesg&U7BYG/J:#Pe>H=BFD$jG)2*tKEdsZ#dL5''ChTp8(ND0)$[0`:p)0tRS&L?k<=^3Y/Y'#A:gf2[uW<G-`
%Z3dPHAG([c(blg=.eb55%'(npmO9MF<([KI,S#ME2ncibJ?J[sm!;22Da_#0A;Mk1c>s(&>TfM'1LM$kqm'WI:lfK5E#EMqWX_PF
%=3/+_KDPc$*Q_!K"@tA<d#u,-g;=@^+a(luZT;ePlUrS.of'8MV!)3NTn7%C2u7n5+`I#L9a4h"o,@E6@Qr>S6FD-u(b<>K4\g1T
%T'E*"jn5"b!8GX(,u@B(KkgHaC>^^=#9/!_.2s^5@.(\%#]7!qT>GfBF9o23FR61=1<71XXV8lTMB[_(.`>9<4OA@`0"YZt2_,34
%]]BO$*9?dWGV@n)FM%FAr[Ye$Jgs%NSW@sgs$UOW;h2>H``g'B>-f:$A+-8CI/,k*57gH3=sn?_+2NC!)bo)BnWIclLNqpsdM_jC
%e4+h"G13n?s,<<!#EQ"CD:HBP$LSfOjeB?8Q>D7_o_fN_>S,]([!G"b3)U[J3#:"N1iakL5l(-=I=K#IFqUEMkW-]q-P[pD.Y?R4
%Os:.%NP<tjNV?I*`3:W9r'uL]Dpj7)5N*=NW*@(\!MKZ8kV`A;GJ)]7o<fO3J7(2Dd/6?ajLE\%0(=a]f.BKXZ6I#.deIaoGuF+F
%eSY%cNj_gjICi^17B.^3a_CN-.,[^)3l(4lAmO=fA94==-"g"1)Dl83oW8CIEU_e8e[&:n0VEbnql>/OU;##hedLp0`]tA-m(7FY
%pr24>NPIM!r[aAOEk)<?)hkWHm]Ms0f9%Jce]!O7;gr`Xni<IU((V2t2a@."IaX1_?Rr_di0XD!4BU,mchk]PS$i4*1OZi@/&*Ob
%)tm3IEW%`gOdOaEee?5p\^OY9Z+0>7QC'nJYnB\O%=%O;Q;0"1XILT&%^4$3A`Z`e1@*O@dX=#NRf?sk[,)r7Y5E!M*^=N*78l-d
%2n?,][H4<$49&Md?H#iSkHS?N-+hump#j1ik@edLhs,'G4);U[eb4uB=m=f!.-6r`om(\nYl:@L'_3j,M`rp:BRhfE>dnJoQ7a8&
%'?fODR94i.T-7/\Q;nPjO0@6TI,hQ$R-th1#hlp"R^$slT8G=a])i"C_qLOS,63TI#tVbJrENKpgR'J&.]"paF'IChhKaXTgJ-dP
%p:AJa39YLsX1c^E?.7S11<(2#Wk]:\RCptWI\frhbNl6%0QAZ+Xa=DYfLkH7k0N&,G%+KG"R4ELT:WIg3dp5K5CT-53p!T5gZqYg
%mtHe]g$(llk/=IPSa#9Xk/P$^[DZp#qXXIcHLZ[]fD=:B9'LNFX4,&<(Lt^fe(jTfjipZReLC2Y\i$X/P\Mpsm+LW&ooD,^dT95W
%3`W1u00?n=c>(@AKlEjnXN'q6ZG#)-p4fsNIA)qOT5dVcp;!3DIBB_K:Zge1Vkb+eX*XLqo0GD@P'jDlBD&][?bSY=:?MjRaga;+
%l&0-A:-1OaZ)"F)d:r#>=e59PoVMFmW`S&J*`WuQ^N2VpU=34BFPE;Q'WZ\RmVHViou=UBA,^do[<ZcQg$)JDQAm1rh9*(8s/YA4
%Bl5u"27&c9SR+N1eb8gLkS.Ee]%rr\T09-&>^1G'rQDkGKlhJuO_/Z<\biHhQtC(sQL)k5/bQ@&K`P;"*ks\4ju`!+%sF$%=f9lp
%.2SfUCcZth3X$Fc@D+*>#@G7:hOX(0rKmiA0;`B[a3FI@Dl9l$Iep[_j://0];V5?I/eG8]!"=<<3)JpcVDf1)nVhCQksDEB8=%h
%-biF"b,+Z:H$=S=4FR5*\?P8K.7fiLL\75lXI#p_A&ke%6fn(5B$mO*b2VkAZWeWE`fb4ADjJZjHoq9_Fad0Zl1?U+gt/,5]fH<8
%Rl\,oI'+`UQ95cWn8S'agM+:6R<nVnoMBh5*0a$m87QOD]hkW0qS.3e3ph*OQD[l`chb;4Bbmh)MG?78:%btaVeBA;-!%TAH:bqj
%QNfK6?;Gu6<3E[&e+KkJe#]p[QWU/Xeq0sOjP0(O)sK2Fe;DlCY#@TU.[?d`D<u@i:_Xs&F%oTu]?si^r(5@42cGtfd4*/t9J?8t
%pU\GAP!63Mg38FkqVo)3FGl]%#!:'UVq/%qG+d<tKWERT<]p@(S`7;`r(=S/rR5)VI*tbK0+JJ^WZ6!UkG(c$S$MX-;NdYerNCm_
%dX$("[5G8`1Rl`u^H14i)tUj%)qhg[dk23L@Dh7WYq@MA`teGu5V:lp.gK:i7\1(spmY">i,mH;HWj5U?MAO%Be8N=]VHMoI[be)
%=-Va3h,D(dO31ViZgW2iCm`s'jm7"KiUcb[=ukJ$9_gir.Mms1[.i%WKED)BPK:)nK9Bt>\\(J7e#,r1_l%k(jnnVGhpV\hpP`,1
%(`RjOV#8M<8q(]N-o]WNHbZJ.Pl%MN"kQ\(Z+IYhs6"7@kNt?(H+6u,rLRmUO1@d(kNQIm?qE$<B76B';QBDc*VqmHSlUcU%opBB
%BBoK"WBFUI]sQ=b:T`UIp?TA;rF^W2qe>btFhYH<^[]4/eiQIIc0l76.KuD;C<+0>]g<pVZaE)k\g=!"D^O%o]g(@LNVPYt0PfD>
%0>H]EMefA#Vpa&Bo"ljIpctQjFAf=*MoBl.Le=k1ohJD*bpmr1,*S<FkDVsJDKf#RDIrZcV<[kgrgGg5jdXCr)Tn:ZWL/,`Q&;".
%7<n4$_d7[^2K:Q7m8*"m>+[%jptcg0G:kr$>9Pp]LLt<3I)r?1ipM>9I9X%+f',k<rHTGDE2iubcH:u2=Eg[M\b2.tmd(o83qPUZ
%b<*st/0rg[D=:5ZlRW!1VlHp<=/V_1lu&*RH1@4sVdL>`2\'VPSN[4!]"Mo?o`"1Cm'Pu`gKRhIfq%Dg:<ag>lJl9;GIlUPTQ_k3
%GA<Ym`0-kLma%)cp?e)@Rnos?9nMPIkM<+WI7q3u\Q];j^GOhCM=9BW.=)K-U/QT]d;@^S;tK5)Q%,]FO8,G.Q:-Yld1=f8"1(&%
%ZGa=%T,=-&"P6!I_eQ>DC=0OQLfSHnK[rM)6#?OQS23Lm@,:)Ypuuk/,t@j@diu'sW,U^_'caub/mYDKp9.[Y0?g;$&Yb<0:JZm#
%CuSD$`GM-h[W-P*bF`XnJdK'Hb9iG6(Ja.3V_?%N34?k+7aJ>3.e3N32Hd7uqr.amc6h5Jg/V8mq5tPT<5'rbQ2BDrNPdH#V'0bV
%P3gfK@@L_]gAG1q$OD7a9+D*IGV<YmlK'9f1Ah09gf/HL#A%!,):DDoM>guZ<2IC'n6RQlIj-#+r*o.-TA1*oPD"IIkfNo3m9ccs
%$fj$l?t1:5c/7OlH:_rBe0B!f4t0@^P<A..@B>MV\@OXFZM]PfFii0u*?b_5GAgsJ^?u,&QCoa#ao7O$]W"i]&MP;cGLZM?q(OR`
%bW2_](Z*iXKHnYhHID0]d<!"NEHGSU&'`.X_otRR_:Y'BY_VQV4nH"5.fHmJHE$?p*]=RkmGo)$*=9<'i3%*El/G<<E-lXPFaQ;:
%gJmnX,(LG%\q"jP[QGQ=)Z<Z#8^D9rk1;ZN38QjpMC&5NOaq246KLr.%i(qtqtqHC:s=!h>dQk?KKTOqS'JM;B3hsW9OfbRjiet]
%oB<BS!LA'3,/\*7VI\uLGW,9No52^\.7kaGq+g;cnD1GE*<Bb*Y&i7n0V0bKTQUG"o'p?&Cq[_4>:+VJb<b5n<P/8[P!p^g7c8\A
%'S!C(die?,D#erY)<baKWL+ks,+aKFZ:3Z5.;u'TXUgN6^V$X%0tS-0c7(K^#H$S2liudc@*p370nAPhkGO\0D+:GB-t[\X,uk7Q
%3YbTSq0h("CGU#n&Zd?g?)V';X,&;W&VdC[k>^r4ckD1#BuM$,c[/Ks2<SW#3JTF3TI\"B78P%Ucd/"E_dY[Fk*K^7`2">]r_SX*
%*\SkhQr<r_^[u8ubfe@m3>G0]\0PcKd+I+.pXR29(1Pl)"6A3/l=OKBF%N`I0ubDA4:]itpi\[#>4Lmo<sZ@=@pp<TC$?W)qi4V&
%#8so*$@2qYB6F@<Qu$/Wg'Ri,kL>0pEX12mp4mXPkC$t5I4(?1B3+a;`kkK\gD:7<c=8nU(r7:0?a2<'1d-/2/Rfj--pn<)!hf_4
%e[MSLD/>a;Z99'r/32o5Y'bSsW;]7>5hgR0L1El>GtB:&9aHQgZV1QL_V$W75J&$AC6e!'3.`%Y)s4ld8dlq.r#"M@Y060NH@2E=
%EX\p3*E<)!GMN\3h!S\U!0R2/G,#Fq@/0SVF'e>:/41XFbYiE/XO4I&^QWCk;rta);#F7_!.;Hj:"YcZ@\#\H3I![@GMg-Q&5*Lg
%X?[Qq65F8=j2lqp)Nr&[aDs%\RV=J]Mgt+S=kq%h$]Qe'1FlC&;'I9:Z%T<o!'bBU,V/7Z*$dA+"q&3K!T>2)eAs0*gmDN5Y<@=*
%o)-iNZriOmLH]3r/)u:A..?Uj0:2(2!HRL*.0^_2V/o>ZhN(U07umJfq?7Ip*A.QU'<g)1`G>B#H.k@.i&%8h=&/TE;d/(k81%T_
%kBdmFNTn8>kj/fp1UABdPGgAmeDMIBgCj3YKDS%G10kb3gl,VIGP7SBE&<$s]NCdJLX$2PGP9kX04HbAVXp'[$)cXD!/`(T.G[QW
%`eX[]U9XXtI5c`X!496M*=dqn*;36P5.3"Oa/S8hoFU`5X]Z072[;KAcUgd7n>QP%WNU9.-*Hj!.U8O(\3;''[=.TlXX-E`G6.4`
%Cs7pK#4bE?GUkTdb^>O`1,=hMDCciAD*I&r`I!Rt]UabM7cV$+:>/j@#ZQrr1KHT\&OmFlT_V,gkqSE9a19suBmtNXV7\i2H\FaV
%(hh.TGE&\AE*SDlT4i"f^8QFMeY9-4`>f(qO@03&,s1RYBMc,M_2Ol'Q&uVNip'uhM2(U'B&ui)I#paKVE?+Bh%;C.$5,0RPXP,O
%PV=_lO3RR3&AKn"hB1POi(IRRm6m'[_6&gtafA:W8,-aQ^.ph;ipF^-:.58I/WU3B$sF9Q98E9m,A\&am"-]Hc78&L/@[W]6!9G/
%LpH3D"HR_Sf:F3jAlk<caDtQHnj4rc(+s--;8qm5eD1XA@`IR/mH[NO2]]`!-F;jieDr,g6JM#fm<r2Yl:S[ZEOS3[<c!OPE906i
%SZ!Kg@\*qNh:QDGC7u$38FINHhX*b@2QTUn7.=nW]P?Hr?2^@JI=LFpCVdI!,ATY[/C;-*dY0k>=DVeAqd,jmFXfHZ/QS?%S;7r5
%G/i,t,Qm%FllAK)2#`%eGqWEI40#JB%+^+R&k8Eq*aTcike`T!m^74R_j/`5?A-WO^_.(:[a4pNONg^5)htO->"SP%UBHi:%u0^\
%I04+j6q__Xc;,>tR_+!g7<gmJWXpFkSJ]NRcX\SA=;C#i15_@][<a<JHrklmC]EdDIRB8H_@a6cB.knc9e0OU0>#_sCZe*MGd=N:
%FrdBEjIL'/a#s'u\`#2JICKC,6SXoP%eE^nL\O>92b[XYfmn>cC@qcM$R+Nn&JD3j4Z,<[M;d<D-rKOmM6fWfb_OlDHX<1[75$Dj
%KPl_o6h1`q]:"T%M^nuWZc*.j(K5bS,\K"?,[50Hpg^p]=aM\q^]%34f$)]4omGeq68Ib6aiWVj/I#h68Jsm*jj;,=W!5'AjAQ-"
%ae9*fTG-"1j5nWZSU+hn8NV^Jb+T3gTTc\ca2t"_cCbQd(*"fZ/i\JYc5%BILFtQ=cC$7DH4F5""s)6'j6+bmB@%eJ:EkQH3.m7.
%10b<[F$jt5g7'*!i2^d)G+F*eeoucj7>UTQTY`U)+1?f]F1R:&m#L.f]G^FOm'M5L0d=:YF$o=@pKusm/NZ<n,N+FAQ+=5;#'ZLr
%>cs_F]YOJj?>FohNJ6c;nq#,X1D1jP/i%hBaOM+uIgf'cV*g-)q%smX$5c[]BdXF\1cL)hH)P-Ee!SNM)#SA<GUj'm/0\m7WJn/A
%-X01G\?Y'o!8?89$T-182ke?2_eoYJnFnZjD<QfG+@,%11bU:/fe*&$&79,XM"0++16NT.PT2PJ/'8X/NG#B\1*K2e3$e)MR`p*/
%I_m9SOcrIS;ial9'B,?glB0+'PeoCZi!a+W>!Sn8&LR#SS2g\,B^%-0_^*umQATa-`u(dirgHR(8rJo=B(j-dM';Hb*e&jd3!m[d
%F')b?H$g!?d)nR1XmVY]j#3`$p:tSOm=@Jc[3Nj<o>gFs_Y1c8cf=WP+YMrj&!=oqMI;/N"5+:FhcNF$:"4.p+8O?7c$X1I6Ve"*
%VD8,$M\.WYP(#2,`q46hEs@*XnWJol:*f]c,^Ul$/\C&'q$q!F$"f6a0,G`_HlBeG$$5eGGH7Fcq0g<,g%3i$)o:4nDhd>&#hrK=
%i63&'DpAjMKVO*XT&O`HMUQp[BA*kD@>T"g1F-,-3s-uX!H+9CY+6rP3dEq(*Kf@iI^/FI/@bfSk$tqE5_]Z>J\@gRpF9i,J#_:H
%B>ra%hYUV-QZB0tG,,WpKBaF+Cb[SGI3Ao;+]??F,Kd]PBOlJVc`SqA$W`<Wicr7;A9RY"LEpR"cgGc2SUep=k:-t'JD78d8-7b<
%EK23q-\?XSC8cq^^lWM*`+8'\-mE/nfbJ@#_aS*@?BR,D]A@a%A2#<DS;<,sZ*1jG,;T,>8nuAhO-:k`7(6TCpkXm4^]1]#G!lO"
%1K+4a4//XH7?#:jSYnm(d)M'd?kSprb"*Nr,-r(/+qom#TB@;YM3OOJD&C4:;!Buk]-K-aA!uL^L#eps17%Z_2b4@@PIU06A.j<=
%K7Q0eqW:416L&6;F2R^jc<7nF]obRLO%Q#]+7lAVrJ4Yo_U?JDlU$8@_9fj+E$60YOB35EIl*7,8`jMJfIb5M&ICOJ+]'O4qsgk*
%Wuf@'3VPQaPkbuF['M91nR:L+32\FL1ZBaP%l`qPA'sl+_J!a@q/GsO4a0BNnEgAA_aWIV3_hl/A1("fEKe\'$U#)D,5H0Y]:la6
%3IuQ;q'I<s2OmT-*8L_ccA7s35+GCakCiHcJpfAgAY&53p&m/:;8ItQ-',\d&t2^nfp36D6pbD;"F)$XI2681b0pc\G!]M/_OMaN
%%."BDIYF,qj)gk[8)k>>+mk5Z@o$9:9IT-tBp!#+*RDH4!.4*aO0mpb%.T;\2]Gfc9#1e/qt_M@iUp<._Xb4ugK`C1.FGUOc[EDc
%-X;]-DG?`"Ngrl0DiL*r[PeOgBU=oC%@FL9G.('In!179,TD&EZ-/!.iME_1oKQ'nGFS9e^lcE@VkG[HT%42:%I>R]ZCr:RT8_:R
%e>_m;`_d?CH]f8G^F,G3qKjt8WH[55a@K=/Q7%iX$LLM4,8JrN59gnIR7'LoB!6n1"7=gokF93i$kdMmC8=Qnc5Ugi5RasW@s@:L
%(6pRO1>LMDHG!/7A1\R.7un>)W,?tW=jW@'KbI_5P2ZD&<4J(hb+V_lr6HLSA1AST&J:0I3Hckl3CEH_=I2GJc^oKtJr*U6Ot_]X
%puL3Q&Ukq:I92lXr47q)*r/&YMQq*G"e_Oka>g?:VgULU%<Lo#A2nsV_)E;RPLq'1i<5^sMkW=$<1[IRCNsm+CIkUl^7>r]m=Gi)
%K.7<',!">oUHeQXo[N,!5-abMk6s"45DUWU!qF=L_Z$R(==TsB`XB`2n,i.O`56dCLS%>GAgt!ts-QeA=.ac8N7QaUnrS.8aa%/3
%c,GkD8k62A8OeiIm)V9Sc-<WWb>XtRDQ2fednd^e4(J7B.,!urfsan#WO>U#\S73Bje#uU&<uOIaSL+<QYP9Gl@\j$q<+<N-11jf
%;>[bD.Wt$f/e5(Rp<BhbIOo=6?Kh0\J6`C+]=f_t:7_.Lh=(,OfHia<Qd:,OecIng<`T:jj*T[Qp?a\V2k@SM6gmoLL>>gOGLeXP
%aKE^^Hh*#+ir-MZWcpR2GOF_gX#Y=8Sqta&pZM'F5):.d(5Ab.+60F1D_Iql$8j5T*5:NX^k+_;rGlh@G=PV&9'r>H=ESun:Ynq^
%s*LiU4HF7Nh/h\Mg(Sd&bM_BH=0->QS)g),qJko0T@?SU?;hXp$?n6a2,6'*M"KPi_f$N7m->%hb059f>^-s#LeHfVi=!Ep/aTd*
%..DMQV)E?$C6X'7U*;b]-ALa^U:_K`GEMA?a#s;RTX-eqM.P.]\JIWQ@3T72H2.K4;7Nm:l+D'$_U!uT2OhuB-5]BN3h+DFQO`h&
%ZIs>+PS9O22P"d9HD9)7?5lIj3?]YO2I4rV`Q;Z>H*,P?YJ#s[:$8$FRS2hY1,<T&SbLk(UpK=`F%.LE9c*>iX"gsFUlG+l/tM1*
%kZHM[?HO\Y#SKlVS'Ge?dVAH.ZK]#Bkr`k-))Ic-C]<ZV+X`RMkLC8NiLO@7SQ@G78']2CflWuuCq+;m&<'=3S'EONDFf^TaJSRO
%V=Vg6)C(`sbOTc<<f`kIk9Y);pEiQXS'GfWK_UfGc),P?0H9/fNgNQ(2:&ue,9pjMaYUl%<W_p:LtQn,I\e\Y7a.`nOC=WArg@#d
%B%)#+,b76^B9_DK`cM4&qYj**+F,>7%Q,tm'#aP^rp17&cuE7LW/4<Dd_]^(9]Edt&F3dlpXO,*gfETL>suS/kfpOKOckNps1NBF
%amd\K!7)Vp]8:\Sg=1QG.pL>jp-H12Kj@"13M_5^*B9uGll9_1gr#(!@05q_M_8Fc4X,<oqTLo^U-5tU1q<G(*<buE/^&Feh2"(,
%,$sWF+"!^R*q>]2=HnX3f[no@fL=F]G7bMQ-?+;)=P)?M=e*2Bh*k+<o"!n#aGAi3fA(X@'\sS]%@O7RGg5'[8`3nkh2SYl"8%1e
%(]1/o>jY<@c_@a1RFA`e?<2N7S]e>]]GJKB#oT1&kI(&'aM$.ak@7k]ZgYO#f=b*/oR].(9cR$:d`C6d+ktbGD'D@&j<IO-mgWK]
%"d&Q0TVII6GRd.iqdMpppL%YuEai+cmW9;E&KDB)@Q,"+q'WKfMWFbt9k/_B-l\j(A3Nar.>5(f0N^JM5@Q^lW'&t.?.dFn*&u:P
%\?Oq[_@\Cp-]Rqo/K!FNG'@E_T6b5pZ1^sVF=eqfin'fKUappXm(:(Sh9ae@,[i%a/mhSL[0S7;]C.UjBaLlK_&_$lo[)@N>;Dt,
%r^m8S7n1Zq\X;FeL)6&c_=5=,a=nh,?ab`qhu,>Q(WS6X6n<i#3eqE^r)3Z14/:V4mI4JeSU`:Z_sLG-#4Y5p(h879Cp-,_KJJTV
%L(PX!,M[8$R9t5"2B,7_:%$m'YT*#)=l\Q!E$o3\HJWX#AEJlt%<j&QPW*\JOj?aIj0GBEL:b7mq'4sU7(_D1k22OfZ$)o^m\6:f
%^4#`=G%)8Zd]?2tS7iKtYu[FdoGcnu#GWZtW`-gkP4"h8=HAPj&XrO:ZeNM\kDHV[.@M!akDHW&?=GL#L$6\L'5N(&SdW#]\oO29
%p4:IGOfllkD&@I8e)9@,bhou;<a_M=/an&D!n_J5,c3)tdc@IJ][N7"P16*%K6Q[p^8R&R2"hMi]:dnqpZ>(]ln\]E7S%"",/3qb
%r6!&tYQO@f.t)Nf8h(jcQSHuDF@?pP:k<=S_]"9UFM65T$^=EGlo*'`H^,(3GMeWDClW9[mD$tBL]Z0gn,XD8iuCcNJ?ar:p\<MW
%$a>2meIcVb;E>mcCIYrcn*2Y(/YIQ.8`W@PM-]i]6OGld,BAgFi80I[@EYuA2?O2tDHH/M`0)ZCDpQ#7m(RQ=[?XjA8ag(k?]!k;
%V=aq+`h'bE(WP)T7qu5:V^B$M;l!se4`"'NMWLB>[l-,0Rh+-LGtRr]iB],4g:R7-\OCKKS&aoBG*^cT;!-XWe`jiYErY!Vc?q^E
%<VIPAr&T9!9hgNlHfe2q9S1f_Rb!u-W;G\oR6)AF1LE&9Y'da).1+>7.nrA"]&qbH;RM`6T2'IV1T+U6K3+tU,f1I]E&^kb)?-1E
%00NV;Fui]#jZc/ob+49R%dN[ocF;8?mp[O#eS-R+F8r]:Qd6\Y>.8bNj:e#=q9mOR=-S"A5@6!F_YDX)9n,B,Y)YkRb^M7W@qlWT
%AF9dWUJpN88::q8<N88hIhcNF\d7%;W@.,=*ctVXa<^t#oX1^E's"Pj6NJ"M3G`$*>KifO.dBLI_1aLEo#&+?K?rS7C?_$iiEVG5
%=X$A!DTe`?TST/#_0?l1CK3o+g4HMT2-a1Nh[WB43PCR=BujR`^3b2<^<f%-;7#]+mLJ<EkZN*Q]@gX\%*JUcRj%T=2;hM]3h!mu
%Ytip)j"O/Io@G6mM+[8WZk6fPf1Z'^Jm/_D<UMJl\&(O=\#rD8Q03I=HMmP?AJ4/a@LaODhU0ZW-9(3Y$u")QW,EGZaFTo0EW@?I
%MhQF.Q,$[/OlBlr9dAr]g<R%u*=R!g#udm"c:<?7VkQjQKKT%`e=e.h#'Sf2H.WiS/)Vh'*h]3pp!KK`T4Z,lXc,?Wk[T\#;eSM(
%gV@k$&c.V&ai$g2lZTMo2FJaWq;]mFj5a<*LR`E._IZ,=qId;5T5tR[)OE%PJUlpfWIWFp\X!oBo(OB,Ee`Fr1GF<-H[@s$DJ5b>
%A7Fal\19.WA%qc=pAJI<1c@20#@K)>QY..o:$Tq7BZt\^EYOH9,btmF$ThC68'D$nC)oA(8fKYrd)hRP3Ii0KC(-4.kT#5)%\W-:
%j<:i0UZMP3am\Nsq)'n^NHuZ3@RFZ,qM;_6*5K?O;F@bj_c;W@?A5)Y!.F>sO96>aA*&W/Tl8HPp5u+^!Ck<7o_"?-0>*tsku,5-
%De'gX;Eiuse;7MS(D9`8d%u,pkX&d<9DMh5llWg'O%)W0]`BeOV0kB4pWm0gLGXa<qI_JC)ufiZ;(gu%N%3bYlCO>W'&/h7-L>Os
%q,T`U(:-T&%HW#=hp@cr554o5E&Q2Op\O];2M&3.`4^W[lr/djY?u8"h#u#X,5:qnIl:8jHi5/M=,q^4T>6Ig.)U\#8%R;j,OeaK
%=>GKMDI^`e?GGGS\OO9acV5"s>Q*>=<CX[R0,V(3q^[H3f.Zo"^Th\W@JBU%!u.6O]maBO<$uaj?gpKdZ/cICc3!G,$g(c5NP!Z#
%L:u1l=OF\GZ'"MJF)4\l\CGMV';uoFq?:f.MG<;@^[Q'"8_iVJI&l.Dp[S(:lSmUII&#QakA8+cX.R^0X[D"3kJ*RHp+i%_rIPhb
%W#QcV?GF;J'XDY);H[K.\,*Z,?:V]\06j#lp&66)oaBVqm@05!jLp"k=^]Zm_O,TZcrc+nLdfX:W!D/E(S1<@\_#.S1s]D)7_Fe#
%aAY3Kn)G?Omm4P8Dldc8$X_N?[6u!K[r$eFrIQu:gA1V()if*F?gr=^ia/5Hme*nbXumAmjc#nskspC#qM!+t8_iVJI&l.8mc+]0
%U_38`^6&rT&`2gVme,VBGl,q,S_c&FY@$KnI/XajKR<ZLOtH+9WF%[b]mcR6A`)c3DH9pt1IkWP*:$qG?o(<qX<6b75Cm[T/DO+j
%iu:/ifB5?3EMH[>>Q)RRO"Y5`DSVhoO*ggp9nm:@M.>H/k?u2Y>Q%)G'=cYT-aS*Ul:9sgq"OUgDfd0=licbL$[18B`[7#CjF+(9
%oXL_2A+"^B7eS?f]%>8(#1?`S-FA-('RZsRla6JMn+@(&eM!5I?lFoE[Lj0^4Z2d9p\G'Nl5*oj78J^K][]f8.#rGRhZu-a#l"2k
%c6QQ.M4@ijEj&i7rKcL$lPHWB0KSK"&,#ppN<Wtnb(8f2JK5hU@$fP#b1jm-`Z<ceZ2anI]^ajH[Rd\a,^Sac@TY<E-RHV&Nn)\!
%QAbm.-=E`:eYZLrL/2L*\V'+N?Ku\m:)dE*rn:[E21M64EuS%h;?cZkFr&D"C>D;KDK.RcJY9s:_p1ar^&Fq6\@V3I/Zu4I?8%m/
%52/]+ngC23r[b6$ebrhYOSmXPj$;;sAM#D;]17q)_:RGREnmaG-te=HV4@!4/sV@Oa.%+KoUF"b_toGbHhfFngalaT/,.@ga3)<;
%eXQ,SWqVc+rG#)Q3_]M;G.X#5[s-G1mJa&db?2(Io4Y"IF88rq#u:AbgGuauGhkC:3O7MM0(3`8'+;.gX-4EB[961pS8I`>IXEK?
%VQA!=C:a5(gbl1dj6&X.jg>8`#akBil53#eA4fDX=Y,sh<6rmSb"VaK8l+0415*m[aY3&S0V.hYZ!=q"UamS@4b>1Q(U==H!+Xcu
%<X_76caWJPp+YCk*\B#P=9fs+k-#QPoXQQM>21b\e[Ll.Ac)8dX#L!=HcF:["RC!d]<\qa*o/<6l=5G.,lU[kQha-lc(C.ZXtR>E
%/LUETY3^L-I>N3L"Id\$[bdpM[^1hd[3Hp$S=."-N8&A^VJKiW9Cl@l=LOPur&&VMBt$V-?o,&mcsIGZLK?QoL$r`+[.\>lR\n\L
%C5XK!B@MWu\f+5-)RYN]E'8*@*[J=-EiKlAd"G2-*HgWFI02Z=IM91saa?j[akQZNp!m-.<'!C\U/4Og:OhX;nA`a9mI+o[H]dg@
%c6=c@8M/uSAbPf4?ql.ckZ;(S^F^aqh,Oehm=S_Rs7bu/O90ig%<EaY0-1Z1pk*_Q7=%q&.BW23V.K0^/)FNIncucEnGmC/pB#h`
%XP+1+@)A($-*t;!5g#`9/=$+h/hMqFEmNLPBu'Jk!iWE:7;-=[?G#\)q1/dK.f$)_?6nIpaju("^`tQGEV<2.93>m/XR(7q8.u\k
%-:lSf'*Q`<9^TrA"s_;a7.J.G$e"ACSXdpGXe%O8qpaT\F$T`sg,)!!KFZF;9'5tX=i/f)n)Xj&5'O><cICEW=5I/&(Y,pNn].M;
%SrC4.oh0I5]t@,-^`mf_bl1#"jmnZn3ko>,ZHV]<ZFVnp5;2K>Z>1oj_CLmMo!u22?:t2r;`hV'g3iL3RM"7rc*1&AP6pXPGSuXO
%"R++>i9NgdSHoRpY8$[*@!<YUh5]!(bre4()qM1CL/0[tIsNtC'5Wgr:J$Jf7$5C=Wsj@Lo2ahB*`S!9SjA\aCp<GW^?YDWT='H-
%r`FT=^YRM5%_n29QHu`SOYD+/eBQP?_u*a',?I#\2U,r7$JK;qJ!rb+a(VDHqF/;P4E@?1qH%CCdhbJ3r<GdI<jturWM]5^YF;Bp
%WqmFfli/\Ageo1h[XVFcR,;#j?S5+p<hBkc(=B>^lsh]PltnCf@BT$>Mj;JdS\kAk1**+1R<<MRinP.)N)GcgL_oK[5H%D]n?V![
%Lr\CSM><p9'U,1S/*+_/*K[:jkDB"(F!IsFqK7QkeIk@h:g]/&@_ejWrL/U,@%TcC0HYAa5^9Ra[;V:Rf3Q1sJ]LH[iTk!GPNL.1
%DMJ*Z\[b8l-G<KFS5m/AjQ:SHNG[!UF'FKJ1@]$E/s0Xk_#IZobquU"Bc>T</?LH9ZPb#lA^;mJX)D;cm17E)5.Z8No%a=$93;0>
%/0FH^&s;!`;'IRgRDk0`j\G()Zgd7AY6PF,P'u3-35rT]3)JE`Ick*ZhN-X3d=Mhb4A@]2`!92*QJn*A<0e.'$D,tD@WSPL<Hjb0
%.Q3q$`^JQCS#7\)IP&&Rg!l8u8p4^X,7Ir7qbl5^(>aRi\+uVV-!0M1%^!TC0"2#!er%GEUZj#oF_/!e?7A\%QZamoMtPQ$[rZ[-
%Sn_n<CHB()[:W0@9D<e^40(U7@,.Z>mNqAr_DX=Y:qmi[.<<9*Z!]@D343He#7b0$1UFJeq7^(\9BF42H0O:jZ?+Gj\%W6<6@&=+
%dArS&C69AD7_->E]&"#\beUL#.sDr^l#a,7fXU`*S6u9`Y1B`CBAr2)nWEk.3Ba=jC3/X^c0Nja@5I,dr1OOcCu;"@!Q-*+S51eg
%K6mO!Q.,!*hpodH]t1V_pNc$-Y&,Vu!Oej@2h#?P/q8s:&r,k:\b<biTb#\o7DcAtK'&q3%Sd&Zog\I-Pl`UQ#ZO1;S#[L7_tVBO
%jo.sLY.VH]r`M36leb&Q*F%%#ijHA`Mt2@N`qjajA#D<L?5I,"Z@9*nLshIBAR2jIIbUagWkNc8h^UL`Ze_b,\Z>2$p.k@nqREmg
%>r[:?3rfs31Zc)Q]i2e+]u9kS=a<`Mb.s8m0J?q^F9HEtm!I]<iOtR':6&A(3Snj=js'jI9+D.%LkNckWf0A[2W/nTRjd$o5)ks>
%m(%-C;I;/i[^Osu/-",-%mZ)F*IpMj\R4"2-Ft<^b@eeO[^0OFba5.upL3/lp#_nNr3G.k]Xi_f\&qaKfD-O#3m<7SR,(4$?s<gk
%qcI=);^rMHk?<)7A3$3QlOCi",>4D3JB*smj:n%:J0TRPK[uP7N'nj=)]+PCQ%=(_a\8uK1IaW5b@Zt-)Z'?+F'DUM!spcd=HB,m
%_6Xt^M\!#/0lHdt(bJ*hZ&t"](S\l?7o<,H%(MhSE5bE^lN'hC"1,)J]Js\#)Iq>:8BX8F/Ws?^+gfsIg,DEU>cIC;kepWfVNHMo
%MMWX]H:5Nn0,1h4nm1>c?+^:3me5VUEYh)QB/Fo=<L+9@k44/Rj&<2Q-?8qHHKC8FIPs\,qdKeW*O[X)ZV3ldbg2Z6dOVeaa!Y*c
%eT*SF<&e7`P:H%Xk4W1@;H$e8S(4kd)uaHMDe'>5+3@P"2oo*=W2'*7=l6gG?f-PT3)<MFElT9=QpBO&2(-snVFU#QH[/lK>.sfX
%/>l:9]!5f1D8#T^abIW,>t.4Ml\Ve5O(C:?OQT$H7+0o/Bl7BC%I?q3%Gt$f4Xhs@N2>T3UQasa:``8)`dS3]3L1ZA:DdEPr^39%
%@c=$6Z!F[MpQEP8HnaEJqSb1>d?WEN$m<n1fD;g/UQG]k#LY=8F=j*djq0.L.\CI\,jGic,r[8L/PW"/=F,AN_ll[Al+?PV0"<J3
%RT`,hEh&MHH8A]?naTVWLSFc8qIO=@?s=FPi(h9tFc"jLrA&9:Q.f0u'7AllGNK29E-`Nj[;s7??MYbo0@;U\//\KHLu<l<\XY*q
%"_4@\pr%e>.+D#u_a,riOb$rQs&FN;m7a8Ur<t*!Gnbc2NJ5XLQmNM&(XUg]qK7#q#QJ@%@BcDrfhRg2lnou.\PG<_B;0hWEbl.&
%o*<m2`r+M*7$rPFL1.7tRELf6r7Pk!k/(]?bAV\#TPJTuH*L=B.pD%YnbT2ge5<X]0>EOIjitd2?=BhH10;2hp?rAN\Yl4)\+@m[
%V0i5i]Xk(KRcWecT1XBMTqYW72tPY+Uau4!RF%SLWf&/N*GtO+DT&"=UuE*+7n=gUY5#s2$X\Jqk`39K4k7r-j9`gT]E"!=K4BIr
%EFND!&OV[JFWV0I*BEINBMT-\*ufpn_&E(3Hd^)oDXTI$Q1u_:Y_2A-B7*An4[,1#\P6QblkmL/7.=3h4;G.h22KT/\U)$_Oh\(i
%<&3?hCsQM_A$KtMro(INkZ[u453q@q_Hl-uim0spfgb].iTKK9!^<_cW6^>.Nbp6d;UH;\O.X[NC8"f-'?NlkT:haoC+lhp^L[3a
%GS"sFC.!sAk#/$Fic[L8O&6h5:Wj-P];oIHKN>acomOfk\=;M#RWpUTnk.n+1@aE=h5g#U:-=qfcnGFc`04oU?(M#Z`04nr-3)q\
%+)-^Qk_U+&HN2*D-dtiYJ,(H>SkOKQ$T;t`WG1f0S4WUUE*gTq.[r<[Nc'22V[Pl&/X$f=`8Rm#"K<E^/q/lY?H(3(a1c<";1)$b
%d^.VM<U,I+9pH&ap.Ef1j/sHW^c[I6g.a+U.]t*69/E%Pi<O'GlWP)9OKtjbNQl>.S[K>Fk]+V?WmrBd`(>*J5*aC&R^fpi.G.?O
%;GrMW+[0:a']!q6\Q`@jB30"On@Hb8lLmT6V@etHd)a2,b;:famlfZ:\@Wg>\bFa#4%KK<]_fdajQBj2`T$1+nKDdgTCTMj#P0<&
%5T^A<^DCY54[:o$c_i[>mpVm/2EXg,KY?$toCA(Vg[,YDmrh`NjnoiWRcZ^3090R@\mB,+N"tOM(\nLu488!=58T!Vkd=3rWSJUi
%;rF3O8'3#WMehG2R>lk])$rO:a#4R5S<lAj8gq4:lH^FR/#n8Sd`q([nW=+jSC^T"rK]`?J5-nm,SY'\^1D2V7ti,oYZ%u>,u$rj
%'(d(-1IF7So>dI3"ko%&9*^,W,U?n'@:(>7R0lAL[s3<OOH=d[3PG$XKDCab`T14^M;;\',,N(%k.R4>d"(UmjqgL'_JWc/QQMTt
%%-<<@V/aL?cg=jV(Q<Gi>>n<[(lZ\K@o-]M3>tbo&K6HOK:5o2O369B]Y1Zp`@aVr@XJKg[,f\(eCdre81KqtD8H=.]8:W_g!I3W
%V,F)ijSdfpZ*T:,M/#V%2*g/2__n,W5c'ApS0o@?/SVkSgpCImhUM7Ja\a^t+R74Yo[OV(pY;+tXLB%'`e'l+7$]lc`nX9>O3&jh
%M*POlOZ5N\*.\\"ibh(#(C[e&iA<Fq(u"IhE7%cW&*LAAA,WX=8=Sg\A9CBER]"XY(lO7XD/$pC#`YpF92o*KQQft"*&JU<']VXg
%/sk37)Hh.)SZ#GA\6RrnD=s,eG(%JtDd5H_>e-hU+4<*QA76j0Zr=!<n,5QH3@hCSB_o#_K-PT8J#B50+jssP%kDEHDs+Xe@OYki
%T?GsKcKc*7@\W\q1Z25[OA*)>nOE/qM^b*b`7+D;'-<PB6T4)K=0P!"g@05rOX2`E"L7=E1AuOVX-65L3IPLVm0RtIP5M24X`pA!
%\h=S98SL?@%i442V<"u]?qGfdTt]4kdc:H$66EnE^Y+Y^l(-q(h%0MCLo.JXgBUY7]51>>B6m+`fFO:e"5s.Fc3hkr;22!&*@\pH
%=*JZi3;Z3&[%]`K,ji$i/^c,p*>KIMf<T7,cVSNtb,G3@^>qnNP(+q!'2W%ZNj78EXP&r0>Erdf?<7s1Cf$S8V9S1(CrDjAj[J\$
%=gG>Dbs-$H.[MrL)tH]m/0&Y%cd?_QV??3rK%gTLKs)^g4,P"Vb"VQ\(,&_#\W%!WW0"cD:!m@fr68ArVfLXO,fD&s8i/nUro`s<
%"8R:8Spd`RZ]5+H2l1&eI']kO&hh!>BA'3FKuQ=Tgcj()LWY#3OaY[70k9`tQ8\5WZ\@f&V"$dR2L+5Bbl`[6rV1HVg4#L*Z75*/
%:.p"=IJmY?0N\hGn))G(/5O"o,s0b$>&:(n(P)6U?JZ17qn%\@Z0[?^a!l%fL4._)XE<q9?Sj1rae.BMn+8e23I4`<0PHXDm-61A
%6S,4_Q>6rAVTrp_IMH,J.3+]"n#PR4e4\cmr,/\.]Y*nVA^VL>%A*.En)S.MJd/lfO'*&n,&tWH/;n^KVE&It(Q[ki'T7%uB+#us
%QK5@bR=p,^Kup.JPo:A^p"CWca\I`U<7ZDg9/IT9JYf!>;]2^MI(MopXIYQc9MVsFZ;MT:d($C'FIjN6P-&?/:[cHo.O:#,4q!gW
%0.WG",DFg/C#q4;>2_K).g1eFaPYTR11YOl?kM(@J!hTc^9;1lHY[I%.Tb)>_RfCH<Zb%iFGVO/*%LbMAu-AmgKTTWI"s[#Gp\`a
%X36%*B8+Igm=Phnf0#e+6ojpkqdEU]6<l)u.OtA2)mR%ik2L"(1uk"QT4Yc`ghj\_>4JHAC+N<9<Rm#YCV/<&f?`d_m?cQ\5@=(a
%5J@cV'[B=_]4SKVIqc[Kj)en)nksF\dKeNt-Qb>-fX=;kY?67[[Qeu5:Y0CD2s#A']r>pVhc[uOIAc_onhn!6[e.uB^qG)/bQ0oF
%orrIG=ZOu&B!9g#7T-2\-MMYh[es*AkC;g?X"<'l7:Y\!A,WsBe2c7;g:)AIk0D]LFL?O,>ZSF[2bNnCH@9+*0<DpMr7\t3;\#l7
%.EqjN/#bP:>an(Tp@-Z`*X6Tc:sV=M,W-,#$gV`!,^q#!1N7$Ng<A.h'h!-/f1\FFY9&Po?=kaO^$FWY>Mik81]*E2\`^b\$Vh1"
%96"U$F8oGn9is;j^R29[iLR].fdUsu0iHFK&Pf3dd[)9'An,UJ4s`NjY]oT&G5q0<-*imaVN\UK?6SIU]\G=4R,aD:WGc0%JQ?e-
%,3:a5fX?hUP[B@8k_AI4N?j_27hV>BV2U0mY^Gf$h.9e<j'b<><DF%PoL+MGodd6b:JMYcD\[`7in#^7/FZ;jT&ZNhc_Ta7Ks43^
%E`#$TiqbY%a;57L<^7WN+K(cg6NsVg1LBIB,TF/1$Us'tMtN?5iF7!'WUu>1mhF%TXl&ctLuRg="1'Vfq3NU9R@WY%Gs0:@qg>Un
%SIIk\5Bo@ddpjONGNF,HWA\ljO,=K0$"NH`q@;1n9[`OS-T8BYmoarH"LWeE0@C\k<ajS'3V'sL8mkdc9B<FV8I%MRI;bb6o(d0B
%`H@B0lird(*cglW%H?uS2f+Jm24?L#lX3Ga`r9h02ut`$_?0[8\_C>aT;6K$hfVho'sAE(Y0l<J^35t,[q+qI1sF\9PsN`D!;cg+
%WpO.BAqW"(Zc'k)b/f`nMA2^]5#]Kcnn+gVFk1B>\Ohj9=ShG*H_79I+55a`YJ_c*Z$=qP#g6a1(,(#gX<pZk@e$a*fFI!L=tF"R
%MXqlFT/2pH\MA,AVctjs%f(G5NtdB@>i86n8*+**JZl]L=sNBWf/CrCX?kOQ>=psrpgBTKfNo;pGN#fo3@umqhIq8=V+d_kG$M:R
%6[oP'n2'IaFZ$ce]-DB_EAg<<"JY^BjGl&Z;]CR3B+[A)mBV[V#4o-BL.B+V]$se[;X'[%*Qk.tFigX;4jNA"3jia?p$7jGTWp@)
%^L]fDZuMBDag'h6@hI>>S1A:DdSkC`Mo=RZTe>B[7`'e:"L>>VODlG>!(J3.!0<dmU4?+HN.fp=O[+MIgJgm]+Wn3L4oB?+Par@s
%M'.Ta[XNU*;T8'q^uaYE'1#67I\c&^!'(YbX>N`djIF`X#/XH\\$%k*3$P:%G"VKg?p&TW1_@`nGcp.Q@$"kLg!7;D_>*LI.TZ_"
%+2L2Ubs^&.I&,5f+K5U'Z!k3?jLRL=GQ:hMR^h[B-Xfakh'1"uGnG0W:7f)S@uqY>EAc\0T70],NO@YQj5d!(7G%T5F>,n.7V",5
%=88S^#ff=EDk(qFVC:L$9/N=.*+$B>0m7tXe'>?X>,?P[j#AmhqCr&&>WHNB]q+?^HT\9K?$?s<9k.&Bo_Kf&5R,6d_Utb6M$sDS
%lc0Bu87Rduk`.-8C`9qbR2V.HDl0GM26tfF'29b7/jIW$HNg%^OuhZ1VYYKR-:5`Ai?NL?(oVli_Sl%YD`io%DY7k+4JLb[rf/1F
%4>h/73M^=6^9+1^.12KS>qdtoq$Ogs"-QKrGL>i7V6DIliGouBM*;Nlai#.'Q_9/pAE&S.00p2jai#.'Q_9/pAE&U0QD&hbj(.//
%r9R"iLuW%*NQg;SNAsZ[hAAli7iWliD^9Uu!>3Ao`#E]?:JeuL1@[iRqn<Z_ai#,QEYT:.N#6IaMURpFh?bYVp:g;RFs&g.kn1/-
%WBE"(MnIL"2m1&q;,X598S&8G[ei"aVTA^dn7s&O>rKG_[nYALc4%/XMGj2<+-+%B9Mto\kj4eXNMXfN5K#Fo7K]E((Futd[u\0b
%Cu%Z5mX3^$Ub9o?AB;FMcc[7TX?Q%Sg0_4BN8*'0460(P&d1U7s.ggOV2'G(g.GeG#jYYLTrSJVU^,O,l)M8)I??;P'4KSaZJ4gP
%Y-&kC=^5lWMh`$5H4`Fk+5/<49V*#(4DN^OIlCi;Yp?J<5#tjjo(liIR=pa0HN0mq's`n>qKnu[;#@l]NN$po:P"#j4)`)<c&?Gk
%/:>QKl+qEl7I%nCq=k!_pR!COqrPgj^X6rL\pqb%YitBAi*s/8?]!7CO&1$XSq>?<O&-c:c/YP],E2+HVSil3s6;hR+8E>7".tY5
%^QQn(9gbh28Y$QUcB"#9EAa*+`_5o"o\Z%Q`X2,5%:Ahe_]L<':L$oZL[j,G-2n8@>b/kC<DVduWZ'L\C-&Q\bkP752m[5A1j)Zm
%kOc-T"/*6%V/s55'.&BJVR)S+`a<2^9ZtCr8iE4tE`Tgj1DD.;>H112e2,U%3iD-2c8$]:f5g@Hae^jnfAM:Dc>%V\DNE=#H&3E-
%RT<gd;CsJe[^:FR[?SqX-*0=Y&'GC10eO;-JF-3GQi^$^bf5BGW+fP(&2o?qQWQ,B.sbAXbrclFY$2%^36Ia@Q0E$9S]a?8#XDEF
%*@:NgSq@LRfqQ\a>DCF<W>_"70RntT6oWOS1S<dtOYT9sRp%]\[>_JilUK[N.VU3$_\+i/OYLEi(gIRJdrKu&]P7ME>6o![&-9k+
%H<NM(`EC8L>8k/I.6rYk4dX_7eW`Z75[[ngjGU;p^lnpi@u6X1Eq(^=(?ii(9+6=tCU3\JR>"S?kMfZ/$g>QDKHXt;_hqA4",cFX
%J6@Zdjc$9?$X1]PL+ZXB-)*V$VWZF*@cdZ&MYF2J)'I&.'PCQT9BWW"oLWX5&<P/SN+n/+<kAKBZuTja=BUl&0LSpiEhXjW_Y_7F
%lnY4Y2:$"LCtVq!9;K*0AI@O4%B);q1^"?k\kRFF=YTS\9U_5)/FoABeLf5MWlYA=^uQ`a5X7dKL2>qX[%UWJK%4[D6#+T@'d.+f
%7&!8bbbeWsH)+?g!XMLf/hmAF,AYU9PT_8`FVEDebVTm/&7(gh,Yk.7UKaIO;ANZdDTOMnq@dE?NFcWt(f7jq5%Vg=GsW$>)<5Hm
%dmd*lquQVD;F?G1@kaNh'=^_lYV3PGM+eWeGM^[lOf;M<@b#LT9FXCl@HF:?(`)b5dtGf,8o0V]b6WmaTMYg1[OB>bBgp,FNKMd$
%'hU$M$fEQs##c0]0/5Lc<@Xcj.&prPPjnZY4Rg^V]n(bca#!m;B4UU#:k+<W>>T)R!,+r5fg_&k*\),o@DIC^/X2Nd+kklYP4kY>
%RS&q[3)PC'M)'tq8D85^#>q9'bhs:&0FlB]Z/A\EG%fQX<KrRTFF7QukU$kb_?J9pYnMqinqe.#BhS]m"G)4K_jl;15nYr3[#+Eh
%QSmk[?q03h/?om39.\29?uQfn39$9l<2NQ1M^=74:b$2/["o,%eWsJ@0Bj6`.(bLWVXrFd?j=D'liJH5XJqASlloh2<QUCbVM,XY
%e^B=`dB41JDfuEs:ks#kr),*KL]M3*=V?]";5+'N)O0;N=UrAg%WRH;bX*74AaE^5%.&Nr?jh8\]$6XF!r>2M)\UP-k!]<'ciAe9
%PsCmT.'YTd$i1H+7Kr<rU@,go<C8';"Thn0ZoeB1Yd+6?(^N)jdnia37>3BE7D97V"sIfFk2=d;SkY6.;b<=5KsYa7O;3Im!2(d:
%/-c6J9UH"+67&?R$ZZ6@d53(\(E`e<I2s]#f0N"s@T?-!E?G=Z&f?[`r;@7lb(+'QCtqlqk&^&YMFMRl<jG?^h4bZ250`+G`%OuB
%BZOCK"&P042$6IdW3_#NeJr$(&^*gD+oj'e8sF(AKJq6Uk6SIgm/H3qX@rfBLdM@C`lauG0nJsKYRa9S-LqNtGp23)'a2pe-(s3K
%%DZU,$dcTpLepEp=c4a;0\',kPKMB+^ng3#\WJca,R.SL>+hrsKi#Ni#'4@-2#t$L#cJ"_T2#E;4ln[;pfc!8FY)%PE\hlqe/9pW
%+mC*OTGGla(jOK5#Cq/p+qKq='m-*6_#C3!WZ_&0Xu):.ZD+ELb)jfR/1G"G%[KZS]n,lD6VPT_H2taZg6-d?AYM?ek$X%@#=?@?
%9#sP3()gI,'MUH'TOsD2%,E,Y\0t9PC(Sfm2'^;C.#7.!goBOXU'-Pfpc!>.XaD&Lh6\,a$G[`K=+S**b!8Zd_dimq:^=P$:Dl!m
%.Y_2_o5&1"j5C6ib;+A&;"I._SnHJ7Oa3Z:C1r;u9MX,,M+guoR8&+VOp4*&-W!J.B:#:1"/F!OWb#`C)AABsOd/Q6m(@Se(q3Bg
%XF]10NXesI>\7P5@l?cDV>to&Z8huHAYQ.2K2T$(1^/V9$11kM9W8dFMeZ/;V5X3[>b[sE[ePZ`bT9j7A$!na@)T$qYn"3=<[`SR
%;24*X*^EXV"*<9$>/_+.s)BGp5:@ZBYlqYd#s&eo1RU6+W\,sIR\U@.^cZm@!F$A`^dTq6VW^9I+M.ZW<)oY+<1B2Q)_s9bi:f![
%fX3OSX<9*/(:F>UA(IB=C0:ludtkD>js5n[]$6Agd?t%d`@aI8%*_uB4^&&KVJ$7:MKGgQqGL9J9J@i9])^a2UC,DF3h1q!'Hp!Z
%L_N;(&l!5;77<9Yb#!HI3UURC`diXR-'uNH5Z6[jl\<Co@cHnj*'k'.YIpVGLal,q[7mql$%<?5;^PDTV)*?^1J24QB3@,_3(&q(
%EM#a9!0]n(EEr<%p`i0pZPg/D&4@k(6nL]e$;/o9$:S5d]EM&#WWc#1;M\!]A\^C-Wlt$hU<q*t)\]/%Vp\]NdnHZL1T\5;6.g%%
%fX9)h1oZ#JjbY!mQe:GYUWbPCc1<^FBX,Y^WDZ#5iY]nPSeWP)KJ-"fQ"p]o!CB;A4c"k0-]b$JVeSu_,F<E+,KcDA!>@A(BTf7?
%FGp2:H!0lT3_W@NccWZ2+O+\fe<!sDlQ3$!kS\JH'I3'F-?KbO'=nEB<asPc3M80Z,>/DMKj(?Y97s2iAB/hR>pAMS;9!a>V?88u
%W?Z*lhOglrd#cPR=fI\rNNIO1Hp[Q9ba@c@$`r$ma&0iuO'QA`*h4S>g2O/<0I1`N9KBWJN`s4KH;<$SU."2d?7+p)_6F@'UO``R
%T_t&`Hb2u@#R1q5k\+t"*@$qZf/jCf%IHg;bf[=Y!c"$3f\7^8Te2NaF.BV5lB5RO,,Vs>0^NdY7b5Z&[;9OCQJCtL_]E%+)0q!G
%YFu&.=AkQQ7@RGbKOJecaE2-_flRNP6)cR),lkG`%ho<aB*lI^!s;]P>&lEBM:<CrZOM7t868NB`<Lm7)tk2kH0.3AAiHYc?nWdL
%@6WFW`8FIt6pR0=`,_/>R4p>5]3]%aJmgX]<0^l28ohL7XU$/,;AOmiC>KXNJ-iNiK)VXGL$K^JhH<1cKd@WH=c,!4OJQn?``*^#
%a<>k(&-tas"r"eXTHu(qA69/`#.WKhQBQ''bbA^s9ML^D:_&])M^Xd.P:&$EIED\q`Ogb6dbIi4)TlgEO4#SC,mr6TM__H(Ta\%[
%NG4Hi1(.&d?752N+?/Ud7"mWu(&",gAS;sM3K(RcP$!6I)0>Fd\->SGY+H29%Eu9GJ=i/_Z&'KW,)sSmF:G,$@\F3>m-87aB8sPP
%H%G]tSq%pE>$tbO+,l&';4sTRX0T4=8B/EI!R^/3B,S.SA6%)]#36-`)V7ge&h<"5Nm3dWR)Jk]G\Vkh>,YL2aj?B9JC-kr;dc#n
%)\+@J_*"H\bZSOhF*(Z4N-Io?+?0ho81FW@VQ+_=NKqV)&'S1?8"u@aY@g/Xjg(?A/D4TtZQtejB*h3>7FQssKI'c$L'EuSd"]b+
%A/U]4<2/*l&if`NMaMGs+JgPCSdgqhiT/Yl,u'\P6nR5j_U*IlTRU3Bct-hrb]kf^ntn)AYf+nR]Ps2''$48hA_^G*eoQ*mD`^9F
%9X8afS0a`E_l]G.#<[7[</%Z385\rr"0nCCWJio3;A!u98;U)ROL[[0\=tLbln%B*<l[J?W27qmFPBqB-,d*qI3f#_kuHJ>Eg/:c
%8X+4%#q&1i2B_aGlj8r),sVga3&7O?9+WB=Pm.PZqaraa8\U?eB)>1u)&'_TCkSs.0*oU1WM]#3$#J7:5bjc93\sQ'.^;,_7iCo_
%ln[<&Zt[JPJI$E-B"9Zm$-/I[=]r;$brX'I)T76V;pr!T[W%%\k?/O^PQO&//5ao]MjP-=hA\$)YJ#cZ=Y'!]A4^<U+NXYr6'!d6
%fMSr_oXk8'SMqNOnhNcIM'B*Xo!j%^a@R9sYH`VR:d]M\XtE81$ng_Q*YKbc&b.Uok.JY7!?PgX-5'lp';5T(3cke;T1'*PAKS(e
%/%R4^!YDc0/4B^\KI4k%;Mr@KdW8fh\]$BB^'YuV;FI74.j@h7'G3!>JF/r8!C]CcW4:D)4F0L8oB<#+lA4KS-YH`EWe22jAlMa_
%Ta0Fb$W_F&>iRP0<11-=$>bK(.^P[i*NUL)`9'5+Ckpk"ZQ4AJ+ssTP>rY`$-QSD.)M/,4BdK"LMU&=e<>QsE-R6dD^OltEQ7=o`
%G'B*2:W?qd:;;=5]CQYW[Q?]5?/2!;E+Z`RN\]bBgLYu??uGO\;\tJ*KHT$?a8)V3YGe:-(u:?s\L=`=H+Qajh$;!c$mciBDE3hN
%;CZ)XBpVXO1:Z4Q;]9O[:eY.A7g#*69h-Lsm_#9/U)d*=PG;)hP9+U$0Ql3`a<jA_ACI9(la<8A$(^$/<HP/b@\ilaZ>qOa//m=*
%e7b1>e0rI!2&[=P0]ZdR]0D,jEE!iZrY2aW/=[O\E&K;ZB8KQ]KJ&`,*G(0Bm4t.DEIP4)0%$5C*Ld[]Wkm'+bI,\s2C,>$.^:GM
%/sE5OE3)bTA\d,`RS(dn8`eo#6.>)ofL6Q.o[E2cX9^ZuaoVYb)NaADdV@i_/"M^tV(>o:^]8L2m7elWb*m>g,6_7?QMBPsble^#
%6!2L38sV\,.2b[N3%Dho1uZ6uNK:)J;+$rM8PL.?O!7poK%mcM+k%]`#O$t]GnYpj<5bjWl+OnG@IMj&nl5+ujLMKV&.2DokY^JX
%mhfFVX+oS8e@!JQ]d"7HH\ZF,r;RZsQX*1G+q6b&]u/O1":H@Mm_5JqN&4F)1L`Vn[T+#99:W.cFhrmC+8^Mn\=C^3@b>dnT83md
%GB7i;r+=@)4AD6$b@V-*20`lBb@_pKX.\(HG1d?QEYpnDG(&UegEpjbZ&?G>_8>-0Xdf)m4E#[4_PF(f@efP@2X2"jI%&mJ\P0nL
%n'l)UIapB#VAV%]%"/0$<8)'T>`c160$%Ji*8'qd*u=60:<g`#\QgO5Y:"L5]J!AHhEkVd*f`0M)4-\p6()TRESS_F%O_\4h1sln
%LWfBOJT)XP\5%&dmb;$6!eMeiYKKqrI,m:`[i7AKEQL8sD?uV"(r6r_+aKVRGPll/\T_S.\G=s"&_rddJ8Ln28oB3n\'?MJr9Ui!
%e(s0"Qi$<.]7%M=GP_Gq]+$MaDqQ.F*[\nU`SI\F3]H98BR"@Xn?tX&aD]jN?<&PXMnAol$[;KdG'BDZ8aN7jOZjQOibk6XBKs<;
%4g$ib;""%P=RPVN+[$WcqgojVp&thJ>;G?WNc:gP[a?_L9&BN6O5h]of*ZY3GIT<IiGcQJ_Vm\__r9H`jRAr_6=26MrG;bmo3@W_
%c7K_/p>[tLl%&eP#mB)pgSU($Ws@ZKRq10;C+!VJRRt51:-q(feD*8Oh)DTp_.7p!l&MisVC90Tpj4i[Y\eA],62/Pd%bgJ!!;u:
%4#8X?&^RMR=N^G<s"mMh3k&Et(4ga#.[a*9KY6Vf)E35Ciaf[]jW:>X+#]72HsW?6M[a]lrU6(+^\P(ZT76S*qj1Z;qsA=Z^]42s
%mlu:#N_@&HV*epDq9A@mI.oR7=4YR0^]*lqe*!'95Q:W%5QCZPLQ=[qFk$]pQ0Wo!_tSZZlrU'f?hs*0c_!G9`hhdt&&3VhbNDM-
%c$K3)044_U:Rhc'gKo@+l,&C%JlSsK"CnIMpNJAX?a05uLH>t&lkM>SX,ol`Mi_-_Bt_::hEaaSX2e4-)Aj!8#TI%5iWc&Y`3u=^
%XW%LS[s$;NGTdCEW<tf0EgYbDhGe3BUmG#eDsn1W9L4"tHFZ*o&lI5m)kaE1'L+GceEJT_eCZfME0je'nlLu@G0/8H#L;V&:mbPF
%fEq%Z#@8JXB@q(a3D@Ic0M%M$a"JmjQ*FZ-,*h/l3d%4Y1,Pp5eXAA"0q%WNCMQ8N*75;Y7G.c=4/)#jq7A!/rgBBg%*%qpNoduS
%'JnL`4P9'PMXi^27CGX$VJ=E$jD_74Hn%3cChRJ<DKPicfaaM6`E%:0E4OGQDSb&+(CYl;R2%W,:AQX\kMl"kfep5dP'Db"8F#qs
%c/DNd<tTNM5lPrnI_j7cW6h(;K8k`I3JM>ParYk1LlHDCNTpeHkKR@?;l6Uk_oVu4hsK#jf&QP/rkjZ:YP/s6R8gn^Af)i=o2^\F
%QqXN=jF!BT:AF4uqq_!+#C:s2Hc^(:HgIde3CuYG.RQ%'R_I9\0&DCtT33;NS<68oVOq]oRT?,g`+Imdk8n/4S6r`>2s,"8'4jU,
%PT[=n]3d6C6ZW?`'t;].bW@1+PWep+$A56snsG^-#YA:urR#,f@"^g?r[UWoib?Xf'9F>I@bTcUO[[6Z9[fI;c.,p*6sUA68`>pG
%c@4nH.:@MTJ\`Dj\*aSp.dHX?,GK'RJ%se8"DT8bAnQW7X7Zl_Dk38qo,2Qd`GsckCmP@e`&8C6YO,)+aZJ?2e/"7_.Lg9-OnJuC
%i'_"JD@:o5Bu0*n]c#lN7!gnf":t^$*jej%7GP.!81Tg][0Meeh+[MFFP:=3JB9V_<?$3Y;/@tNW"U0(J&uu)(!dtoaUg+)TW"Wb
%i+)/:4$1!DiFmi^*WN5SqpgTUW&$Q;`P-uI3Ghb]qDP+m9\d$J4ug/jaTD#09M2Wd,M?4DN?C.qG/L?npLjq?M3!46J,qJ^0m%!F
%.slsV:6eaG=(thN<Jj_ijB95aV$F$X7(6&Tn6X9sF[Vs&LDZboTMYLthMmCUOIVQ<[XHf6`m.SJH,r-X[okW;e=e$C#1AYE(22uI
%`q'Cp#D,r*ZlrOT.o+4O,<&,,`[SI#c/3I"Zl2!J<'l9FBUb!@6@B3(@<9,>mi7P?(3Hs8NhXsS_B8u]<0RmG_A%+&<6t[h[bc<K
%50'UA'aYWP9cI!ZO&'ia,X0,k@XhY-]DS%#h_cbTa5MkdFFk[]bW8dqg6j,GE+3Y+cHaS@M45U_NtA=H!1ICI`^3+n</-<g<1aIn
%%A[\$KKm]G&-YY\Pj0GC/"fb71F1WL_j8#O+/C4o+Ld=,g/U7J(K%`P"Ts.7l=E\i"IX:#W$YgE<AA$aMAn(r8^*?@M>98kAg64I
%9Fuou=TV3&RU7>l]Vp3nl?<m&[k.;ND.WE6=RV2l/fK7=\mRX:p^T2QHUsI<Kq>QOLs,-a6(PKb$m\u+TN98e&..g#VRu42_QeKs
%ASdr;s)tL7L+;]+^$?!u6\eB53Q//oCtqso+QR)_UL0NnoNo2P!_\ltT:_:00V;Q79RJVKSSfO:i9ioo2VB.r%pI?`d?N)EO?Y&h
%Sa(6Sf'[o5e-iWA<HMtcR2[qMF.'kLAoXUkZ78]FolA,cT$!e>YdW2YAiV@I"sO,G9YoG2qj#*FLUl6R)NUGoBg/d1d)U)J15QQ@
%;^QNZDqmp,3jQm"6a0%(AYqh`#u7eJ;@+8aQYU`u3L]a($c@_O(mhsC0]n_HA1qMp5?:n>&"'H'D$X?p:s%'RYAn(e;'TK4Ah!$c
%f@1(:^/q/BRuphCUV!MSfn;d/?9'oj/V+IW\>bpFb.n'?m#f"e6co?fb\NfJCEV.a-^2V!OZAXSqEu(NC'>KQ7jY?qP*2b@c/(B<
%&T%J(?"Fp/4J:+)+iK'_XfbOha?Idk71(LIQ`$5<biE@ChD?ShOL&9'BZRiofBJc#Mun$_h;j#FfTmNsIC_Ed'7bX7c(cJ/,/g/M
%FI,_=dN6<.Df/4ZjX]q+2F)Bm6HIZZA,-`en1__eaK,(h[D@$Z3bW2Y=Wu=Z+rn-0a6^`a1T3j59+#:hi]pfK]#9_)jEKgX\jo&P
%S^qEJco=)5_dA*li[Pr-B'W?@4lILY<mOn9:fC;]50#Q1d^%5"iCu(.OiTtFD4>;V-V/GCPuD\m:G>//i7a(tc+>"_NPiMpf@#(_
%kFu!Xb=,BM/ahq,nWI^tM)s%,5K'O0L!n[4T`ABpBHVpVTI%<'#Jfm>dT)Af>*r@[d&3KYK+qZp%"m$ObhgdW0UP;f+)&"AVu0g!
%C4r57BA]YT[`=dHP3>f<F']*mUuiLcZ@+#hoHl>o%O5'10I/!:FpOZUc:j1ajsB_s\t$sdnZ&]F2^c9#/Js/40/*P/)h#q)2r0^t
%?,2!:*8mDQGHtN23NG&@dlh3E_?Fu_9dV%h-OeeuD&$fkNBgapNr.q(/AcO.X=oDdV^Gp$Yo;,..E6niW'eff>0@tF)=6iu&N!0W
%>9Qp-DDlj1f%/BshJ`J,7t*q]%<037Z2R%jIJ=j3)2"S\\i_!1Q+U&B>p>N/R3FsJLa_;_98p.5A94/nTHf(Pc@f4UAo\9Y'h,@E
%f#ALOL'&<,PB4@`e"Xdh0kp07oW2e3&UL_HQ4;$_U8*@da545Tm)^]/S;`Bii^aciP*=Mg5ORsW2Luj?ENBmUCPo>&;n.O;d8$D0
%FWZaq,FYeqOc;bhJ^7DfY;T2!DY=YcVpln1%6]3`pMIP2$W^d@Vs;fFG@;uj.pd56SL[D*PeFhh<cR^U?C<R7)T-mg8,Ue2%H[N!
%6?mBjdlj@a5SOO@PP=t@+!\_DShlL*@0eb#&8I$4.3V4(/1&LKf=@[E*g3)$*-`TD1,3miQUgX&>fA<fg3[2V9a>_GNsl3!\TQns
%0snuW^+dVm&*n4].+ZA,FPB+3-eS6,"79A]BU[PI(hW3ae.TA;2^Eu]b7g#Y,pl'K`;K"C)t?+DR!6S-Fd^UAV?rkjMPRdQEOi87
%Q,A*P-.E^-oPp/OUU%FcYG"VDPC"\<i^6eR!hG?D&hkhV>Z$?X?6!(ag!:V6JDP'EWbb(<Atg2Q2k+qrX+]Itf^LLi@?e7B/Tcjg
%Zi?&3WZ\A1`7`UCQ2(Mo%V6.IT_KS6__eHP6'e9Q/a5!6S^ZUYc#VG:.TW8-Eka!qCLei2IS\r/i`)L$8'+EN\%NToGooZ.hsFk@
%mu]brC9,T<`pS\SL+TAlS!<O\Rrn5#3l],4!$d$KC,k8=1r7SPH-!SZaEP42K2_.^KZ@LZIm1.7"iJ*m])h6f-<JEE@9Y?!F3Du2
%@W]*"dPdZ%1c)9B[bmsh5%Ese?"aOFnEMd2CGO&5#AM;n)%PAT4J18?=$=jh>mq'<Eoe2t'i\d*_kn/MFk/?`$4q4,,ALCn1?NUH
%9rm8cI@X56gDGU&ehqPQnapj8f*Iq=fGQa3??<jW)*6mRV^QP3kZ$Ai>+ED@3e^J,T8h33c/XbOdRqUVf4WaCk+IJO@8i?r1(*U]
%Rt?HZF:"G.fGTKECEK(.Vq;U44E#WLSKZEkZ(=5DNFg*L5CkG^fPc-=?%]$6(@2pU8:+?_3PZRndU$l`[^kOgp8S7>;FJ8Em0+#1
%Bcd#U=03'tgXBK;=k0qBb^.YobsU<Lor@B5Ra.^qJ?3hiaEjE0RJ-1jbF/%_VbNfV1[F/h&Obp.HI]Sc]%aPtifh0.3jN''AAXsu
%S6'PP=pF@S0@S6j=D[r[H&7"oG3G@dK"7SJiK<bA"hFhd:O3>p0-*Wf$ZmZ(1sAP0j;E+f]nFLWgll%eF41/kU_d8XZNfPLklk'Y
%S<+u[`?[#-s4``D&;eVsman8$kXM[]0Z9rl8>sV_?kS3qO!Eo^.#3/tlggK7dYlfQ.Z-#ZFCJn293@%AE=BCZO9m5HGV,9C1[2m%
%CSXJKM^_Q>Gu&e'L+6\<ZX/U_=@q1l+F-o`33llRgDjA"`tuBq30g!!>dI=#f;mpg2"to^Pt`WQiq^`jJPG-Wd':XGjV?3Id>[k]
%%L+3fKu?:\'4g&:>!:B^\%;V5Y,ppD=^aqIXF4hsc%mZR#?tEU@i7A5+8V(@o(('sE.:5-,GlSO'8gp-9^29=`!GgQgT'[.1,WMu
%nbR]\iGT>I]"L0["]8MPJuQ\BF,S`s&DI5Wp;0R'kHdn"T`gHhWH]kbHsi[Hb[kSCPLS$%'c,`k/fWO^MKk8m;1K(6OP[iLm#b'W
%*Bea4c7qe<h55@?"<h/Wh*nj!-+$N9pGe:`\MbA)3_!Ms?tABP82^_<.l$c<]_YkWR$,JRM(TsoY!ma=[fs^"d7/?-K%8I=JP(9^
%kfZ\=bd!`_$Rt(9h*Dqrir%;dm8JKNk#rCs'/_;J)#G@H"A'ocE.*rD+(rEW/p?)V;i)rk$rH<%F10tDNnr*qaG?h%hR..)pEN&2
%7Y@IH)a[C3[&;V*_S!?NMS'MJceu'th)nU=.^HJlV3B.ef'\KAiZ-)=;ibi&U6h7;;(QGaW^elh2r]+HcU]MOWNOrY0J=fh&7MrA
%qGLEB&ho%l#+^i&$OaD->AH5[0:E_"2OAY]ig-dhK,;%#mkmgB1VfHPi3dOB/e`td?C0J[8$DjDgZ.Ygg<.)=>Y!KqDGcS3@roQ0
%<eqZqOG4Xr#:88U/rsu)g*c\VL$1XMR,Q<O^_@&/-n.>Md9Cjd;lpiaHo[=S+sLNlT7LRW3`d"_5:!E(a<(0/e!:gEj,t3a5(a82
%"jeNJ1faaK]GG3Dhp,MQa7`YT^JujlSml3?dCEcJH3lg8ZN;0r$maV%:BTY&=/O'/b\<A5pm^#CmV!*8_hN31!chF^VT'2$6f'qm
%R8i?T4DmpG!V;k_Sg(<tS]\B!cV`QUS_3%@*nFY[hT8AaO'RS&qg-(2G;!Y"Dimdf\tOB*2TOOVgtpgXXEpWbm8IhNWo#lQBY7fD
%7slbdf>6pC)E;!*H[#qT:!kfF]?b]5?kK'HrsK75&=NH_f_K^C9[Na06'j\5Ds06BY<^.?5/-9!RSaaM6suD*,A42]/6!+,%9%6R
%(LF?b+Vc]mL=D;Bmdqb:!@G1W[l!TM'\c`#BVNZ*q2`$"r2j`;E9OO/P;\7/D"`c\:06tXNh<"R$#\/dYj'd/Y[^4+n<d2<Ya:QS
%0/"-*E-j>p#Eajj_;'a83pB^?O1a-JoBGem**mF%*d8rX]u16BlB_gM=afc-M)QuEe@;Lt.@pT<j@AR)kt,fadl/"1RRZuj\"<tJ
%F-f-R!`]6[Xaq3qahacn`@JO0DG*`JB+d-tl\p?-X0IC7[$Rh^a$TPIkq/Y/7>5uU=6:(Q=/tW#7bMc?88+qtM[3Ys4AOn.6)%?^
%#/q`PZp.<R4p`nYnm)pj-!=<Nm(\iKa`tS'j:gm#n$0%AY]F+M,''itZsFK&LarAJY0/MchOYUjK"(,!<[+<=dhI?9,D<A:\B^D=
%cS)LULS=fM%Njf%c2f!=jmHa(U$@\OfSieY?/5qM&O+8!.\/Duk,`h;k>MfK:)e-?I=_ps;/oYLFAaIG)0F0q_qSo9k5+b"Y6=`&
%QFX<FRV:.(GEk1g&AX8.JuR*kQB(VMp8-C_>E#>g,`AN4L<@Ak/*_$[j_.%D(@;#G'"<tfmMNt])[C1<8';s"a"N^slC!1])T;#8
%27O\1Ge<j%Sn/qkRh%S94WC6uXa;qrQ$MC,dtgJmF72`9]!E98KDMHJ&V!-(a6Mr]?Ai#q<MeR;0^dW9WA;mmLTofso-)86VUddR
%eEL@X;)40sJ=tp.b`"QpYIi\YeEIa^Xj6@50t[oZot)%(G+;9KScSmumOC.a3d/O.D6[l@Qsl]$KF;>8h>:Dr9T+%KQ!Rb\->1fc
%Zc/Cbce\GGWbsgdI[B4/F#SaIadOHHgo0/oMA2b7i[`Q28N:5[1%%M457g8Y,_u8"juokMPUS=pB.AWYnPuG&dS\NkW^D,6!8dDC
%'iQf<+&\r_g`<"%NHn@th2ABQdXDhiV2.K[HA<C_M;GLheY0E@.>2)T^t.lSf*eUe%Efk'I>2/6XbHo[,)X)]OZ#uJRt=IYb*G?;
%;5DK1>dk\W=GIb[999mS\WZmYA*l?KWF#>8RqM0RMoa?]9orX%$safNh0N1%E[+!fXh,HWI<dbO^Oi7F@t&jsA=,=5*--4f>!gd]
%1_efMlChj;@rPeZ_ohj;G1qoT!^"oG]_X:AJdZb4pM8E(/76@+7K*"qT(L[Jn)AI*%dZ<2<#M1C#(43=Dc5.fYfj_5!k2@)A!^%W
%N)-4W,>:;^FjpXSP7%WSgjZL:@l/RS6&g/m(o?S,'\H-"1l6[a0<a\up?Uu1]e(e4bB"3\ng4lWf&>:+]F0M*HI!/cF:NGGfr.@l
%/NO9d;oQX,<1KsEcL@t#*G[d4:o?6<iu_Etq;nHEl?T1e5"JU?Q(C+P8T[t\83GN+/MmW^7rC"V;e'q<-DQH(0N%^8X&7AA:Doa(
%m,$.1B%7:'^oD#YWqUfAEL%O=%WASiM'/Zj3UBWV(0clW]Xq#2?=8):\futKSt0]!*pqhAaM2IUL\N#>E8,)I1Hr#DeTEDjpbY<\
%p,JO]BhGJEV$K.5V<eLs8rj>.fXhCSe,/m$l%$gJ,kuI]hBm%>:FF=0`UK(&6?$q#);)Dh2aJM>'IH8u'^EljI/smDYK1o7h6n\*
%fSSG]AjCFbjZ.?JHtCA,gN)iX9D\(<(68lF';\9fc;;*F1'ZRTM+@3`Q`>fI-g$QSAbE^="@`3q%l4HYO*8?A3=NRgacI.<C#?kc
%0C"kD>gD7sDN!KjP'u/Q!!6S1ie%Qh.4&0DgAE0C$;l]WUJsk/;2M!>WAdso]8.n>:SNTdlPp<q^Q58hMRr6oe=383F[c,,kB4]V
%gZ/8?-];i0,AjHX(@P8,W"7LAGYfkWPWOpTg9PHl&Ql2M%k%5m+Hh)RL<R6@0\6LX=9KO0fpn&fnlL%W8?enu?1L-<%P%^+PpB]c
%Q_TkE%fc5&Ln#F@)/"'_OLFa%R4Gs56#Nt/;Dg7Z>BBID?:BOaM-CC,OQ?o)i4uQR^<slM;<j)DXB9/1Qmr]sMEAtnYY5BI5'cH.
%Kb?Uf;l-8jT=.Th1FM?dJ9^W.gLcbQ[d6V>9!TF"]KGrs,F[&'6mZPBffg^.JPCUs%JJ64c)t=%k,:^<GH&][nkq:>9]eK*'3-aO
%#q&llLXgfaplVHgf2QKY=YoSi8phID=W$>=g;$ohC1PDD28b[R8"4mpcss1<Fk.cO<Q$p'>a*pLB4XF_(I]HH%1&5UBUd<K:WX5_
%Q4"$;NuLAIDWGf3oL\BN5+a+>5tY?*e:pKaDq^+qi>p?%'g8ZhBbmhZVZ56nC5*@$j)&XX&]jhr+ui4D=t"\EElujRrpB5t<A[IY
%+N[b128scFG)YgcHmk*0`dZ?\LH<_P0"++>)Oi#3CA(tX;3[YO$T.eZ<9BPYU3LN)o826JlArD6fiQ<EI(oHNk-5=uSnG'"lSO%K
%7jX2oMVQihFm#YKEj?nLC>'j$@"":#a,u14M<P\Q$NqQtSqdNAA\W!F6P3X]b7ERTnhgp?(%\pR?hTSMRi9d#ZHp!1S><'6F!"Zs
%&qVXO`P;+6-@odslC4[^Vnhs?-aXN6ag;=%*p;,Z6RQn]%Ajqr$Dn]^f]i@!jm2BoEj+]CmG3W8":Bkrc3?LN$:;*$J@61g:FYUr
%'\2InaRoIG%]'>6C$NS[1pEW.#$%g>T3bTa:K2[!A]=I#7r\a5=^rHr'k.,#ScA+0a#_dVGK,C^H2[gYIBu@i&fNY"rBjd7ZYOsg
%`!MNqB&5b'`Q['PV3C\&/GUbISHW\`"TR7MdQ!;+qT;B13L%+<2#jG0QOLb`64+\"rUQR]CrJUrj#(9k[b6ZIA$Ja@f6U3r<W+Gg
%C&;mBgF"I`2DHgC2pCrW+]2W=a>#*)/a?5VDVaqbW2'2VC/83]+oC;)f]$,_bW4!5:(J@Z=6ki+!=D!R5rQ/N%^+rh2V:s']Qbr2
%=I>2m?S@e(l;[\Z#o[5H@?^j^Fl)a'!;<?IXY8Q_U;4r&So*`tF4d4O;Ugk7[>&"$`&[/JF&mVQ49$T'kBEr9n#:VPSW+Vq*-l#s
%UkAs)5D'7$FATJa9Gg;SCR8rb^MiZl4IM*'-rJkpc>mr/Vlo!R?,rbrhOW:_H1uOGS]pnc)mq!!k1UHeH'VI3rtp:X;/mf0nO2cY
%HRR_2MCXTDN'/Dk+EPtR;GW]%8^U6-<7=QKk13:@=48Xcn_I%-k2p*?>0=:?n.3!#=LR"jl_l8`/ur4T]p]1/Oar^$GWG%Y-\nG,
%:Xd>Q%lS"5g#^^Umsir4RX@h9NqFfR2fHV+a.lAHrEK<mlL03"ZbDLsX'`R;k*uDKme[NEq"3AQJ,Aa"h=j-`pQ#h<hu3<p%4OL=
%AH1!!pRaYIr;#BN%kg0Ip#H(&fId!^hgG%-s7j'IrsQ1.H`6~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 521 1025 a Fs(C)8 b(S)51 b(C)8 b Ft(A)g(P)g(S)g(T)e(O)i(N)
g(E)92 b Fs(T)8 b Ft(E)g(C)g(H)g(N)g(O)g(L)g(O)g(G)g(Y)52
b Fs(R)8 b Ft(E)g(V)g(I)g(E)g(W)1488 1225 y Fq(N)t Fr(O)t(V)t(E)t(M)t
(B)t(E)t(R)35 b Fq(1)t(3)t(,)d(2)t(0)t(1)t(7)1141 1725
y Fo(C)10 b Fp(O)g(N)g(N)g(E)g(C)g(T)g Fo(B)g Fp(A)g(S)g(K)g(E)g(T)1617
3633 y Fq(P)t Fr(R)t(E)t(P)m(A)t(R)5 b(E)g(D)36 b(F)t(O)t(R)1402
3866 y Fm(O)10 b(S)g(U)60 b(M)10 b(I)g(M)g(E)1292 4049
y Fk(D)c Fl(R)g Fk(.)36 b(C)6 b Fl(H)g(I)g(N)g(W)g(E)g(I)g(K)g(E)33
b Fk(E)6 b Fl(S)g(E)g(O)g(N)g(U)1649 4282 y Fq(P)t Fr(R)t(E)t(P)m(A)t
(R)f(E)g(D)35 b(B)t(Y)1492 4516 y Fm(G)10 b Fn(R)g(O)g(U)g(P)59
b Fm(3)10 b(9)143 4749 y(C)g Fn(O)g(N)g(N)g(E)g(C)g(T)g
Fm(B)g Fn(A)g(S)g(K)g(E)g(T)59 b Fm(D)10 b Fn(E)g(V)g(E)g(L)g(O)g(P)g
(M)g(E)g(N)g(T)57 b Fm(T)10 b Fn(E)g(A)g(M)1526 4932
y Fk(H)c Fl(E)g(N)g(R)s(Y)34 b Fk(F)6 b Fl(O)g(W)g(L)g(E)g(R)1815
5166 y Fj(Abstract)127 5296 y Fi(This)30 b(document)g(descr)q(ibes)h
(the)f(three)f(main)h(par)s(ts)g(of)f(the)h(ConnectBask)o(et)h(project)
f(that)f(Henr)r(y)i(F)n(o)o(wler)f(will)f(be)h(responsib)o(le)h(f)n(or)
e(and)8 5382 y(compares)20 b(and)e(contr)o(asts)i(diff)n(erent)d
(technologies)i(that)f(can)h(be)f(used)h(to)f(implement)f(those)i(par)s
(ts)f(of)g(the)h(project.)p eop end
%%Page: 1 2
TeXDict begin 1 1 bop 4018 -296 a Fh(1)-148 -144 y Ff(C)t
Fg(O)t(N)t(T)t(E)t(N)t(T)t(S)-150 80 y Fe(1)178 b(Server)23
b(Operating)i(System)3028 b Fd(2)68 224 y(1.1)197 b(Overview)77
b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(2)68 368 y(1.2)197 b(Criteria)35 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(2)68 512
y(1.3)197 b(Potential)21 b(Choices)61 b(.)42 b(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)135 b(2)365 657 y(1.3.1)196 b(Linux)22
b(Ubuntu)f(Server)57 b(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(2)365 801
y(1.3.2)196 b(W)l(indows)22 b(Server)39 b(.)i(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(2)365 945 y(1.3.3)196 b(Solaris)78 b(.)42 b(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)135 b(2)68 1089 y(1.4)197 b(Discussion)44
b(.)e(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(3)68 1234 y(1.5)197 b(Conclusion)28 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(3)-150 1457
y Fe(2)178 b(W)-6 b(eb)24 b(Server)f(Software)3174 b
Fd(3)68 1601 y(2.1)197 b(Overview)77 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(3)68 1745 y(2.2)197
b(Criteria)35 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)135 b(3)68 1890 y(2.3)197 b(Potential)21
b(Choices)61 b(.)42 b(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(3)365 2034 y(2.3.1)196 b(Apache)21 b(HTTP)58 b(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(3)365 2178 y(2.3.2)196
b(Cher)o(okee)43 b(.)e(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(4)365 2322 y(2.3.3)196 b(NGINX)42 b(.)g(.)f(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)135 b(4)68 2467 y(2.4)197 b(Discussion)44
b(.)e(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(4)68 2611 y(2.5)197 b(Conclusion)28 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(4)-150 2834
y Fe(3)178 b(Database)3607 b Fd(4)68 2979 y(3.1)197 b(Overview)77
b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(4)68 3123 y(3.2)197 b(Criteria)35 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(4)68 3267
y(3.3)197 b(Potential)21 b(Choices)61 b(.)42 b(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)135 b(5)365 3411 y(3.3.1)196 b(MySQL)43
b(.)f(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(5)365
3556 y(3.3.2)196 b(SQLite)75 b(.)42 b(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h
(.)f(.)g(.)135 b(5)365 3700 y(3.3.3)196 b(Micr)o(osoft)22
b(SQL)g(Server)49 b(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135 b(5)68 3844 y(3.4)197
b(Discussion)44 b(.)e(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h
(.)f(.)g(.)135 b(5)68 3988 y(3.5)197 b(Conclusion)28
b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)135
b(5)-150 4212 y Fe(References)3763 b Fd(6)p eop end
%%Page: 2 3
TeXDict begin 2 2 bop 4018 -296 a Fh(2)-148 -144 y Ff(1)96
b(S)t Fg(E)t(RV)t(E)t(R)33 b Ff(O)t Fg(P)t(E)t(R)t(A)m(T)t(I)t(N)t(G)i
Ff(S)t Fg(Y)t(S)t(T)t(E)t(M)-150 23 y Fc(1.1)79 b(Over)q(vie)o(w)-150
190 y Fd(For)28 b(this)g(pr)o(oject)f(ther)o(e)g(will)h(need)h(to)f(be)
f(a)h(server)f(to)h(host)g(the)g(web)f(based)g(services)g(involved)h
(in)g(the)g(pr)o(oject.)f(Ther)o(e)g(ar)o(e)g(many)-150
335 y(dif)o(fer)o(ent)d(choices)f(of)h(operating)f(systems)f(that)g
(can)i(r)o(un)g(on)f(a)g(server)g(and)h(this)f(section)g(will)g
(analyze)f(thr)o(ee)h(dif)o(fer)o(ent)h(options)f(and)-150
479 y(show)f(that)f(one)i(will)f(be)g(the)g(best)f(\002t)h(for)h(the)f
(pr)o(oject.)-150 702 y Fc(1.2)79 b(Criteria)-150 869
y Fd(The)28 b(criteria)h(that)e(will)i(be)f(used)g(to)h(choose)g(the)f
(best)f(server)i(operating)f(system)f(for)i(this)f(pr)o(oject)g(will)g
(be)h(the)f(cost,)g(dif)o(\002culty)g(of)-150 1013 y(setup,)e
(available)f(support,)h(necessary)g(downtime,)h(and)g(amount)g(of)g
(maintenance)g(needed.)g(For)h(this)e(pr)o(oject)h(using)f(low)i(cost)f
(or)-150 1158 y(fr)o(ee)j(technologies)h(will)g(be)f(very)g(useful)g
(in)g(keeping)g(the)h(overall)f(budget)g(low)-7 b(.)30
b(Ther)o(e)g(is)g(a)g(r)o(elatively)f(small)h(time)g(window)h(for)-150
1302 y(development)23 b(of)h(the)f(pr)o(oject,)f(so)i(a)f(fast)g(and)g
(easy)f(installation)h(is)g(very)g(important.)g(It)g(will)g(also)g(be)g
(important)g(to)g(have)g(to)h(have)e(a)-150 1446 y(low)g(maintenance)g
(system)f(that)g(will)h(continue)h(to)f(work)h(after)f(the)g
(development)f(team)h(is)f(gone.)-150 1669 y Fc(1.3)79
b(P)m(otential)23 b(Choices)-150 1836 y Fb(1.3.1)79 b(Lin)o(ux)22
b(Ub)n(untu)g(Ser)r(v)n(er)-150 1996 y Fd(Ubuntu)16 b(is)h(a)g
(distribution)g(of)h(Linux)g(that)e(is)h(very)h(popular)e(on)i(desktop)
e(computers,)h(but)g(also)f(has)h(a)g(server)g(version)g(that)g(is)g
(gr)o(owing)-150 2140 y(in)24 b(popularity)f([1].)h(Unlike)g(the)g
(very)g(popular)f(Red)h(Hat)f(Linux)h(distribution,)g(Ubuntu)f(is)g(fr)
o(ee)i([1].)f(Updates)e(and)i(maintenance)f(of)-150 2284
y(the)j(code)h(and)f(security)g(of)g(Ubuntu)f(ar)o(e)h(made)g(by)g(the)
g(global)f(community)h(as)g(well)g(as)f(a)h(paid)g(development)f(team)h
([1].)g(Ther)o(e)f(is)-150 2429 y(24x7)h(support)h(available)f(that)h
(can)h(be)g(very)f(important)h(if)g(a)f(quick)h(r)o(esponse)f(is)g
(need)i(to)e(critical)h(err)o(ors)g([1].)g(Ubuntu)f(is)g(an)h(easy)-150
2573 y(system)e(to)h(setup)f(with)h(an)g(installation)f(that)g(can)h
(be)g(completed)g(in)h(as)e(little)h(as)f(15)g(minutes)h([1].)g(Like)g
(other)h(versions)e(of)i(Linux,)-150 2717 y(Ubuntu)20
b(Server)h(is)g(very)g(easy)f(to)h(maintain)g(and)g(rar)o(ely)g(r)o
(equir)o(es)f(r)o(eboots,)g(making)h(it)g(ideal)g(for)h(an)f
(application)f(that)h(r)o(equir)o(es)f(very)-150 2861
y(little)i(downtime)g([1].)-150 3063 y Fb(1.3.2)79 b(Windo)o(ws)21
b(Ser)r(v)n(er)-150 3223 y Fd(The)d(W)l(indows)h(Server)f(operating)g
(systems)f(have)h(been)g(very)h(popular)e(with)i(businesses)d(since)i
(they)h(\002rst)f(came)g(out)g([2].)h(Many)f(tools)-150
3367 y(ar)o(e)24 b(pr)o(ovided)g(that)g(will)g(work)h(very)f(well)g
(with)h(W)l(indows)f(Server)-6 b(,)24 b(including)h(Micr)o(osoft)f(SQL)
h(Server)f(and)g(Internet)g(Information)-150 3512 y(Services)18
b([2].)h(A)f(lar)o(ge)g(number)h(of)g(successful)f(businesses)e(use)i
(W)l(indows)h(Server)-6 b(,)18 b(which)i(means)d(that)h(ther)o(e)h(ar)o
(e)f(many)g(examples)f(of)-150 3656 y(how)i(to)f(use)g(it)g(as)f(a)h
(part)g(of)h(a)f(business)e([2].)j(W)l(indows)f(Server)g(is)g(consider)
o(ed)h(by)f(many)g(to)g(be)h(the)f(best)f(server)h(operating)g(system)f
(for)-150 3800 y(mission-critical)k(systems,)e(meaning)i(that)f(ther)o
(e)h(is)f(very)h(little)g(downtime)g(r)o(equir)o(ed)g(when)g(using)g(W)
l(indows)g(Server)g([2].)g(W)l(indows)-150 3944 y(Server)27
b(has)f(built)g(in)h(tools)g(to)g(help)f(impr)o(ove)h(power)g(ef)o
(\002ciency)g(of)g(the)g(server)f(that)h(can)f(help)h(lower)g(power)g
(consumption)g(for)g(a)-150 4089 y(company)d([2].)g(A)f(virtualization)
g(platform)h(is)g(also)f(included)i(with)f(W)l(indows)g(server)g(which)
g(can)g(allow)g(for)h(easily)e(migrating)h(the)-150 4233
y(system)e(fr)o(om)i(one)f(physical)g(machine)g(to)g(another)h(or)f
(allowing)h(users)e(to)i(r)o(emotely)f(access)f(applications)g(and)h(r)
o(un)h(them)f(like)g(they)-150 4377 y(wer)o(e)f(locally)g(installed)g
([2].)-150 4579 y Fb(1.3.3)79 b(Solar)q(is)-150 4739
y Fd(Solaris)26 b(is)h(a)f(version)h(of)g(Unix)g(that)f(has)g(been)h
(developed)g(as)f(a)g(server)h(operating)f(system)g([3].)h(Solaris)f
(was)g(cr)o(eated)h(by)g(Sun)f(and)-150 4883 y(they)g(ar)o(e)f(also)g
(r)o(esponsible)g(for)h(supporting)f(it)h([3].)g(This)f(makes)g
(Solaris)g(a)h(good)g(operating)g(system)e(for)j(a)f(user)f(who)h(will)
g(need)g(a)-150 5027 y(lot)21 b(of)h(help)g(in)f(setting)g(up)f(their)i
(system)e([3].)i(Solaris)e(is)h(based)g(of)o(f)h(of)g(Unix,)f(which)h
(is)f(an)g(operating)g(system)f(that)g(has)h(been)g(ar)o(ound)-150
5172 y(a)30 b(long)h(time)g(and)g(is)f(tr)o(usted)h(by)f(many)h
(businesses)d([3].)j(A)f(pr)o(oblem)g(with)h(Solaris)f(is)h(that)f(it)g
(will)h(not)g(r)o(un)g(on)g(many)g(dif)o(fer)o(ent)-150
5316 y(har)o(dwar)o(e)21 b(systems)f(including)j(most)e(HP)h(and)f(IBM)
h(systems)e([3].)i(Solaris)g(is)f(not)h(fr)o(ee,)g(although)f(ther)o(e)
h(is)f(a)g(version)h(of)h(Solaris)e(that)-150 5460 y(is)h(mor)o(e)g
(similar)f(to)i(Linux)f(and)g(can)g(be)g(optained)g(for)h(fr)o(ee)f
(with)g(optional)g(paid)f(support)g([3].)p eop end
%%Page: 3 4
TeXDict begin 3 3 bop 4018 -296 a Fh(3)-150 -144 y Fc(1.4)79
b(Discussion)-150 26 y Fd(Unix,)20 b(which)h(Solaris)e(is)h(based)g(of)
o(f)h(of)g(has)f(been)g(ar)o(ound)g(a)g(long)h(time)f(compar)o(ed)g(to)
h(W)l(indows)f(Server)g(and)h(Linux)f(Ubuntu)f(Server)-6
b(,)-150 171 y(but)21 b(is)g(not)h(curr)o(ently)g(as)f(popular)f(as)h
(either)h(of)g(the)g(other)g(two.)f(Linux)h(Ubuntu)f(Server)g(is)g
(completely)h(fr)o(ee)f(with)h(optional)f(support)-150
315 y(packages)f(that)h(can)h(be)g(pur)o(chased,)e(in)i(contrast)f(to)h
(W)l(indows)g(Server)g(and)f(Solaris)g(which)i(both)e(cost)h(money)-9
b(.)22 b(All)f(of)i(the)e(operating)-150 459 y(systems)29
b(pr)o(ovide)i(key)g(featur)o(es)e(that)i(make)f(any)h(server)f
(operating)h(system)e(useful)i(such)f(as)g(security)-9
b(,)31 b(support,)e(easy)h(setup.)g(It)-150 603 y(might)c(be)h
(slightly)f(har)o(der)g(to)h(get)f(support)g(when)g(using)g(a)g(Linux)h
(system)e(than)h(the)h(other)g(two)f(because)f(Linux)i(isn't)f(owned)h
(by)-150 748 y(anyone.)-150 1022 y Fc(1.5)79 b(Conc)n(lusion)-150
1192 y Fd(The)22 b(best)g(server)h(operating)f(system)f(to)i(use)f(for)
i(our)f(pr)o(oject)e(is)i(Ubuntu)e(Server)-6 b(.)23 b(Solaris)f(isn't)g
(fr)o(ee)h(and)f(doesn't)h(r)o(eally)f(pr)o(ovide)h(as)-150
1336 y(many)18 b(featur)o(es)e(as)h(W)l(indows)i(Server)e(or)i(Ubuntu)d
(so)i(it)g(is)g(de\002nitely)g(not)g(the)g(right)g(choice)g(for)h(our)g
(pr)o(oject.)d(W)l(indows)i(Server)g(might)-150 1481
y(pr)o(ovide)25 b(slightly)g(mor)o(e)g(featur)o(es)f(than)h(Ubuntu,)e
(but)i(all)g(we)g(ar)o(e)g(using)f(the)h(server)g(for)h(is)f(to)h(host)
e(a)h(simple)g(web)f(application,)g(so)-150 1625 y(things)d(like)g
(allowing)g(users)f(to)h(r)o(un)g(desktop)g(applications)e(r)o(emotely)
i(ar)o(en't)f(important)g(for)i(our)f(pr)o(oject.)f(For)i(all)e(of)i
(the)f(important)-150 1769 y(featur)o(es)16 b(to)g(our)h(pr)o(oject)f
(like)h(setup,)e(support,)h(downtime,)g(and)h(maintenance,)f(W)l
(indows)h(Server)f(and)h(Ubuntu)f(ar)o(en't)g(that)g(dif)o(fer)o(ent)
-150 1913 y(and)28 b(both)g(would)g(be)g(good)h(choices.)f(The)f(main)h
(dif)o(fer)o(ence)g(is)g(that)f(Ubuntu)g(is)h(fr)o(ee,)f(and)h(for)h
(that)f(r)o(eason)f(a)g(better)h(choice)g(than)-150 2058
y(W)l(indows)22 b(Server)g(for)h(this)f(pr)o(oject.)-148
2356 y Ff(2)96 b(W)t Fg(E)t(B)31 b Ff(S)t Fg(E)t(RV)t(E)t(R)i
Ff(S)t Fg(O)t(F)t(T)t(WA)t(R)t(E)-150 2527 y Fc(2.1)79
b(Over)q(vie)o(w)-150 2697 y Fd(W)-7 b(eb)24 b(server)f(softwar)o(e)h
(is)f(essential)g(to)h(r)o(unning)g(a)g(website.)f(Ther)o(e)g(ar)o(e)g
(many)h(dif)o(fer)o(ent)g(options)g(to)g(use)f(and)h(it)g(will)g(be)g
(important)-150 2841 y(for)f(this)f(pr)o(oject)f(to)h(have)g(one)g
(that)f(meets)h(all)f(of)i(the)f(needs)g(of)h(the)f(pr)o(oject.)-150
3115 y Fc(2.2)79 b(Criteria)-150 3285 y Fd(The)22 b(main)g(important)g
(factors)g(for)i(this)e(pr)o(oject)f(ar)o(e)h(a)g(web)g(server)g
(softwar)o(e)g(that)g(is)g(well)h(documented)g(and)f(fast)g(to)g
(setup,)f(as)h(well)-150 3430 y(as)k(cheap)g(and)g(able)g(to)h(r)o(un)f
(at)g(fast)g(speeds)g(with)g(r)o(elatively)g(little)g(downtime.)h(W)l
(ith)f(the)g(short)h(time)f(period)h(for)g(development)f(it)-150
3574 y(will)21 b(be)g(critical)g(to)f(have)h(a)f(web)h(server)f(that)g
(is)h(up)f(and)h(r)o(unning)g(quickly)-9 b(.)22 b(Also)e(a)g(low)h
(cost)g(is)g(very)f(important)h(to)f(this)h(pr)o(oject.)e(The)-150
3718 y(web)k(application)e(will)i(be)g(very)g(important)f(to)h(daily)g
(operations)f(of)i(the)f(hospital)f(making)g(small)g(amounts)g(of)i
(downtime)f(another)-150 3862 y(important)e(factor)i(in)f(evaluation.)
-150 4137 y Fc(2.3)79 b(P)m(otential)23 b(Choices)-150
4307 y Fb(2.3.1)79 b(Apache)22 b(HTTP)-150 4470 y Fd(The)35
b(Apache)f(W)-7 b(eb)34 b(Server)h(is)g(very)g(powerful)g(and)g(pr)o
(ovides)g(many)f(useful)h(featur)o(es)f(to)h(its)f(users)g([4].)i(It)e
(is)h(an)g(open)g(sour)o(ce)-150 4614 y(softwar)o(e,)25
b(making)g(it)h(fr)o(ee)f(to)h(use)f(and)h(also)f(gives)g(users)g(of)h
(this)f(softwar)o(e)g(the)h(ability)f(to)h(modify)g(its)f(sour)o(ce)h
(code)g(to)g(meet)f(their)-150 4758 y(needs)18 b([4].)g(Featur)o(es)f
(include)h(a)g(contr)o(ol)h(panel,)e(customizable)f(err)o(or)j
(messages,)d(authentication)h(schemes,)g(Domain)h(Name)g(Service,)-150
4902 y(Simple)i(Mail)h(T)-7 b(ransfer)20 b(Pr)o(otocol,)h(and)g(File)g
(T)-7 b(ransfer)21 b(Pr)o(otocol)g([4].)h(Apache)d(can)i(r)o(un)h(on)f
(almost)f(any)h(operating)g(system)e(including)-150 5047
y(W)l(indows,)g(MacOS,)g(Linux,)h(and)f(Unix)g([4].)h(Ther)o(e)f(is)g
(also)g(support)f(for)i(many)g(dif)o(fer)o(ent)f(pr)o(ogramming)g
(languages)f(including)j(PHP)-150 5191 y(and)h(Python,)g(and)g(the)g
(ability)g(to)g(have)f(SSL)h(and)g(TSL)g(encryption)g(for)h(websites)e
([4].)p eop end
%%Page: 4 5
TeXDict begin 4 4 bop 4018 -296 a Fh(4)-150 -144 y Fb(2.3.2)79
b(Cherok)n(ee)-150 19 y Fd(Cher)o(okee)25 b(is)f(a)g(high)h(performing)
g(web)f(server)g(that)g(r)o(uns)h(with)f(good)i(speed)d(and)i(is)f
(easy)g(to)g(set)g(up)g([5].)h(It)f(supports)f(many)h(other)-150
163 y(technologies,)j(such)h(as)e(PHP)h(and)h(SSL)f(encryption,)h(and)f
(can)h(be)f(r)o(un)h(of)g(many)f(dif)o(fer)o(ent)h(operating)f(systems)
f(including)i(Linux,)-150 307 y(Unix,)k(and)h(W)l(indows)g([5].)g(Cher)
o(okee)g(also)f(pr)o(ovides)g(updates)f(that)i(do)g(not)g(r)o(equir)o
(e)f(any)h(downtime)g([5].)g(Another)g(important)-150
452 y(featur)o(e)20 b(of)i(Cher)o(okee)g(is)e(that)h(it)g(pr)o(ovides)f
(an)h(easy)g(to)g(use)f(con\002guration)i(interface)f(called)g(cher)o
(okee-admin)h([5].)f(Cher)o(okee)h(is)f(also)-150 596
y(fr)o(ee)30 b(and)g(has)g(a)f(an)h(open)g(sour)o(ce)g(code)g(base)f
(that)h(can)g(be)g(modi\002ed)g(by)g(anyone)g(who)h(wants)e(to)h(make)g
(changes)f(to)h(adjust)f(the)-150 740 y(system)21 b(to)h(meet)g(their)g
(needs)g([5].)-150 977 y Fb(2.3.3)79 b(NGINX)-150 1140
y Fd(NGINX)32 b(is)f(a)h(system)f(that)g(has)g(been)h(optimized)g(to)g
(handle)g(a)f(lar)o(ge)h(number)g(of)g(simultaneous)f(connections)h
([6].)g(It)g(pr)o(ovides)-150 1284 y(support)27 b(for)i(PHP)f(and)g
(Python)g(as)g(well)g(as)f(email)h(pr)o(otocols)g(like)g(SMTP)-10
b(,)27 b(POP3,)g(and)h(IMAP)f([6].)i(It)e(is)h(a)g(very)g(fast)g
(system)f(that)-150 1429 y(maximizes)h(har)o(dwar)o(e)h(ef)o
(\002ciency)h([6].)f(NGINX)h(mainly)f(only)h(supports)e(Linux)i(and)f
(Unix)h(based)e(systems,)g(and)i(has)f(very)g(little)-150
1573 y(support)21 b(for)h(W)l(indows)g(and)g(other)g(operating)f
(systems)g([6].)h(Ther)o(e)f(is)g(plenty)g(of)i(documentation)e
(explaining)h(how)g(to)f(use)h(NGINX)-150 1717 y(and)g(training)h(to)f
(learn)g(mor)o(e)h(about)e(the)h(system)g([6)o(].)h(This)f(softwar)o(e)
f(is)h(open)h(sour)o(ce)e(and)i(fr)o(ee)f(to)h(use)e(with)i(an)f
(optional)g(pur)o(chase)-150 1861 y(that)f(includes)h(support.)-150
2136 y Fc(2.4)79 b(Discussion)-150 2306 y Fd(Apache)19
b(HTTP)g(and)h(NGINX)g(ar)o(e)f(both)h(widely)h(used)f(web)g(servers)f
(compar)o(ed)h(to)g(Cher)o(okee)g(which)h(is)f(a)f(much)h(less)g(used)f
(pr)o(oduct.)-150 2450 y(All)27 b(thr)o(ee)g(ar)o(e)f(open)h(sour)o(ce)
g(and)g(available)f(for)i(fr)o(ee)f(and)g(pr)o(ovide)g(many)g(of)h(the)
f(same)f(featur)o(es)g(and)i(support.)d(NGINX)i(doesn't)-150
2594 y(support)h(very)h(many)g(operating)g(systems)e(compar)o(ed)i(to)g
(both)g(Apache)f(and)i(Cher)o(okee)f(which)g(support)f(almost)h(any)f
(operating)-150 2739 y(system.)-150 3013 y Fc(2.5)79
b(Conc)n(lusion)-150 3183 y Fd(For)22 b(this)e(pr)o(oject)g(the)h(best)
f(choice)i(of)g(web)f(server)f(softwar)o(e)h(is)f(Apache.)g(It)h(pr)o
(ovides)f(all)h(of)h(the)e(featur)o(es)g(that)h(ar)o(e)f(necessary)g
(for)i(the)-150 3327 y(pr)o(oject)e(and)i(can)f(r)o(un)h(on)f(almost)g
(any)g(operating)g(system)f(wher)o(e)h(NGINX)g(can)g(not.)g(Cher)o
(okee)h(is)f(also)g(a)g(good)h(choice)g(but)e(is)h(not)h(as)-150
3471 y(widely)h(used)e(and)i(does)f(not)g(have)g(as)f(much)h(support)f
(or)h(documentation)h(as)e(Apache.)-148 3770 y Ff(3)96
b(D)q Fg(A)m(T)m(A)t(B)r(A)t(S)t(E)-150 3940 y Fc(3.1)79
b(Over)q(vie)o(w)-150 4111 y Fd(A)29 b(database)e(will)i(be)g(a)g(very)
g(important)f(part)g(of)i(this)f(pr)o(oject.)f(User)g(information)i(as)
e(well)h(as)f(information)i(about)e(patients)g(will)-150
4255 y(need)23 b(to)g(be)f(stor)o(ed)g(in)h(the)f(database.)f(The)h
(web)g(application)g(will)g(r)o(ely)h(heavily)f(on)h(interaction)f
(with)h(the)f(database)f(to)i(pr)o(ovide)f(the)-150 4399
y(featur)o(es)f(users)g(will)h(need.)-150 4673 y Fc(3.2)79
b(Criteria)-150 4844 y Fd(Important)25 b(factors)g(to)h(consider)g
(when)g(selecting)g(a)f(database)f(for)i(this)g(pr)o(oject)e(ar)o(e)h
(the)h(cost,)f(speed,)g(compatability)f(with)i(chosen)-150
4988 y(operating)c(systems)e(and)i(web)g(servers,)f(and)h(ability)g(to)
g(pr)o(ovide)g(easy)f(ways)g(to)h(r)o(eport)g(on)g(the)g(data)g(it)g
(holds.)g(As)f(always)g(it)h(will)g(be)-150 5132 y(important)g(to)h
(keep)g(the)g(cost)f(of)i(the)f(pr)o(oject)f(low)-7 b(.)23
b(Users)f(will)h(need)g(to)g(enter)g(information)h(while)f(on)g(phone)g
(calls)f(with)h(owners)g(of)-150 5276 y(the)g(patients,)e(so)j(speed)e
(will)i(be)e(important)h(as)f(they)h(don't)h(want)f(to)g(waste)f(the)h
(time)g(of)h(the)f(person)g(on)h(the)f(phone.)g(Reporting)g(on)-150
5421 y(the)f(data)f(collected)i(will)g(be)e(very)i(important)e(for)i
(administrators)e(to)h(evaluate)f(the)h(success)f(of)h(the)g(hospital)g
(and)g(the)g(new)g(system.)p eop end
%%Page: 5 6
TeXDict begin 5 5 bop 4018 -296 a Fh(5)-150 -144 y Fc(3.3)79
b(P)m(otential)23 b(Choices)-150 26 y Fb(3.3.1)79 b(MySQL)-150
189 y Fd(MySQL)25 b(is)f(an)h(open)f(sour)o(ce)h(database)e(management)
g(tool)i(that)g(pr)o(ovides)f(many)g(important)g(featur)o(es)g([7].)h
(MySQL)f(is)h(known)g(for)-150 333 y(its)g(excellent)h(data)f(security)
h(and)f(is)h(used)f(by)h(many)g(popular)e(websites)h(including)h
(Facebook)g(and)g(T)-7 b(witter)25 b([7].)h(It)g(pr)o(ovides)f(high)
-150 478 y(performance)20 b(and)g(excellent)f(scalability)f(that)h
(gives)g(it)g(gr)o(eat)g(speeds)g(for)h(any)f(size)g(system)g(and)g
(allows)g(it)h(to)f(only)h(take)f(up)g(as)g(much)-150
622 y(space)k(as)g(needed)h([7].)h(MySQL)f(comes)f(with)h(a)g
(guarantee)f(of)h(no)g(downtime)h(and)f(can)g(work)g(with)g(almost)f
(any)h(operating)f(system)-150 766 y(and)f(web)g(server)g([7].)-150
1003 y Fb(3.3.2)79 b(SQLite)-150 1166 y Fd(SQLite)21
b(is)g(a)f(r)o(elational)h(database)e(management)h(system)g(that)g(is)h
(imbedded)h(into)f(the)g(system)f(that)g(is)h(using)f(it)h([8].)h(It)e
(is)h(a)g(\002le-based)-150 1310 y(database)16 b(that)i(interacts)f
(dir)o(ectly)i(with)f(the)g(system)f(making)h(it)g(very)g(fast)g(and)g
(ef)o(\002cient)g([8].)h(The)f(system)f(is)g(easily)h(portable)f
(because)-150 1455 y(it)i(is)f(contained)h(in)g(a)f(single)g(\002le)h
(on)g(the)f(system)g([8].)h(SQLite)f(uses)g(a)g(slightly)g(modi\002ed)i
(SQL)e(that)g(has)g(only)h(a)g(few)g(featur)o(es)e(r)o(emoved)-150
1599 y([8].)i(It)g(does)g(not)h(pr)o(ovide)f(any)g(ability)f(to)i
(manage)e(dif)o(fer)o(ent)i(users)e(access)g(to)h(the)g(database)f
(like)h(some)g(other)h(management)e(systems)-150 1743
y(might)k([8].)-150 1980 y Fb(3.3.3)79 b(Microsoft)21
b(SQL)h(Ser)r(v)n(er)-150 2143 y Fd(Micr)o(osoft)h(SQL)f(Server)g(is)g
(a)g(very)h(easy)e(to)i(use)e(and)i(powerful)f(database)f(management)g
(system)h([9].)g(It)g(pr)o(ovides)g(integration)g(with)-150
2287 y(tools)g(like)h(SQL)g(Server)f(Management)f(Studio)i(and)f(SQL)h
(Server)f(Pr)o(o\002ler)h(that)f(help)g(users)g(manage)f(their)i
(database)e([9].)h(Ther)o(e)g(is)g(a)-150 2431 y(lot)h(of)i(support)d
(and)h(documentation)g(pr)o(ovided)h(for)g(SQL)g(Server)f(and)g(it)h
(is)f(much)g(easier)g(to)g(learn)g(and)h(get)f(help)g(with)g(than)g
(many)-150 2576 y(other)f(SQL)h(based)e(pr)o(oducts)h([9].)g(SQL)g
(server)g(is)g(a)g(paid)f(pr)o(oduct)h(and)g(pur)o(chasing)f(comes)h
(with)g(support)f(fr)o(om)i(Micr)o(osoft)f([9].)-150
2850 y Fc(3.4)79 b(Discussion)-150 3020 y Fd(SQLite)27
b(is)f(a)g(slightly)g(less)g(featur)o(e)g(rich)h(pr)o(oduct)f(compar)o
(ed)h(to)f(MySQL)h(and)g(Micr)o(osoft)g(SQL)f(Server)-6
b(.)27 b(All)f(of)h(these)f(systems)f(can)-150 3164 y(work)30
b(with)f(many)f(dif)o(fer)o(ent)i(operating)e(systems)g(and)h(web)f
(servers.)g(Micr)o(osoft)i(SQL)f(Server)g(is)f(a)h(paid)f(pr)o(oduct)h
(in)g(contrast)g(to)-150 3309 y(MySQL)22 b(and)g(SQLite)h(which)f(can)g
(both)g(be)g(used)g(for)h(fr)o(ee.)-150 3583 y Fc(3.5)79
b(Conc)n(lusion)-150 3753 y Fd(The)23 b(best)g(database)f(management)g
(system)g(for)j(this)e(pr)o(oject)g(is)g(MySQL.)g(The)h(speed)f(of)h
(SQLite)f(is)h(better)f(than)g(the)g(other)h(two,)g(but)-150
3897 y(is)e(not)g(worth)h(the)f(tradeof)o(f)h(of)g(lost)f
(functionality)g(for)h(this)f(application.)f(Micr)o(osoft)h(SQL)h
(Server)f(pr)o(ovides)f(slightly)h(mor)o(e)g(featur)o(es,)-150
4042 y(documentation,)32 b(and)g(support)f(than)h(MySQL,)g(but)f(they)h
(ar)o(e)f(not)i(important)e(enough)h(to)h(the)e(pr)o(oject)h(to)g(of)o
(fset)g(the)g(lar)o(ge)f(cost)-150 4186 y(dif)o(fer)o(ence)23
b(between)e(the)h(two.)p eop end
%%Page: 6 7
TeXDict begin 6 6 bop 4018 -296 a Fh(6)-148 -144 y Ff(R)t
Fg(E)t(F)t(E)t(R)t(E)t(N)t(C)t(E)t(S)-150 28 y Fa([1])40
b(K.)23 b(Hess,)h(\223Ubuntu)f(server:)g(The)g(linux)h(server)f
(operating)h(systems)g(dark)f(horse.\224)h(https://www)-6
b(.serverwatch.com/tr)o(ends/article.php/3870141/)-33
141 y(Ubuntu-)t(Server)o(-)t(The-)t(Linux-)t(Server)o(-)t(Operating-)t
(Systems-)t(Dark-)t(Horse.htm,)23 b(3)c(2010.)-150 253
y([2])40 b(O.)18 b(Rist,)g(\223W)l(indows)g(server)g(top)g(5)g
(bene\002ts)g(for)g(todays)h(workfor)o(ce.\224)f
(https://blogs.technet.micr)o(osoft.com/windowsserver)o
(experts/2010/02/08/)-33 366 y(windows-)t(server)o(-)t(top-)t(5-)t
(bene\002ts-)t(for)o(-)t(todays-)t(workfor)o(ce/,)24
b(2)19 b(2010.)-150 478 y([3])40 b(K.)67 b(Milber)o(g,)f(\223When)g(to)
g(use)h(solaris)h(vs.)e(linux:)h(Operating)g(system)g(comparison.\224)g
(http://sear)o(chdatacenter)-5 b(.techtar)o(get.com/tip/)-33
591 y(When-)t(to-)t(use-)t(Solaris-)t(vs-)t(Linux-)t(Operating-)t(sys)q
(tem-)t(compari)q(son,)24 b(12)c(2008.)-150 703 y([4])40
b(D.)18 b(Sullivan,)i(\223Advantages)f(of)g(apache)g(web)f(server)-5
b(.\224)19 b(https://www)-6 b(.techwalla.com/articles/advantages-)t
(of-)t(apache-)t(web-)t(server.)-150 816 y([5])40 b(A.)19
b(L.)f(Ortega,)h(\223Cher)o(okee)g(basics.\224)h(http://cher)o(okee-)t
(pr)o(oject.com/doc/basics)p 2160 825 34 5 v 33 w(why)p
2325 825 V 33 w(cher)o(okee.html.)-150 928 y([6])40 b(A.)23
b(Leslie,)g(\223Nginx)h(vs.)e(apache)h(\(pr)o(o/con)h(r)o(eview)-6
b(,)22 b(uses,)h(&)f(hosting)i(for)f(each\).\224)g(http://www)-6
b(.hostingadvice.com/how-)t(to/nginx-)t(vs-)t(apache/,)23
b(7)-33 1041 y(2017.)-150 1153 y([7])40 b(T)-5 b(.)26
b(Branson,)g(\2238)g(major)g(advantages)g(of)g(using)h(mysql.\224)f
(https://www)-6 b(.datamation.com/storage/8-)t(major)o(-)t(advantages-)
t(of-)t(using-)t(mysql.html,)30 b(11)-33 1266 y(2016.)-150
1378 y([8])40 b(O.)27 b(T)-6 b(ezer)h(,)27 b(\223Sqlite)h(vs)f(mysql)h
(vs)f(postgr)o(esql:)h(A)f(comparison)h(of)f(r)o(elational)i(database)f
(management)e(systems.\224)i(https://www)-6 b(.digitalocean.com/)-33
1491 y(community/tutorials/sqlite-)t(vs-)t(mysql-)t(vs-)t(po)q(stgr)o
(esql)q(-)t(a-)5 b(compari)q(son-)g(of-)t(relatio)q(nal-)g(database-)g
(management-)t(systems,)24 b(2)19 b(2014.)-150 1603 y([9])40
b(G.)35 b(Farrar)-5 b(,)37 b(\223Micr)o(osoft)f(sql)g(server:)g
(Advantages)f(and)g(challenges)g(fr)o(om)h(the)f(virtualization)i
(admins)f(view)-6 b(.\224)34 b(https://turbonomic.com/blog/)-33
1716 y(micr)o(osoft-)t(sql-)t(server)o(-)t(advantages-)t(challenges-)t
(virtuali)q(zatio)q(n-)t(admins-)5 b(view/,)24 b(8)19
b(2016.)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
