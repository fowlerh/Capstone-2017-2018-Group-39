#!/bin/bash
pastdate=$(<lasttime)
echo $(date +"%Y-%m-%d %T") > lasttime
mysql -u root -pHealthydogsandcats -e 'USE ConnectBasket; SELECT `Recipient` FROM `Messages` WHERE `DBCreateDate` >= "$(pastdate)"' --skip-column-names -B > newmessages
if (( $(wc -l newmessages | cut -f1 -d" ") != 0)) 
	then 
		while IFS='' read -r line || [[ -n "$line" ]]; do
			token=$line
			echo $token > file.file
			token=$(<file.file)
			echo "$(date)  ---  Sending message to $token"
			echo "$(date)  ---  Sending message to $token" >> emaillog.file
			# SQL hates filtering in vars from other SQL commands for some reason, so this was honestly the best thing I could come up with.
			groupidSQL="mysql -u root -pHealthydogsandcats -e 'USE ConnectBasket; SELECT \`GroupsTableID\` FROM \`Groups\` WHERE \`GroupName\` = \"${token}\"' --skip-column-names -B"
			groupid=$(eval $groupidSQL)
			usersingroupSQL="mysql -u root -pHealthydogsandcats -e 'USE ConnectBasket; SELECT \`UsersTableID\` FROM \`GroupsAndUsers\` WHERE \`GroupsTableID\` = \"${groupid}\"' --skip-column-names -B"
			usersingroup=$(eval $usersingroupSQL)
			IFS=$' ' read -rd '' -a userarray <<< $usersingroup 
			for i in "${userarray[@]}"
			do
				emailaddressSQL="mysql -u root -pHealthydogsandcats -e 'USE ConnectBasket; SELECT \`EmailAddress\` FROM \`Users\` WHERE \`UsersTableID\` = \"${i}\"' --skip-column-names -B"
				emailenabledSQL="mysql -u root -pHealthydogsandcats -e 'USE ConnectBasket; SELECT \`ReceiveEmails\` FROM \`Users\` WHERE \`UsersTableID\` = \"${i}\"' --skip-column-names -B"
				emailaddress=$(eval $emailaddressSQL)
				emailenabled=$(eval $emailenabledSQL)
				if [[ $emailenabled -eq 1 ]]
				then
					echo "Sending notification to $emailaddress"
					mailx -s “New_ConnectBasket_Messages” $emailaddress < message.txt
				fi
			done
		done < newmessages
fi


echo "" > newmessages
